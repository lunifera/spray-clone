/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.diagram;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jModelServiceTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/diagram/Mod4jModelService.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray ModelService.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.diagram;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.resources.IResource;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.resources.IWorkspaceRoot;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.resources.ResourcesPlugin;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.CoreException;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.InternalEObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.dt.IDiagramTypeProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;");
    _builder.newLine();
    _builder.append("import null.BusinessDomainDslFactory;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessDomainModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class gives access to the domain model root element for a diagram.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* On first access, a new resource will be created to which the model");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* is added.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Mod4jModelService implements ISprayConstants {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final String FILE_EXTENSION = \"businessdomaindsl\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected IPeService peService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected IDiagramTypeProvider dtp;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static protected Mod4jModelService modelService = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* return the model service, create one if it does not exist yet.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static public Mod4jModelService getModelService(IDiagramTypeProvider dtp){");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("modelService = new Mod4jModelService(dtp);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return modelService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* return the model service.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* returns null if there is no model service.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static public Mod4jModelService getModelService(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return modelService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Mod4jModelService (IDiagramTypeProvider dtp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.dtp = dtp;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.peService = Graphiti.getPeService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public BusinessDomainModel getModel () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Diagram diagram = dtp.getDiagram();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Resource r = diagram.eResource();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ResourceSet set = r.getResourceSet();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("EObject bo = (EObject) dtp.getFeatureProvider().getBusinessObjectForPictogramElement(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("BusinessDomainModel model = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// If its a proxy, resolve it");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("if( bo != null && bo.eIsProxy() ){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if( bo instanceof InternalEObject) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("model = (BusinessDomainModel)set.getEObject(((InternalEObject) bo).eProxyURI(), true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (model == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model = createModel();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return model;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Object getBusinessObject(PictogramElement pe){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dtp.getFeatureProvider().getBusinessObjectForPictogramElement(dtp.getDiagram());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Creates the domain model element and store it in the file. Overwrite to set required properties on creation.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected BusinessDomainModel createModel () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Diagram diagram = dtp.getDiagram();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BusinessDomainModel model = BusinessDomainDslFactory.eINSTANCE.createBusinessDomainModel();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("createModelResourceAndAddModel (model);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("peService.setPropertyValue(diagram, PROPERTY_URI, EcoreUtil.getURI(model).toString());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// link the diagram with the model element");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("dtp.getFeatureProvider().link(diagram, model);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return model;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (CoreException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createModelResourceAndAddModel (final BusinessDomainModel model) throws CoreException, IOException {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Diagram diagram = dtp.getDiagram();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("URI uri = diagram.eResource().getURI();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("uri = uri.trimFragment();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("uri = uri.trimFileExtension();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("uri = uri.appendFileExtension(FILE_EXTENSION);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ResourceSet rSet = diagram.eResource().getResourceSet();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IResource file = workspaceRoot.findMember(uri.toPlatformString(true));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (file == null || !file.exists()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Resource resource = rSet.createResource(uri);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("resource.setTrackingModification(true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("resource.getContents().add(model);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final Resource resource = rSet.getResource(uri, true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("resource.getContents().add(model);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
