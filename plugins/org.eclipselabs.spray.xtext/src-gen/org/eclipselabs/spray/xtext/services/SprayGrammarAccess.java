/*
* generated by Xtext
*/
package org.eclipselabs.spray.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SprayGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModelTypeEClassCrossReference_4_0 = (CrossReference)cModelTypeAssignment_4.eContents().get(0);
		private final RuleCall cModelTypeEClassQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cModelTypeEClassCrossReference_4_0.eContents().get(1);
		private final Assignment cStyleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStyleSprayStyleRefParserRuleCall_5_0 = (RuleCall)cStyleAssignment_5.eContents().get(0);
		private final Assignment cBehaviourGroupsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBehaviourGroupsBehaviorGroupParserRuleCall_6_0 = (RuleCall)cBehaviourGroupsAssignment_6.eContents().get(0);
		private final Assignment cMetaClassesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMetaClassesMetaClassParserRuleCall_7_0 = (RuleCall)cMetaClassesAssignment_7.eContents().get(0);
		
		//Diagram:
		//	imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
		//	behaviourGroups+=BehaviorGroup* metaClasses+=MetaClass*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
		//behaviourGroups+=BehaviorGroup* metaClasses+=MetaClass*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"diagram"
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//modelType=[ecore::EClass|QualifiedName]
		public Assignment getModelTypeAssignment_4() { return cModelTypeAssignment_4; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getModelTypeEClassCrossReference_4_0() { return cModelTypeEClassCrossReference_4_0; }

		//QualifiedName
		public RuleCall getModelTypeEClassQualifiedNameParserRuleCall_4_0_1() { return cModelTypeEClassQualifiedNameParserRuleCall_4_0_1; }

		//style=SprayStyleRef?
		public Assignment getStyleAssignment_5() { return cStyleAssignment_5; }

		//SprayStyleRef
		public RuleCall getStyleSprayStyleRefParserRuleCall_5_0() { return cStyleSprayStyleRefParserRuleCall_5_0; }

		//behaviourGroups+=BehaviorGroup*
		public Assignment getBehaviourGroupsAssignment_6() { return cBehaviourGroupsAssignment_6; }

		//BehaviorGroup
		public RuleCall getBehaviourGroupsBehaviorGroupParserRuleCall_6_0() { return cBehaviourGroupsBehaviorGroupParserRuleCall_6_0; }

		//metaClasses+=MetaClass*
		public Assignment getMetaClassesAssignment_7() { return cMetaClassesAssignment_7; }

		//MetaClass
		public RuleCall getMetaClassesMetaClassParserRuleCall_7_0() { return cMetaClassesMetaClassParserRuleCall_7_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceSprayQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=SprayQualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=SprayQualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=SprayQualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//SprayQualifiedNameWithWildCard
		public RuleCall getImportedNamespaceSprayQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceSprayQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class SprayQualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SprayQualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SprayQualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class MetaClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIconKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIconAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIconSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cIconAssignment_3_1.eContents().get(0);
		private final Assignment cStyleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStyleSprayStyleRefParserRuleCall_4_0 = (RuleCall)cStyleAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRepresentedByAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepresentedByShapeInSprayParserRuleCall_6_0 = (RuleCall)cRepresentedByAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReferencesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Assignment cReferencesAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final RuleCall cReferencesMetaReference2ParserRuleCall_7_2_0_0 = (RuleCall)cReferencesAssignment_7_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cBehaviorKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Alternatives cAlternatives_8_2 = (Alternatives)cGroup_8.eContents().get(2);
		private final Group cGroup_8_2_0 = (Group)cAlternatives_8_2.eContents().get(0);
		private final Keyword cGroupKeyword_8_2_0_0 = (Keyword)cGroup_8_2_0.eContents().get(0);
		private final Assignment cBehaviorGroupsAssignment_8_2_0_1 = (Assignment)cGroup_8_2_0.eContents().get(1);
		private final CrossReference cBehaviorGroupsBehaviorGroupCrossReference_8_2_0_1_0 = (CrossReference)cBehaviorGroupsAssignment_8_2_0_1.eContents().get(0);
		private final RuleCall cBehaviorGroupsBehaviorGroupIDTerminalRuleCall_8_2_0_1_0_1 = (RuleCall)cBehaviorGroupsBehaviorGroupCrossReference_8_2_0_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_2_0_2 = (Keyword)cGroup_8_2_0.eContents().get(2);
		private final Group cGroup_8_2_1 = (Group)cAlternatives_8_2.eContents().get(1);
		private final Assignment cBehaviorsAssignment_8_2_1_0 = (Assignment)cGroup_8_2_1.eContents().get(0);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_8_2_1_0_0 = (RuleCall)cBehaviorsAssignment_8_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2_1_1 = (Keyword)cGroup_8_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MetaClass:
		//	"class" type=[ecore::EClass|QualifiedName] ("alias" alias=ID)? ("icon" icon=STRING)? style=SprayStyleRef? "{"
		//	representedBy=ShapeInSpray ("references" "{" (references+=MetaReference2 ";"?)* "}")? ("behavior" "{" ("group"
		//	behaviorGroups+=[BehaviorGroup] ";"? | behaviors+=Behavior ";"?)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"class" type=[ecore::EClass|QualifiedName] ("alias" alias=ID)? ("icon" icon=STRING)? style=SprayStyleRef? "{"
		//representedBy=ShapeInSpray ("references" "{" (references+=MetaReference2 ";"?)* "}")? ("behavior" "{" ("group"
		//behaviorGroups+=[BehaviorGroup] ";"? | behaviors+=Behavior ";"?)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_1_0_1() { return cTypeEClassQualifiedNameParserRuleCall_1_0_1; }

		//("alias" alias=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"alias"
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }

		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }

		//("icon" icon=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"icon"
		public Keyword getIconKeyword_3_0() { return cIconKeyword_3_0; }

		//icon=STRING
		public Assignment getIconAssignment_3_1() { return cIconAssignment_3_1; }

		//STRING
		public RuleCall getIconSTRINGTerminalRuleCall_3_1_0() { return cIconSTRINGTerminalRuleCall_3_1_0; }

		//style=SprayStyleRef?
		public Assignment getStyleAssignment_4() { return cStyleAssignment_4; }

		//SprayStyleRef
		public RuleCall getStyleSprayStyleRefParserRuleCall_4_0() { return cStyleSprayStyleRefParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//representedBy=ShapeInSpray
		public Assignment getRepresentedByAssignment_6() { return cRepresentedByAssignment_6; }

		//ShapeInSpray
		public RuleCall getRepresentedByShapeInSprayParserRuleCall_6_0() { return cRepresentedByShapeInSprayParserRuleCall_6_0; }

		//("references" "{" (references+=MetaReference2 ";"?)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"references"
		public Keyword getReferencesKeyword_7_0() { return cReferencesKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//(references+=MetaReference2 ";"?)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//references+=MetaReference2
		public Assignment getReferencesAssignment_7_2_0() { return cReferencesAssignment_7_2_0; }

		//MetaReference2
		public RuleCall getReferencesMetaReference2ParserRuleCall_7_2_0_0() { return cReferencesMetaReference2ParserRuleCall_7_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_7_2_1() { return cSemicolonKeyword_7_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//("behavior" "{" ("group" behaviorGroups+=[BehaviorGroup] ";"? | behaviors+=Behavior ";"?)* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"behavior"
		public Keyword getBehaviorKeyword_8_0() { return cBehaviorKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//("group" behaviorGroups+=[BehaviorGroup] ";"? | behaviors+=Behavior ";"?)*
		public Alternatives getAlternatives_8_2() { return cAlternatives_8_2; }

		//"group" behaviorGroups+=[BehaviorGroup] ";"?
		public Group getGroup_8_2_0() { return cGroup_8_2_0; }

		//"group"
		public Keyword getGroupKeyword_8_2_0_0() { return cGroupKeyword_8_2_0_0; }

		//behaviorGroups+=[BehaviorGroup]
		public Assignment getBehaviorGroupsAssignment_8_2_0_1() { return cBehaviorGroupsAssignment_8_2_0_1; }

		//[BehaviorGroup]
		public CrossReference getBehaviorGroupsBehaviorGroupCrossReference_8_2_0_1_0() { return cBehaviorGroupsBehaviorGroupCrossReference_8_2_0_1_0; }

		//ID
		public RuleCall getBehaviorGroupsBehaviorGroupIDTerminalRuleCall_8_2_0_1_0_1() { return cBehaviorGroupsBehaviorGroupIDTerminalRuleCall_8_2_0_1_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_8_2_0_2() { return cSemicolonKeyword_8_2_0_2; }

		//behaviors+=Behavior ";"?
		public Group getGroup_8_2_1() { return cGroup_8_2_1; }

		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_8_2_1_0() { return cBehaviorsAssignment_8_2_1_0; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_8_2_1_0_0() { return cBehaviorsBehaviorParserRuleCall_8_2_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_8_2_1_1() { return cSemicolonKeyword_8_2_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class MetaReference2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaReference2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetEReferenceCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetEReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetEReferenceCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRepresentedByAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepresentedByConnectionInSprayParserRuleCall_2_0 = (RuleCall)cRepresentedByAssignment_2.eContents().get(0);
		
		//MetaReference2 returns MetaReference:
		//	target=[ecore::EReference] ":" representedBy=ConnectionInSpray;
		public ParserRule getRule() { return rule; }

		//target=[ecore::EReference] ":" representedBy=ConnectionInSpray
		public Group getGroup() { return cGroup; }

		//target=[ecore::EReference]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[ecore::EReference]
		public CrossReference getTargetEReferenceCrossReference_0_0() { return cTargetEReferenceCrossReference_0_0; }

		//ID
		public RuleCall getTargetEReferenceIDTerminalRuleCall_0_0_1() { return cTargetEReferenceIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//representedBy=ConnectionInSpray
		public Assignment getRepresentedByAssignment_2() { return cRepresentedByAssignment_2; }

		//ConnectionInSpray
		public RuleCall getRepresentedByConnectionInSprayParserRuleCall_2_0() { return cRepresentedByConnectionInSprayParserRuleCall_2_0; }
	}

	public class BehaviorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cBehaviorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_3_0_0 = (RuleCall)cBehaviorsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BehaviorGroup:
		//	"behavior" name=ID "{" (behaviors+=Behavior ";"?)+ "}";
		public ParserRule getRule() { return rule; }

		//"behavior" name=ID "{" (behaviors+=Behavior ";"?)+ "}"
		public Group getGroup() { return cGroup; }

		//"behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(behaviors+=Behavior ";"?)+
		public Group getGroup_3() { return cGroup_3; }

		//behaviors+=Behavior
		public Assignment getBehaviorsAssignment_3_0() { return cBehaviorsAssignment_3_0; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_3_0_0() { return cBehaviorsBehaviorParserRuleCall_3_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateBehaviorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomBehaviorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// | CompartmentBehavior;
		//Behavior:
		//	CreateBehavior | CustomBehavior;
		public ParserRule getRule() { return rule; }

		//CreateBehavior | CustomBehavior
		public Alternatives getAlternatives() { return cAlternatives; }

		//CreateBehavior
		public RuleCall getCreateBehaviorParserRuleCall_0() { return cCreateBehaviorParserRuleCall_0; }

		//CustomBehavior
		public RuleCall getCustomBehaviorParserRuleCall_1() { return cCustomBehaviorParserRuleCall_1; }
	}

	public class CreateBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIntoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContainmentReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContainmentReferenceEReferenceCrossReference_2_1_0 = (CrossReference)cContainmentReferenceAssignment_2_1.eContents().get(0);
		private final RuleCall cContainmentReferenceEReferenceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContainmentReferenceEReferenceCrossReference_2_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cLabelAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPaletteKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPaletteCompartmentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPaletteCompartmentSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPaletteCompartmentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAskForKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAskForAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cAskForEAttributeCrossReference_4_1_0 = (CrossReference)cAskForAssignment_4_1.eContents().get(0);
		private final RuleCall cAskForEAttributeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cAskForEAttributeCrossReference_4_1_0.eContents().get(1);
		
		//CreateBehavior:
		//	{CreateBehavior} "create" ("into" containmentReference=[ecore::EReference] label=STRING?)? ("palette"
		//	paletteCompartment=STRING)? ("askFor" askFor=[ecore::EAttribute])?;
		public ParserRule getRule() { return rule; }

		//{CreateBehavior} "create" ("into" containmentReference=[ecore::EReference] label=STRING?)? ("palette"
		//paletteCompartment=STRING)? ("askFor" askFor=[ecore::EAttribute])?
		public Group getGroup() { return cGroup; }

		//{CreateBehavior}
		public Action getCreateBehaviorAction_0() { return cCreateBehaviorAction_0; }

		//"create"
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }

		//("into" containmentReference=[ecore::EReference] label=STRING?)?
		public Group getGroup_2() { return cGroup_2; }

		//"into"
		public Keyword getIntoKeyword_2_0() { return cIntoKeyword_2_0; }

		//containmentReference=[ecore::EReference]
		public Assignment getContainmentReferenceAssignment_2_1() { return cContainmentReferenceAssignment_2_1; }

		//[ecore::EReference]
		public CrossReference getContainmentReferenceEReferenceCrossReference_2_1_0() { return cContainmentReferenceEReferenceCrossReference_2_1_0; }

		//ID
		public RuleCall getContainmentReferenceEReferenceIDTerminalRuleCall_2_1_0_1() { return cContainmentReferenceEReferenceIDTerminalRuleCall_2_1_0_1; }

		//label=STRING?
		public Assignment getLabelAssignment_2_2() { return cLabelAssignment_2_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_2_0() { return cLabelSTRINGTerminalRuleCall_2_2_0; }

		//("palette" paletteCompartment=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"palette"
		public Keyword getPaletteKeyword_3_0() { return cPaletteKeyword_3_0; }

		//paletteCompartment=STRING
		public Assignment getPaletteCompartmentAssignment_3_1() { return cPaletteCompartmentAssignment_3_1; }

		//STRING
		public RuleCall getPaletteCompartmentSTRINGTerminalRuleCall_3_1_0() { return cPaletteCompartmentSTRINGTerminalRuleCall_3_1_0; }

		//("askFor" askFor=[ecore::EAttribute])?
		public Group getGroup_4() { return cGroup_4; }

		//"askFor"
		public Keyword getAskForKeyword_4_0() { return cAskForKeyword_4_0; }

		//askFor=[ecore::EAttribute]
		public Assignment getAskForAssignment_4_1() { return cAskForAssignment_4_1; }

		//[ecore::EAttribute]
		public CrossReference getAskForEAttributeCrossReference_4_1_0() { return cAskForEAttributeCrossReference_4_1_0; }

		//ID
		public RuleCall getAskForEAttributeIDTerminalRuleCall_4_1_0_1() { return cAskForEAttributeIDTerminalRuleCall_4_1_0_1; }
	}

	public class CustomBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRealizedByAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRealizedByJvmTypeReferenceParserRuleCall_1_1_1_0 = (RuleCall)cRealizedByAssignment_1_1_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//CustomBehavior:
		//	"custom" (name=ID | "ref" realizedBy=JvmTypeReference) label=STRING;
		public ParserRule getRule() { return rule; }

		//"custom" (name=ID | "ref" realizedBy=JvmTypeReference) label=STRING
		public Group getGroup() { return cGroup; }

		//"custom"
		public Keyword getCustomKeyword_0() { return cCustomKeyword_0; }

		//name=ID | "ref" realizedBy=JvmTypeReference
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"ref" realizedBy=JvmTypeReference
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//realizedBy=JvmTypeReference
		public Assignment getRealizedByAssignment_1_1_1() { return cRealizedByAssignment_1_1_1; }

		//JvmTypeReference
		public RuleCall getRealizedByJvmTypeReferenceParserRuleCall_1_1_1_0() { return cRealizedByJvmTypeReferenceParserRuleCall_1_1_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
	}

	public class ShapeInSprayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeInSpray");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectionInSprayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShapeFromDslParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ShapeInSpray:
		//	ConnectionInSpray | ShapeFromDsl;
		public ParserRule getRule() { return rule; }

		//ConnectionInSpray | ShapeFromDsl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConnectionInSpray
		public RuleCall getConnectionInSprayParserRuleCall_0() { return cConnectionInSprayParserRuleCall_0; }

		//ShapeFromDsl
		public RuleCall getShapeFromDslParserRuleCall_1() { return cShapeFromDslParserRuleCall_1; }
	}

	public class ShapeFromDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeFromDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeFromDslAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cShapeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cShapeShapeReferenceParserRuleCall_2_0 = (RuleCall)cShapeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesShapePropertyAssignmentParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Assignment cReferencesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cReferencesShapeCompartmentAssignmentParserRuleCall_3_2_0 = (RuleCall)cReferencesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ShapeFromDsl:
		//	{ShapeFromDsl} "shape" shape=ShapeReference ("{" properties+=ShapePropertyAssignment*
		//	references+=ShapeCompartmentAssignment* "}")?;
		public ParserRule getRule() { return rule; }

		//{ShapeFromDsl} "shape" shape=ShapeReference ("{" properties+=ShapePropertyAssignment*
		//references+=ShapeCompartmentAssignment* "}")?
		public Group getGroup() { return cGroup; }

		//{ShapeFromDsl}
		public Action getShapeFromDslAction_0() { return cShapeFromDslAction_0; }

		//"shape"
		public Keyword getShapeKeyword_1() { return cShapeKeyword_1; }

		//shape=ShapeReference
		public Assignment getShapeAssignment_2() { return cShapeAssignment_2; }

		//ShapeReference
		public RuleCall getShapeShapeReferenceParserRuleCall_2_0() { return cShapeShapeReferenceParserRuleCall_2_0; }

		//("{" properties+=ShapePropertyAssignment* references+=ShapeCompartmentAssignment* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=ShapePropertyAssignment*
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//ShapePropertyAssignment
		public RuleCall getPropertiesShapePropertyAssignmentParserRuleCall_3_1_0() { return cPropertiesShapePropertyAssignmentParserRuleCall_3_1_0; }

		//references+=ShapeCompartmentAssignment*
		public Assignment getReferencesAssignment_3_2() { return cReferencesAssignment_3_2; }

		//ShapeCompartmentAssignment
		public RuleCall getReferencesShapeCompartmentAssignmentParserRuleCall_3_2_0() { return cReferencesShapeCompartmentAssignmentParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class ShapeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cJAVAKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cJvmShapeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cJvmShapeJvmTypeReferenceParserRuleCall_0_1_0 = (RuleCall)cJvmShapeAssignment_0_1.eContents().get(0);
		private final Assignment cDslShapeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDslShapeShapeDefinitionCrossReference_1_0 = (CrossReference)cDslShapeAssignment_1.eContents().get(0);
		private final RuleCall cDslShapeShapeDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cDslShapeShapeDefinitionCrossReference_1_0.eContents().get(1);
		
		//ShapeReference:
		//	"JAVA" jvmShape=JvmTypeReference | dslShape=[shapes::ShapeDefinition];
		public ParserRule getRule() { return rule; }

		//"JAVA" jvmShape=JvmTypeReference | dslShape=[shapes::ShapeDefinition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"JAVA" jvmShape=JvmTypeReference
		public Group getGroup_0() { return cGroup_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_0_0() { return cJAVAKeyword_0_0; }

		//jvmShape=JvmTypeReference
		public Assignment getJvmShapeAssignment_0_1() { return cJvmShapeAssignment_0_1; }

		//JvmTypeReference
		public RuleCall getJvmShapeJvmTypeReferenceParserRuleCall_0_1_0() { return cJvmShapeJvmTypeReferenceParserRuleCall_0_1_0; }

		//dslShape=[shapes::ShapeDefinition]
		public Assignment getDslShapeAssignment_1() { return cDslShapeAssignment_1; }

		//[shapes::ShapeDefinition]
		public CrossReference getDslShapeShapeDefinitionCrossReference_1_0() { return cDslShapeShapeDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getDslShapeShapeDefinitionIDTerminalRuleCall_1_0_1() { return cDslShapeShapeDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class ConnectionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cJAVAKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cJvmConnectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cJvmConnectionJvmTypeReferenceParserRuleCall_0_1_0 = (RuleCall)cJvmConnectionAssignment_0_1.eContents().get(0);
		private final Assignment cDslConnectionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDslConnectionConnectionDefinitionCrossReference_1_0 = (CrossReference)cDslConnectionAssignment_1.eContents().get(0);
		private final RuleCall cDslConnectionConnectionDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cDslConnectionConnectionDefinitionCrossReference_1_0.eContents().get(1);
		
		//ConnectionReference:
		//	"JAVA" jvmConnection=JvmTypeReference | dslConnection=[shapes::ConnectionDefinition];
		public ParserRule getRule() { return rule; }

		//"JAVA" jvmConnection=JvmTypeReference | dslConnection=[shapes::ConnectionDefinition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"JAVA" jvmConnection=JvmTypeReference
		public Group getGroup_0() { return cGroup_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_0_0() { return cJAVAKeyword_0_0; }

		//jvmConnection=JvmTypeReference
		public Assignment getJvmConnectionAssignment_0_1() { return cJvmConnectionAssignment_0_1; }

		//JvmTypeReference
		public RuleCall getJvmConnectionJvmTypeReferenceParserRuleCall_0_1_0() { return cJvmConnectionJvmTypeReferenceParserRuleCall_0_1_0; }

		//dslConnection=[shapes::ConnectionDefinition]
		public Assignment getDslConnectionAssignment_1() { return cDslConnectionAssignment_1; }

		//[shapes::ConnectionDefinition]
		public CrossReference getDslConnectionConnectionDefinitionCrossReference_1_0() { return cDslConnectionConnectionDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getDslConnectionConnectionDefinitionIDTerminalRuleCall_1_0_1() { return cDslConnectionConnectionDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class SprayStyleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SprayStyleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cJAVAKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cJavaStyleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cJavaStyleAssignment_1_0_1.eContents().get(0);
		private final Assignment cDslStyleAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cDslStyleStyleCrossReference_1_1_0 = (CrossReference)cDslStyleAssignment_1_1.eContents().get(0);
		private final RuleCall cDslStyleStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cDslStyleStyleCrossReference_1_1_0.eContents().get(1);
		
		//SprayStyleRef:
		//	"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]);
		public ParserRule getRule() { return rule; }

		//"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style])
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//"JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"JAVA" javaStyle=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_1_0_0() { return cJAVAKeyword_1_0_0; }

		//javaStyle=JvmTypeReference
		public Assignment getJavaStyleAssignment_1_0_1() { return cJavaStyleAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0() { return cJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//dslStyle=[styles::Style]
		public Assignment getDslStyleAssignment_1_1() { return cDslStyleAssignment_1_1; }

		//[styles::Style]
		public CrossReference getDslStyleStyleCrossReference_1_1_0() { return cDslStyleStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getDslStyleStyleIDTerminalRuleCall_1_1_0_1() { return cDslStyleStyleIDTerminalRuleCall_1_1_0_1; }
	}

	public class ShapePropertyAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapePropertyAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cAttributeEAttributeCrossReference_0_0_0 = (CrossReference)cAttributeAssignment_0_0.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0_0_0.eContents().get(1);
		private final Keyword cIntoKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cKeyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cKeyShapeDslKeyParserRuleCall_0_2_0 = (RuleCall)cKeyAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cValueAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cValueXExpressionParserRuleCall_0_3_1_0 = (RuleCall)cValueAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cConstantKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueXExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cIntoKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cKeyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cKeyShapeDslKeyParserRuleCall_1_3_0 = (RuleCall)cKeyAssignment_1_3.eContents().get(0);
		
		//ShapePropertyAssignment:
		//	attribute=[ecore::EAttribute] "into" key=ShapeDslKey ("(" value=XExpression ")")? | "constant" value=XExpression
		//	"into" key=ShapeDslKey;
		public ParserRule getRule() { return rule; }

		//attribute=[ecore::EAttribute] "into" key=ShapeDslKey ("(" value=XExpression ")")? | "constant" value=XExpression "into"
		//key=ShapeDslKey
		public Alternatives getAlternatives() { return cAlternatives; }

		//attribute=[ecore::EAttribute] "into" key=ShapeDslKey ("(" value=XExpression ")")?
		public Group getGroup_0() { return cGroup_0; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_0_0() { return cAttributeAssignment_0_0; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0_0_0() { return cAttributeEAttributeCrossReference_0_0_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_0_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_0_0_1; }

		//"into"
		public Keyword getIntoKeyword_0_1() { return cIntoKeyword_0_1; }

		//key=ShapeDslKey
		public Assignment getKeyAssignment_0_2() { return cKeyAssignment_0_2; }

		//ShapeDslKey
		public RuleCall getKeyShapeDslKeyParserRuleCall_0_2_0() { return cKeyShapeDslKeyParserRuleCall_0_2_0; }

		//("(" value=XExpression ")")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3_0() { return cLeftParenthesisKeyword_0_3_0; }

		//value=XExpression
		public Assignment getValueAssignment_0_3_1() { return cValueAssignment_0_3_1; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_0_3_1_0() { return cValueXExpressionParserRuleCall_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3_2() { return cRightParenthesisKeyword_0_3_2; }

		//"constant" value=XExpression "into" key=ShapeDslKey
		public Group getGroup_1() { return cGroup_1; }

		//"constant"
		public Keyword getConstantKeyword_1_0() { return cConstantKeyword_1_0; }

		//value=XExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_1_1_0() { return cValueXExpressionParserRuleCall_1_1_0; }

		//"into"
		public Keyword getIntoKeyword_1_2() { return cIntoKeyword_1_2; }

		//key=ShapeDslKey
		public Assignment getKeyAssignment_1_3() { return cKeyAssignment_1_3; }

		//ShapeDslKey
		public RuleCall getKeyShapeDslKeyParserRuleCall_1_3_0() { return cKeyShapeDslKeyParserRuleCall_1_3_0; }
	}

	public class ShapeDslKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeDslKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cJAVAKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cJvmKeyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cJvmKeyJvmEnumerationLiteralCrossReference_0_1_0 = (CrossReference)cJvmKeyAssignment_0_1.eContents().get(0);
		private final RuleCall cJvmKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cJvmKeyJvmEnumerationLiteralCrossReference_0_1_0.eContents().get(1);
		private final Assignment cDslKeyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDslKeyIDTerminalRuleCall_1_0 = (RuleCall)cDslKeyAssignment_1.eContents().get(0);
		
		//ShapeDslKey:
		//	"JAVA" jvmKey=[types::JvmEnumerationLiteral|QualifiedName] | dslKey=ID;
		public ParserRule getRule() { return rule; }

		//"JAVA" jvmKey=[types::JvmEnumerationLiteral|QualifiedName] | dslKey=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"JAVA" jvmKey=[types::JvmEnumerationLiteral|QualifiedName]
		public Group getGroup_0() { return cGroup_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_0_0() { return cJAVAKeyword_0_0; }

		//jvmKey=[types::JvmEnumerationLiteral|QualifiedName]
		public Assignment getJvmKeyAssignment_0_1() { return cJvmKeyAssignment_0_1; }

		//[types::JvmEnumerationLiteral|QualifiedName]
		public CrossReference getJvmKeyJvmEnumerationLiteralCrossReference_0_1_0() { return cJvmKeyJvmEnumerationLiteralCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getJvmKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_0_1_0_1() { return cJvmKeyJvmEnumerationLiteralQualifiedNameParserRuleCall_0_1_0_1; }

		//dslKey=ID
		public Assignment getDslKeyAssignment_1() { return cDslKeyAssignment_1; }

		//ID
		public RuleCall getDslKeyIDTerminalRuleCall_1_0() { return cDslKeyIDTerminalRuleCall_1_0; }
	}

	public class ShapeCompartmentAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeCompartmentAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceEReferenceCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceEReferenceCrossReference_1_0.eContents().get(1);
		private final Keyword cIntoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShapeDslKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShapeDslKeyShapeDslKeyParserRuleCall_3_0 = (RuleCall)cShapeDslKeyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueXExpressionParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ShapeCompartmentAssignment:
		//	"reference" reference=[ecore::EReference] "into" shapeDslKey=ShapeDslKey ("(" value=XExpression ")")?;
		public ParserRule getRule() { return rule; }

		//"reference" reference=[ecore::EReference] "into" shapeDslKey=ShapeDslKey ("(" value=XExpression ")")?
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//reference=[ecore::EReference]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_1_0() { return cReferenceEReferenceCrossReference_1_0; }

		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_1_0_1() { return cReferenceEReferenceIDTerminalRuleCall_1_0_1; }

		//"into"
		public Keyword getIntoKeyword_2() { return cIntoKeyword_2; }

		//shapeDslKey=ShapeDslKey
		public Assignment getShapeDslKeyAssignment_3() { return cShapeDslKeyAssignment_3; }

		//ShapeDslKey
		public RuleCall getShapeDslKeyShapeDslKeyParserRuleCall_3_0() { return cShapeDslKeyShapeDslKeyParserRuleCall_3_0; }

		//("(" value=XExpression ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//value=XExpression
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_4_1_0() { return cValueXExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class ConnectionInSprayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionInSpray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectionInSprayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConnectionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConnectionConnectionReferenceParserRuleCall_2_0_0 = (RuleCall)cConnectionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPropertiesShapePropertyAssignmentParserRuleCall_2_1_1_0 = (RuleCall)cPropertiesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cFromKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFromAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFromEReferenceCrossReference_4_2_0 = (CrossReference)cFromAssignment_4_2.eContents().get(0);
		private final RuleCall cFromEReferenceIDTerminalRuleCall_4_2_0_1 = (RuleCall)cFromEReferenceCrossReference_4_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cToKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cToAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final CrossReference cToEReferenceCrossReference_4_5_0 = (CrossReference)cToAssignment_4_5.eContents().get(0);
		private final RuleCall cToEReferenceIDTerminalRuleCall_4_5_0_1 = (RuleCall)cToEReferenceCrossReference_4_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		
		//ConnectionInSpray:
		//	{ConnectionInSpray} "connection" (connection=ConnectionReference ("{" properties+=ShapePropertyAssignment+ "}")?)?
		//	("alias" alias=ID)? ("{" "from" from=[ecore::EReference] ";"? "to" to=[ecore::EReference] ";"? "}")?;
		public ParserRule getRule() { return rule; }

		//{ConnectionInSpray} "connection" (connection=ConnectionReference ("{" properties+=ShapePropertyAssignment+ "}")?)?
		//("alias" alias=ID)? ("{" "from" from=[ecore::EReference] ";"? "to" to=[ecore::EReference] ";"? "}")?
		public Group getGroup() { return cGroup; }

		//{ConnectionInSpray}
		public Action getConnectionInSprayAction_0() { return cConnectionInSprayAction_0; }

		//"connection"
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }

		//(connection=ConnectionReference ("{" properties+=ShapePropertyAssignment+ "}")?)?
		public Group getGroup_2() { return cGroup_2; }

		//connection=ConnectionReference
		public Assignment getConnectionAssignment_2_0() { return cConnectionAssignment_2_0; }

		//ConnectionReference
		public RuleCall getConnectionConnectionReferenceParserRuleCall_2_0_0() { return cConnectionConnectionReferenceParserRuleCall_2_0_0; }

		//("{" properties+=ShapePropertyAssignment+ "}")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//properties+=ShapePropertyAssignment+
		public Assignment getPropertiesAssignment_2_1_1() { return cPropertiesAssignment_2_1_1; }

		//ShapePropertyAssignment
		public RuleCall getPropertiesShapePropertyAssignmentParserRuleCall_2_1_1_0() { return cPropertiesShapePropertyAssignmentParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }

		//("alias" alias=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"alias"
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }

		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }

		//("{" "from" from=[ecore::EReference] ";"? "to" to=[ecore::EReference] ";"? "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//"from"
		public Keyword getFromKeyword_4_1() { return cFromKeyword_4_1; }

		//from=[ecore::EReference]
		public Assignment getFromAssignment_4_2() { return cFromAssignment_4_2; }

		//[ecore::EReference]
		public CrossReference getFromEReferenceCrossReference_4_2_0() { return cFromEReferenceCrossReference_4_2_0; }

		//ID
		public RuleCall getFromEReferenceIDTerminalRuleCall_4_2_0_1() { return cFromEReferenceIDTerminalRuleCall_4_2_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }

		//"to"
		public Keyword getToKeyword_4_4() { return cToKeyword_4_4; }

		//to=[ecore::EReference]
		public Assignment getToAssignment_4_5() { return cToAssignment_4_5; }

		//[ecore::EReference]
		public CrossReference getToEReferenceCrossReference_4_5_0() { return cToEReferenceCrossReference_4_5_0; }

		//ID
		public RuleCall getToEReferenceIDTerminalRuleCall_4_5_0_1() { return cToEReferenceIDTerminalRuleCall_4_5_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_4_6() { return cSemicolonKeyword_4_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_7() { return cRightCurlyBracketKeyword_4_7; }
	}
	
	
	private DiagramElements pDiagram;
	private ImportElements pImport;
	private SprayQualifiedNameWithWildCardElements pSprayQualifiedNameWithWildCard;
	private MetaClassElements pMetaClass;
	private MetaReference2Elements pMetaReference2;
	private BehaviorGroupElements pBehaviorGroup;
	private BehaviorElements pBehavior;
	private CreateBehaviorElements pCreateBehavior;
	private CustomBehaviorElements pCustomBehavior;
	private ShapeInSprayElements pShapeInSpray;
	private ShapeFromDslElements pShapeFromDsl;
	private ShapeReferenceElements pShapeReference;
	private ConnectionReferenceElements pConnectionReference;
	private SprayStyleRefElements pSprayStyleRef;
	private ShapePropertyAssignmentElements pShapePropertyAssignment;
	private ShapeDslKeyElements pShapeDslKey;
	private ShapeCompartmentAssignmentElements pShapeCompartmentAssignment;
	private ConnectionInSprayElements pConnectionInSpray;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public SprayGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.spray.xtext.Spray".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Diagram:
	//	imports+=Import* "diagram" name=ID "for" modelType=[ecore::EClass|QualifiedName] style=SprayStyleRef?
	//	behaviourGroups+=BehaviorGroup* metaClasses+=MetaClass*;
	public DiagramElements getDiagramAccess() {
		return (pDiagram != null) ? pDiagram : (pDiagram = new DiagramElements());
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=SprayQualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//SprayQualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public SprayQualifiedNameWithWildCardElements getSprayQualifiedNameWithWildCardAccess() {
		return (pSprayQualifiedNameWithWildCard != null) ? pSprayQualifiedNameWithWildCard : (pSprayQualifiedNameWithWildCard = new SprayQualifiedNameWithWildCardElements());
	}
	
	public ParserRule getSprayQualifiedNameWithWildCardRule() {
		return getSprayQualifiedNameWithWildCardAccess().getRule();
	}

	//MetaClass:
	//	"class" type=[ecore::EClass|QualifiedName] ("alias" alias=ID)? ("icon" icon=STRING)? style=SprayStyleRef? "{"
	//	representedBy=ShapeInSpray ("references" "{" (references+=MetaReference2 ";"?)* "}")? ("behavior" "{" ("group"
	//	behaviorGroups+=[BehaviorGroup] ";"? | behaviors+=Behavior ";"?)* "}")? "}";
	public MetaClassElements getMetaClassAccess() {
		return (pMetaClass != null) ? pMetaClass : (pMetaClass = new MetaClassElements());
	}
	
	public ParserRule getMetaClassRule() {
		return getMetaClassAccess().getRule();
	}

	//MetaReference2 returns MetaReference:
	//	target=[ecore::EReference] ":" representedBy=ConnectionInSpray;
	public MetaReference2Elements getMetaReference2Access() {
		return (pMetaReference2 != null) ? pMetaReference2 : (pMetaReference2 = new MetaReference2Elements());
	}
	
	public ParserRule getMetaReference2Rule() {
		return getMetaReference2Access().getRule();
	}

	//BehaviorGroup:
	//	"behavior" name=ID "{" (behaviors+=Behavior ";"?)+ "}";
	public BehaviorGroupElements getBehaviorGroupAccess() {
		return (pBehaviorGroup != null) ? pBehaviorGroup : (pBehaviorGroup = new BehaviorGroupElements());
	}
	
	public ParserRule getBehaviorGroupRule() {
		return getBehaviorGroupAccess().getRule();
	}

	//// | CompartmentBehavior;
	//Behavior:
	//	CreateBehavior | CustomBehavior;
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//CreateBehavior:
	//	{CreateBehavior} "create" ("into" containmentReference=[ecore::EReference] label=STRING?)? ("palette"
	//	paletteCompartment=STRING)? ("askFor" askFor=[ecore::EAttribute])?;
	public CreateBehaviorElements getCreateBehaviorAccess() {
		return (pCreateBehavior != null) ? pCreateBehavior : (pCreateBehavior = new CreateBehaviorElements());
	}
	
	public ParserRule getCreateBehaviorRule() {
		return getCreateBehaviorAccess().getRule();
	}

	//CustomBehavior:
	//	"custom" (name=ID | "ref" realizedBy=JvmTypeReference) label=STRING;
	public CustomBehaviorElements getCustomBehaviorAccess() {
		return (pCustomBehavior != null) ? pCustomBehavior : (pCustomBehavior = new CustomBehaviorElements());
	}
	
	public ParserRule getCustomBehaviorRule() {
		return getCustomBehaviorAccess().getRule();
	}

	//ShapeInSpray:
	//	ConnectionInSpray | ShapeFromDsl;
	public ShapeInSprayElements getShapeInSprayAccess() {
		return (pShapeInSpray != null) ? pShapeInSpray : (pShapeInSpray = new ShapeInSprayElements());
	}
	
	public ParserRule getShapeInSprayRule() {
		return getShapeInSprayAccess().getRule();
	}

	//ShapeFromDsl:
	//	{ShapeFromDsl} "shape" shape=ShapeReference ("{" properties+=ShapePropertyAssignment*
	//	references+=ShapeCompartmentAssignment* "}")?;
	public ShapeFromDslElements getShapeFromDslAccess() {
		return (pShapeFromDsl != null) ? pShapeFromDsl : (pShapeFromDsl = new ShapeFromDslElements());
	}
	
	public ParserRule getShapeFromDslRule() {
		return getShapeFromDslAccess().getRule();
	}

	//ShapeReference:
	//	"JAVA" jvmShape=JvmTypeReference | dslShape=[shapes::ShapeDefinition];
	public ShapeReferenceElements getShapeReferenceAccess() {
		return (pShapeReference != null) ? pShapeReference : (pShapeReference = new ShapeReferenceElements());
	}
	
	public ParserRule getShapeReferenceRule() {
		return getShapeReferenceAccess().getRule();
	}

	//ConnectionReference:
	//	"JAVA" jvmConnection=JvmTypeReference | dslConnection=[shapes::ConnectionDefinition];
	public ConnectionReferenceElements getConnectionReferenceAccess() {
		return (pConnectionReference != null) ? pConnectionReference : (pConnectionReference = new ConnectionReferenceElements());
	}
	
	public ParserRule getConnectionReferenceRule() {
		return getConnectionReferenceAccess().getRule();
	}

	//SprayStyleRef:
	//	"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]);
	public SprayStyleRefElements getSprayStyleRefAccess() {
		return (pSprayStyleRef != null) ? pSprayStyleRef : (pSprayStyleRef = new SprayStyleRefElements());
	}
	
	public ParserRule getSprayStyleRefRule() {
		return getSprayStyleRefAccess().getRule();
	}

	//ShapePropertyAssignment:
	//	attribute=[ecore::EAttribute] "into" key=ShapeDslKey ("(" value=XExpression ")")? | "constant" value=XExpression
	//	"into" key=ShapeDslKey;
	public ShapePropertyAssignmentElements getShapePropertyAssignmentAccess() {
		return (pShapePropertyAssignment != null) ? pShapePropertyAssignment : (pShapePropertyAssignment = new ShapePropertyAssignmentElements());
	}
	
	public ParserRule getShapePropertyAssignmentRule() {
		return getShapePropertyAssignmentAccess().getRule();
	}

	//ShapeDslKey:
	//	"JAVA" jvmKey=[types::JvmEnumerationLiteral|QualifiedName] | dslKey=ID;
	public ShapeDslKeyElements getShapeDslKeyAccess() {
		return (pShapeDslKey != null) ? pShapeDslKey : (pShapeDslKey = new ShapeDslKeyElements());
	}
	
	public ParserRule getShapeDslKeyRule() {
		return getShapeDslKeyAccess().getRule();
	}

	//ShapeCompartmentAssignment:
	//	"reference" reference=[ecore::EReference] "into" shapeDslKey=ShapeDslKey ("(" value=XExpression ")")?;
	public ShapeCompartmentAssignmentElements getShapeCompartmentAssignmentAccess() {
		return (pShapeCompartmentAssignment != null) ? pShapeCompartmentAssignment : (pShapeCompartmentAssignment = new ShapeCompartmentAssignmentElements());
	}
	
	public ParserRule getShapeCompartmentAssignmentRule() {
		return getShapeCompartmentAssignmentAccess().getRule();
	}

	//ConnectionInSpray:
	//	{ConnectionInSpray} "connection" (connection=ConnectionReference ("{" properties+=ShapePropertyAssignment+ "}")?)?
	//	("alias" alias=ID)? ("{" "from" from=[ecore::EReference] ";"? "to" to=[ecore::EReference] ";"? "}")?;
	public ConnectionInSprayElements getConnectionInSprayAccess() {
		return (pConnectionInSpray != null) ? pConnectionInSpray : (pConnectionInSpray = new ConnectionInSprayElements());
	}
	
	public ParserRule getConnectionInSprayRule() {
		return getConnectionInSprayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX returns ecore::EString:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL returns ecore::EString:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID returns ecore::EString:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT returns ecore::EString:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT returns ecore::EString:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER returns ecore::EString:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
