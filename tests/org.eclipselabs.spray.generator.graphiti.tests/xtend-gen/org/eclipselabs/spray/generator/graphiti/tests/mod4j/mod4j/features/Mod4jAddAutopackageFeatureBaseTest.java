/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jAddAutopackageFeatureBaseTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jAddAutopackageFeatureBase.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray AddShapeFromDslFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.ContainerShape;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Shape;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractAddFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.ISprayShape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.shapes.null;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import samplepackage.Package;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("public abstract class Mod4jAddAutopackageFeatureBase extends AbstractAddFeature {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected final static String typeOrAliasName = \"Autopackage\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Diagram targetDiagram = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jAddAutopackageFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canAdd(final IAddContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final EObject newObject = (EObject) context.getNewObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (newObject instanceof samplepackage.Package) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// check if user wants to add to a diagram");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (context.getTargetContainer() instanceof Diagram) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (context.getTargetContainer() instanceof ContainerShape) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// OLD STUFF");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// NEW stuff");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public PictogramElement add(final IAddContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final samplepackage.Package addedModelElement = (samplepackage.Package) context.getNewObject();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// NEW stuff");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final ContainerShape targetContainer = context.getTargetContainer();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final ISprayStyle style = new DefaultSprayStyle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final ISprayShape shape = new (getFeatureProvider());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final ContainerShape conShape = shape.getShape(targetContainer, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocation(conShape.getGraphicsAlgorithm(), context.getX(), context.getY());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("link(conShape, addedModelElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("linkShapes(conShape, addedModelElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(conShape , PROPERTY_ALIAS, \"Autopackage\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("updatePictogramElement(conShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layout(conShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return conShape;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void linkShapes(ContainerShape conShape, samplepackage.Package addedModelElement) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("link(conShape, addedModelElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Shape childShape : conShape.getChildren()) {");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("if( childShape instanceof ContainerShape ) {");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("linkShapes((ContainerShape)childShape, addedModelElement);");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("link(childShape, addedModelElement);");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
