/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.xtext.ui.wizard.codegen;

import javax.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipselabs.spray.xtext.ui.wizard.SprayProjectInfo;
import org.eclipselabs.spray.xtext.ui.wizard.codegen.SprayModelGenerator;

@SuppressWarnings("all")
public class NewProjectGenerator {
  @Inject
  private SprayModelGenerator generateModel;
  
  public void doGenerate(final SprayProjectInfo projectInfo, final IFileSystemAccess fsa) {
    this.generateModel.doGenerate(projectInfo, fsa);
    this.generateBuildProperties(projectInfo, fsa);
    this.generateAntUpdatePluginXmlLaunch(projectInfo, fsa);
    this.generateAntUpdatePluginXml(projectInfo, fsa);
  }
  
  public void generateBuildProperties(final SprayProjectInfo pi, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("source.. = ");
    String _javaMainSrcDir = pi.getJavaMainSrcDir();
    _builder.append(_javaMainSrcDir, "");
    _builder.append("/,\\");
    _builder.newLineIfNotEmpty();
    _builder.append("           ");
    String _javaGenSrcDir = pi.getJavaGenSrcDir();
    _builder.append(_javaGenSrcDir, "           ");
    _builder.append("/,\\");
    _builder.newLineIfNotEmpty();
    _builder.append("           ");
    String _sprayModelDir = pi.getSprayModelDir();
    _builder.append(_sprayModelDir, "           ");
    _builder.append("/");
    _builder.newLineIfNotEmpty();
    _builder.append("bin.includes = META-INF/,\\");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("ant-update-plugin-xml.xml,\\");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("plugin.xml,\\");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("icons/,\\");
    _builder.newLine();
    _builder.append("               ");
    String _sprayModelDir_1 = pi.getSprayModelDir();
    _builder.append(_sprayModelDir_1, "               ");
    _builder.append("/");
    _builder.newLineIfNotEmpty();
    final String content = _builder.toString();
    String _projectName = pi.getProjectName();
    fsa.generateFile("build.properties", _projectName, content);
  }
  
  public void generateAntUpdatePluginXml(final SprayProjectInfo pi, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!-- see http://5ise.quanxinquanyi.de/2013/01/11/avoiding-manual-merge-when-generating-plugin-xml-with-xtextxtend/ -->");
    _builder.newLine();
    _builder.append("<project default=\"updateAll\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"findFile\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<fileset id=\"matches\" dir=\"${basedir}\">");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<filename name=\"plugin.xml\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</fileset>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<condition property=\"foundFile\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<resourcecount when=\"greater\" count=\"0\" refid=\"matches\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</condition>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"ensureFileExists\" depends=\"findFile\" unless=\"foundFile\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<copy file=\"src-gen/plugin.xml\" todir=\"${basedir}\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<antcall target=\"findFile\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"updateAll\" depends=\"ensureFileExists\" if=\"foundFile\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall = this.generateAntCall("plugin_diagramtype.xml", "DIAGRAM TYPE");
    _builder.append(_generateAntCall, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_1 = this.generateAntCall("plugin_diagramtypeprovider.xml", "DIAGRAM TYPE PROVIDER");
    _builder.append(_generateAntCall_1, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_2 = this.generateAntCall("plugin_graphitieditor.xml", "GRAPHITI EDITOR EXTENSION");
    _builder.append(_generateAntCall_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_3 = this.generateAntCall("plugin_imageprovider.xml", "IMAGE PROVIDER");
    _builder.append(_generateAntCall_3, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_4 = this.generateAntCall("plugin_newdiagramwizard.xml", "NEW DIAGRAM WIZARD");
    _builder.append(_generateAntCall_4, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_5 = this.generateAntCall("plugin_propertysections.xml", "PROPERTY SECTIONS");
    _builder.append(_generateAntCall_5, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateAntCall_6 = this.generateAntCall("plugin_propertytabs.xml", "PROPERTY TAB");
    _builder.append(_generateAntCall_6, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"findInFile\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<fileset id=\"matches\" dir=\"${basedir}\">");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<filename name=\"plugin.xml\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<containsregexp ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("expression=\"${commentSegment}\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</fileset>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<condition property=\"foundInFile\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<resourcecount when=\"greater\" count=\"0\" refid=\"matches\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</condition>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"readSegmentFileContent\" depends=\"findInFile\" if=\"foundInFile\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<loadfile property=\"segmentFileContent\" srcfile=\"${basedir}/src-gen/${segmentFileName}\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"updateWithContent\" depends=\"readSegmentFileContent\" if=\"segmentFileContent\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<replaceregexp ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("file=\"plugin.xml\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("match=\"${commentMatchString}\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("replace=\"&lt;!-- ${commentSegment} AUTOGEN START -->${line.separator}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("${segmentFileContent}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("&lt;!-- ${commentSegment} AUTOGEN END -->\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("flags=\"gis\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("byline=\"false\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<echo message=\"Regenerating content of ${commentMatchString} in plugin.xml with content from ${segmentFileName}\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"updateWithEmptyContent\" depends=\"readSegmentFileContent\" unless=\"segmentFileContent\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<replaceregexp ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("file=\"plugin.xml\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("match=\"${commentMatchString}\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("replace=\"&lt;!-- ${commentSegment} AUTOGEN START -->${line.separator}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("&lt;!-- ${commentSegment} AUTOGEN END -->\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("flags=\"gis\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("byline=\"false\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</target>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<target name=\"update\" depends=\"updateWithEmptyContent, updateWithContent\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    final String content = _builder.toString();
    String _projectName = pi.getProjectName();
    fsa.generateFile("ant-update-plugin-xml.xml", _projectName, content);
  }
  
  private CharSequence generateAntCall(final String segmentFileName, final String commentSegment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<antcall target=\"update\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<param name=\"segmentFileName\" value=\"");
    _builder.append(segmentFileName, "\t");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<param name=\"commentSegment\" value=\"");
    _builder.append(commentSegment, "\t");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<param name=\"commentMatchString\" value=\"&lt;!-- ");
    _builder.append(commentSegment, "\t");
    _builder.append(" AUTOGEN START --&gt;(.+?)\\&lt;!-- ");
    _builder.append(commentSegment, "\t");
    _builder.append(" AUTOGEN END --&gt;\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("</antcall>");
    _builder.newLine();
    return _builder;
  }
  
  public void generateAntUpdatePluginXmlLaunch(final SprayProjectInfo pi, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
    _builder.newLine();
    _builder.append("<launchConfiguration type=\"org.eclipse.ant.AntBuilderLaunchConfigurationType\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<booleanAttribute key=\"org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND\" value=\"false\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"");
    String _projectName = pi.getProjectName();
    _builder.append(_projectName, "\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/");
    String _projectName_1 = pi.getProjectName();
    _builder.append(_projectName_1, "\t");
    _builder.append("/ant-update-plugin-xml.xml}\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"full,incremental,\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/");
    String _projectName_2 = pi.getProjectName();
    _builder.append(_projectName_2, "\t");
    _builder.append("}\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("</launchConfiguration>");
    _builder.newLine();
    final String content = _builder.toString();
    String _projectName_3 = pi.getProjectName();
    fsa.generateFile("/.externalToolBuilders/Update plugin.xml.launch", _projectName_3, content);
  }
}
