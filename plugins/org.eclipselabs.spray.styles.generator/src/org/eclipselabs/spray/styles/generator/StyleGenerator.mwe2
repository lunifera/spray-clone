module org.eclipselabs.spray.styles.generator.StyleGenerator

import org.eclipse.emf.mwe.utils.*

var srcGenDir = "src-gen"
var srcManDir = "src"
var clean = "true"
var modelPath
var validate = "true"

Workflow {
    bean = StandaloneSetup {
        uriMap = {
            from = "platform:/resource/org.eclipse.xtext.xbase/"
            to = "classpath:/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.xtext.common.types/"
            to = "classpath:/"
        }

        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGeneratedEPackage = "org.eclipselabs.spray.styles.StylesPackage"
    }
 
    component = org.eclipse.xtext.ecore.EcoreSupport{}

	component = org.eclipselabs.spray.xtext.util.ReaderExt {
		// lookup all resources on the classpath
		// useJavaClassPath = true

		validate = validate

		// or define search scope explicitly
		path = modelPath

		// this class will be generated by the xtext generator 
		register = org.eclipselabs.spray.styles.generator.StylesGeneratorStandaloneSetup {}
    	uriFilter = org.eclipse.xtext.mwe.NameBasedFilter {
    		regularExpression = ".*\\.style"
    	}
		loadResource = {
			slot = "model"
			uri = ".*\\.style" 
		}
	}

	component = org.eclipse.emf.mwe.core.container.IfComponent {
		cond = clean
		component = DirectoryCleaner {
			directory = srcGenDir
		}
	}

	component = org.eclipse.xtext.generator.GeneratorComponent {
		register = org.eclipselabs.spray.styles.generator.StylesGeneratorStandaloneSetup {}
		slot = 'model'
		outlet = {
			path = srcGenDir
		}
//		outlet = {
//		    outletName ="SRCMAN"
//			path = srcManDir
//		}
	}
}
