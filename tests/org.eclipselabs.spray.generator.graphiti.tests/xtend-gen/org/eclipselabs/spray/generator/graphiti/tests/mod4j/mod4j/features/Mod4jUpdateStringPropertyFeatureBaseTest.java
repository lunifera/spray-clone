/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jUpdateStringPropertyFeatureBaseTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jUpdateStringPropertyFeatureBase.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray UpdateShapeFromDslFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IReason;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IUpdateContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.impl.Reason;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.AbstractText;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.ContainerShape;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Shape;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractUpdateFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import samplepackage.StringProperty;");
    _builder.newLine();
    _builder.append("import com.google.common.base.Function;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.Activator;");
    _builder.newLine();
    _builder.append("import samplepackage.StringProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jUpdateStringPropertyFeatureBase extends AbstractUpdateFeature {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jUpdateStringPropertyFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService = Activator.get(IGaService.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canUpdate(final IUpdateContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true, if linked business object is a StringProperty");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final PictogramElement pictogramElement = context.getPictogramElement();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Object bo = getBusinessObjectForPictogramElement(pictogramElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return (bo instanceof StringProperty) && (!(pictogramElement instanceof Diagram));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public IReason updateNeeded(final IUpdateContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final PictogramElement pictogramElement = context.getPictogramElement();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Object bo = getBusinessObjectForPictogramElement(pictogramElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!(bo instanceof StringProperty)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Reason.createFalseReason();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (pictogramElement instanceof Shape) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Shape shape = (Shape) pictogramElement;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StringProperty eClass = (StringProperty) bo;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (checkUpdateNeededRecursively(shape, eClass)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return Reason.createTrueReason();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (shape instanceof ContainerShape) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (Shape childShape : ((ContainerShape) shape).getChildren()) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (checkUpdateNeededRecursively(childShape, eClass)) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("return Reason.createTrueReason();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Reason.createFalseReason();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected boolean checkUpdateNeededRecursively(Shape shape, final StringProperty eClass) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm graphicsAlgorithm = shape.getGraphicsAlgorithm();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (graphicsAlgorithm instanceof AbstractText) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AbstractText text = (AbstractText) graphicsAlgorithm;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String id = peService.getPropertyValue(graphicsAlgorithm, TEXT_ID);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (id != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (id.equals(\"textId2\")) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String eClassValue = new Function<StringProperty, String>() {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("public String apply(StringProperty modelElement) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// generation exception: java.lang.NullPointerException");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}.apply(eClass);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String gAlgorithmValue = text.getValue();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (eClassValue != null) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (!eClassValue.equals(gAlgorithmValue)) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (shape instanceof ContainerShape) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Shape child : ((ContainerShape) shape).getChildren()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (checkUpdateNeededRecursively(child, eClass)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean update(final IUpdateContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final PictogramElement pictogramElement = context.getPictogramElement();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final StringProperty eClass = (StringProperty) getBusinessObjectForPictogramElement(pictogramElement);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (pictogramElement instanceof Shape) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Shape shape = (Shape) pictogramElement;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("updateChildrenRecursively(shape, eClass);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Shape top = findTopShape(shape);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("SprayLayoutService.getLayoutManager(top).layout();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void updateChildrenRecursively(Shape shape, final StringProperty eClass) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm graphicsAlgorithm = shape.getGraphicsAlgorithm();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (graphicsAlgorithm instanceof AbstractText) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AbstractText text = (AbstractText) graphicsAlgorithm;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String id = peService.getPropertyValue(graphicsAlgorithm, TEXT_ID);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (id != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (id.equals(\"textId2\")) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("String value = new Function<StringProperty, String>() {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("public String apply(StringProperty modelElement) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// generation exception: java.lang.NullPointerException");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}.apply(eClass);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("text.setValue(value);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (shape instanceof ContainerShape) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Shape child : ((ContainerShape) shape).getChildren()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("updateChildrenRecursively(child, eClass);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
