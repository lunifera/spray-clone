/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.styles.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Provider;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipselabs.spray.styles.Gradient;
import org.eclipselabs.spray.styles.Style;
import org.eclipselabs.spray.styles.StyleContainer;
import org.eclipselabs.spray.styles.StyleContainerElement;
import org.eclipselabs.spray.styles.generator.StylesGenerator;
import org.eclipselabs.spray.styles.tests.util.StyleTestsInjectorProvider;
import org.eclipselabs.spray.xtext.generator.filesystem.JavaGenFile;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(StyleTestsInjectorProvider.class)
@SuppressWarnings("all")
public class StyleGeneratorTest {
  @Inject
  private Provider<JavaGenFile> genFileProvider;
  
  @Inject
  @Extension
  private ParseHelper<StyleContainer> parseHelper;
  
  @Inject
  @Extension
  private StylesGenerator styleGenerator;
  
  private CharSequence styleModelFull() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("style MyStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("description = \"My description\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("transparency     \t = 0.5");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("background-color \t = black");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("gradient-orientation = horizontal");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("highlighting (");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("selected         = RGB(0,100,0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("multiselected    = RGB(0,100,100)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("allowed          = RGB(0,100,200)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unallowed        = RGB(100,0,0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line-color       \t = gray");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line-width       \t = 3");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line-style       \t = dash-dot");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("font-name        \t = \"Arial\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-color       \t = blue");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-size        \t = 18");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-italic      \t = yes");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-bold        \t = yes");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateStyleModelFull() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _styleModelFull = this.styleModelFull();
      StyleContainer _parse = this.parseHelper.parse(_styleModelFull);
      EList<StyleContainerElement> _styleContainerElement = _parse.getStyleContainerElement();
      Iterable<Style> _filter = Iterables.<Style>filter(_styleContainerElement, Style.class);
      Style _head = IterableExtensions.<Style>head(_filter);
      this.styleGenerator.doGenerateStyle(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTstyles/MyStyleBase.java", _key);
      CharSequence _styleModelFullExpectedContent = this.styleModelFullExpectedContent();
      String _string = _styleModelFullExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence styleModelFullExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package styles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Style;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Color;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: My description");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyStyleBase extends org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The IGaService instance for the whole class.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates and defines a Style and returns it. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: My description");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The defined Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Style newStyle(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Style style = super.newStyle(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setId(\"MyStyle\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setDescription(\"My description\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineStyleTransparency(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineBackground(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineLineAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineFontAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return style;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style transparency.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the transparency will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineStyleTransparency(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setTransparency(0.5);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* If a gradient is been used, then a color schema will be set for the background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the background will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineBackground(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setRenderingStyle(style, getColorSchema());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style line attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the line attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineLineAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setLineVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setForeground(gaService.manageColor(diagram, IColorConstant.GRAY));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setLineWidth(3);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setLineStyle(LineStyle.DASHDOT);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style font attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the font attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineFontAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fontName = \"Arial\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int fontSize = 18;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontItalic = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontBold = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the font color for the style. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The font color will be returned separatly, because Graphiti allows just the foreground color.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The foreground color will be used for lines and fonts at the same time.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Color getFontColor(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return gaService.manageColor(diagram, IColorConstant.BLUE);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns Color Schema of the Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AdaptedGradientColoredAreas getColorSchema() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final AdaptedGradientColoredAreas agca =");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("StylesFactory.eINSTANCE.createAdaptedGradientColoredAreas();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.setDefinedStyleId(\"MyStyleBase_Color_Schema_ID\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.setGradientType(IGradientType.HORIZONTAL);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_DEFAULT, GradientUtilClass.getOneColorGradient(\"000000\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_PRIMARY_SELECTED, GradientUtilClass.getOneColorGradient(\"006400\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_SECONDARY_SELECTED, GradientUtilClass.getOneColorGradient(\"006464\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_ACTION_ALLOWED, GradientUtilClass.getOneColorGradient(\"0064C8\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_ACTION_FORBIDDEN, GradientUtilClass.getOneColorGradient(\"640000\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return agca;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence styleModelMin() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("style MyMinStyle {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateStyleModelMin() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _styleModelMin = this.styleModelMin();
      StyleContainer _parse = this.parseHelper.parse(_styleModelMin);
      EList<StyleContainerElement> _styleContainerElement = _parse.getStyleContainerElement();
      Iterable<Style> _filter = Iterables.<Style>filter(_styleContainerElement, Style.class);
      Style _head = IterableExtensions.<Style>head(_filter);
      this.styleGenerator.doGenerateStyle(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTstyles/MyMinStyleBase.java", _key);
      CharSequence _styleModelMinExpectedContent = this.styleModelMinExpectedContent();
      String _string = _styleModelMinExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence styleModelMinExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package styles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Style;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Color;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyMinStyleBase extends org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The IGaService instance for the whole class.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates and defines a Style and returns it. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The defined Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Style newStyle(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Style style = super.newStyle(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setId(\"MyMinStyle\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setDescription(\"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineStyleTransparency(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineBackground(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineLineAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineFontAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return style;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style transparency.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the transparency will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineStyleTransparency(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* If a gradient is been used, then a color schema will be set for the background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the background will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineBackground(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style line attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the line attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineLineAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style font attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the font attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineFontAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fontName = style.getFont().getName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int fontSize = style.getFont().getSize();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontItalic = style.getFont().isItalic();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontBold = style.getFont().isBold();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the font color for the style. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The font color will be returned separatly, because Graphiti allows just the foreground color.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The foreground color will be used for lines and fonts at the same time.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Color getFontColor(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.getFontColor(diagram);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns Color Schema of the Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AdaptedGradientColoredAreas getColorSchema() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence styleModelOther() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("style MyOtherStyle {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("background-color \t = blue");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line-width       \t = 1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line-color       \t = transparent");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("font-name        \t = \"Times New Roman\"");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("font-color       \t = blue");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("font-italic      \t = no");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("font-bold        \t = no");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateStyleModelOther() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _styleModelOther = this.styleModelOther();
      StyleContainer _parse = this.parseHelper.parse(_styleModelOther);
      EList<StyleContainerElement> _styleContainerElement = _parse.getStyleContainerElement();
      Iterable<Style> _filter = Iterables.<Style>filter(_styleContainerElement, Style.class);
      Style _head = IterableExtensions.<Style>head(_filter);
      this.styleGenerator.doGenerateStyle(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTstyles/MyOtherStyleBase.java", _key);
      CharSequence _styleModelOtherExpectedContent = this.styleModelOtherExpectedContent();
      String _string = _styleModelOtherExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence styleModelOtherExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package styles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Style;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Color;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyOtherStyleBase extends org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The IGaService instance for the whole class.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates and defines a Style and returns it. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The defined Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Style newStyle(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Style style = super.newStyle(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setId(\"MyOtherStyle\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setDescription(\"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineStyleTransparency(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineBackground(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineLineAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineFontAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return style;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style transparency.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the transparency will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineStyleTransparency(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* If a gradient is been used, then a color schema will be set for the background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the background will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineBackground(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFilled(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setBackground(gaService.manageColor(diagram, IColorConstant.BLUE));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style line attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the line attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineLineAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setLineVisible(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setForeground(null);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style font attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the font attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineFontAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fontName = \"Times New Roman\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int fontSize = style.getFont().getSize();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontItalic = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontBold = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the font color for the style. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The font color will be returned separatly, because Graphiti allows just the foreground color.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The foreground color will be used for lines and fonts at the same time.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Color getFontColor(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return gaService.manageColor(diagram, IColorConstant.BLUE);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns Color Schema of the Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AdaptedGradientColoredAreas getColorSchema() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence styleModelInheritence() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("style MyParentStyle {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("background-color \t = yellow");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-color       \t = blue");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("style MyChildStyle extends MyParentStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("font-color       \t = black");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateStyleModelInheritence() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _styleModelInheritence = this.styleModelInheritence();
      StyleContainer _parse = this.parseHelper.parse(_styleModelInheritence);
      EList<StyleContainerElement> _styleContainerElement = _parse.getStyleContainerElement();
      Iterable<Style> _filter = Iterables.<Style>filter(_styleContainerElement, Style.class);
      final Procedure1<Style> _function = new Procedure1<Style>() {
        public void apply(final Style style) {
          StyleGeneratorTest.this.styleGenerator.doGenerateStyle(java, style);
        }
      };
      IterableExtensions.<Style>forEach(_filter, _function);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 2, _size);
      final Function1<Map.Entry<String,CharSequence>,Boolean> _function_1 = new Function1<Map.Entry<String,CharSequence>,Boolean>() {
        public Boolean apply(final Map.Entry<String,CharSequence> e) {
          String _key = e.getKey();
          return Boolean.valueOf(_key.equals("DEFAULT_OUTPUTstyles/MyParentStyleBase.java"));
        }
      };
      final Map.Entry<String,CharSequence> parentEntry = IterableExtensions.<Map.Entry<String,CharSequence>>findFirst(entries, _function_1);
      Assert.assertNotNull(parentEntry);
      final Function1<Map.Entry<String,CharSequence>,Boolean> _function_2 = new Function1<Map.Entry<String,CharSequence>,Boolean>() {
        public Boolean apply(final Map.Entry<String,CharSequence> e) {
          String _key = e.getKey();
          return Boolean.valueOf(_key.equals("DEFAULT_OUTPUTstyles/MyChildStyleBase.java"));
        }
      };
      final Map.Entry<String,CharSequence> childEntry = IterableExtensions.<Map.Entry<String,CharSequence>>findFirst(entries, _function_2);
      Assert.assertNotNull(childEntry);
      CharSequence _styleModelInheritenceExpectedChildContent = this.styleModelInheritenceExpectedChildContent();
      String _string = _styleModelInheritenceExpectedChildContent.toString();
      CharSequence _value = childEntry.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated for child style", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence styleModelInheritenceExpectedChildContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package styles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Style;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Color;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.append("import styles.MyParentStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyChildStyleBase extends MyParentStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The IGaService instance for the whole class.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates and defines a Style and returns it. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The defined Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Style newStyle(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Style style = super.newStyle(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setId(\"MyChildStyle\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setDescription(\"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineStyleTransparency(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineBackground(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineLineAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineFontAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return style;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style transparency.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the transparency will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineStyleTransparency(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* If a gradient is been used, then a color schema will be set for the background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the background will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineBackground(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style line attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the line attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineLineAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style font attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the font attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineFontAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fontName = style.getFont().getName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int fontSize = style.getFont().getSize();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontItalic = style.getFont().isItalic();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontBold = style.getFont().isBold();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the font color for the style. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The font color will be returned separatly, because Graphiti allows just the foreground color.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The foreground color will be used for lines and fonts at the same time.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Color getFontColor(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return gaService.manageColor(diagram, IColorConstant.BLACK);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns Color Schema of the Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AdaptedGradientColoredAreas getColorSchema() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence gradientModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("gradient MyGradient {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("area (color = blue, offset = 0.0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("area (color = gray, offset = 1.0)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("style MyStyle {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("background-color = MyGradient");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateGradientModel() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _gradientModel = this.gradientModel();
      StyleContainer _parse = this.parseHelper.parse(_gradientModel);
      EList<StyleContainerElement> _styleContainerElement = _parse.getStyleContainerElement();
      Iterable<Style> _filter = Iterables.<Style>filter(_styleContainerElement, Style.class);
      Style _head = IterableExtensions.<Style>head(_filter);
      this.styleGenerator.doGenerateStyle(java, _head);
      CharSequence _gradientModel_1 = this.gradientModel();
      StyleContainer _parse_1 = this.parseHelper.parse(_gradientModel_1);
      EList<StyleContainerElement> _styleContainerElement_1 = _parse_1.getStyleContainerElement();
      Iterable<Gradient> _filter_1 = Iterables.<Gradient>filter(_styleContainerElement_1, Gradient.class);
      Gradient _head_1 = IterableExtensions.<Gradient>head(_filter_1);
      this.styleGenerator.doGenerateGradient(java, _head_1);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 2, _size);
      final Function1<Map.Entry<String,CharSequence>,Boolean> _function = new Function1<Map.Entry<String,CharSequence>,Boolean>() {
        public Boolean apply(final Map.Entry<String,CharSequence> e) {
          String _key = e.getKey();
          return Boolean.valueOf(_key.equals("DEFAULT_OUTPUTgradients/MyGradientBase.java"));
        }
      };
      final Map.Entry<String,CharSequence> gradientEntry = IterableExtensions.<Map.Entry<String,CharSequence>>findFirst(entries, _function);
      Assert.assertNotNull(gradientEntry);
      CharSequence _gradientModelExpectedGradientContent = this.gradientModelExpectedGradientContent();
      String _string = _gradientModelExpectedGradientContent.toString();
      CharSequence _value = gradientEntry.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated for child style", _string, _string_1);
      final Function1<Map.Entry<String,CharSequence>,Boolean> _function_1 = new Function1<Map.Entry<String,CharSequence>,Boolean>() {
        public Boolean apply(final Map.Entry<String,CharSequence> e) {
          String _key = e.getKey();
          return Boolean.valueOf(_key.equals("DEFAULT_OUTPUTstyles/MyStyleBase.java"));
        }
      };
      final Map.Entry<String,CharSequence> styleEntry = IterableExtensions.<Map.Entry<String,CharSequence>>findFirst(entries, _function_1);
      Assert.assertNotNull(styleEntry);
      CharSequence _gradientModelExpectedStyleContent = this.gradientModelExpectedStyleContent();
      String _string_2 = _gradientModelExpectedStyleContent.toString();
      CharSequence _value_1 = styleEntry.getValue();
      String _string_3 = _value_1.toString();
      Assert.assertEquals("Expected file content generated for child style", _string_2, _string_3);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence gradientModelExpectedGradientContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Gradient class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package gradients;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.GradientColoredArea;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.GradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LocationType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayGradient;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.PredefinedColoredAreas;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyGradientBase extends PredefinedColoredAreas implements ISprayGradient {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the gradient color area.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("public GradientColoredAreas getGradientColoredAreas( ) {");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("final GradientColoredAreas gradientColoredAreas = org.eclipse.graphiti.mm.algorithms.styles.StylesFactory.eINSTANCE.createGradientColoredAreas();");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("final EList<org.eclipse.graphiti.mm.algorithms.styles.GradientColoredArea> gcas = gradientColoredAreas.getGradientColor();");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("addGradientColoredArea(gcas,\"0000FF\",0,org.eclipse.graphiti.mm.algorithms.styles.LocationType.LOCATION_TYPE_RELATIVE, \"808080\",100,org.eclipse.graphiti.mm.algorithms.styles.LocationType.LOCATION_TYPE_RELATIVE);");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("return gradientColoredAreas;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence gradientModelExpectedStyleContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package styles;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Style;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Color;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.LineStyle;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.AdaptedGradientColoredAreas;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IGradientType;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.StylesFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IPredefinedRenderingStyle;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.styles.generator.util.GradientUtilClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Style class for Spray.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyStyleBase extends org.eclipselabs.spray.runtime.graphiti.styles.DefaultSprayStyle {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The IGaService instance for the whole class.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private IGaService gaService = Graphiti.getGaService();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method creates and defines a Style and returns it. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Description: ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return The defined Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Style newStyle(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Style style = super.newStyle(diagram);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setId(\"MyStyle\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setDescription(\"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineStyleTransparency(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineBackground(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineLineAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("defineFontAttributes(diagram, style);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return style;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style transparency.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the transparency will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineStyleTransparency(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* If a gradient is been used, then a color schema will be set for the background.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the background will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineBackground(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setRenderingStyle(style, getColorSchema());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style line attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the line attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineLineAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method will be called from the newStyle-method for defining the Style font attributes.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param diagram the diagram attribute");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param style the Style attribute, where the font attributes will be set.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void defineFontAttributes(Diagram diagram, Style style) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String fontName = style.getFont().getName();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int fontSize = style.getFont().getSize();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontItalic = style.getFont().isItalic();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean fontBold = style.getFont().isBold();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the font color for the style. ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The font color will be returned separatly, because Graphiti allows just the foreground color.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* The foreground color will be used for lines and fonts at the same time.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Color getFontColor(Diagram diagram) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.getFontColor(diagram);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns Color Schema of the Style");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AdaptedGradientColoredAreas getColorSchema() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final AdaptedGradientColoredAreas agca =");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("StylesFactory.eINSTANCE.createAdaptedGradientColoredAreas();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.setDefinedStyleId(\"MyStyleBase_Color_Schema_ID\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.setGradientType(IGradientType.HORIZONTAL);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("agca.getAdaptedGradientColoredAreas().add(IPredefinedRenderingStyle.STYLE_ADAPTATION_DEFAULT, new gradients.MyGradient().getGradientColoredAreas( ));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return agca;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
