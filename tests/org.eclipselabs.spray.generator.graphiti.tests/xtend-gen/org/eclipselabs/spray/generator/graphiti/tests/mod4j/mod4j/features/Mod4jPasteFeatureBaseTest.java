/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;

/* @RunWith(XtextRunner2.class) */@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jPasteFeatureBaseTest extends AbstractSprayGeneratorTest {
  /* @Test
   */public void test() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method assertTrue is undefined for the type Mod4jPasteFeatureBaseTest"
      + "\nThe method assertEquals is undefined for the type Mod4jPasteFeatureBaseTest");
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray PasteFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IPasteContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.Property;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractPasteFeature;");
    _builder.newLine();
    _builder.append("import null.BusinessDomainDslPackage;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.diagram.Mod4jModelService;");
    _builder.newLine();
    _builder.append("import samplepackage.Association;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessClass;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessDomainModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jPasteFeatureBase extends AbstractPasteFeature  {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Mod4jModelService modelService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jPasteFeatureBase(IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("modelService = Mod4jModelService.getModelService(fp.getDiagramTypeProvider());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canPaste(IPasteContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TODO: only support pasting directly in the diagram");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("PictogramElement[] pes = context.getPictogramElements();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (pes.length != 1 || !(pes[0] instanceof Diagram)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// can paste, if all objects on the clipboard are PictogramElements with link on subclasses of BusinessDomainModel");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Object[] fromClipboard = getFromClipboard();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (fromClipboard == null || fromClipboard.length == 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Object object : fromClipboard) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!(object instanceof PictogramElement)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if(!(getBusinessObjectForPictogramElement((PictogramElement) object) instanceof BusinessDomainModel)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void paste(IPasteContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// already verified, that pasting is allowed just directly in the diagram");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("PictogramElement[] pes = context.getPictogramElements();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Diagram diagram = (Diagram) pes[0];");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// get the PictogramElements from the clipboard and the linked business object.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Object[] objects = getFromClipboard();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Object object : objects) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("PictogramElement pictogramElement = (PictogramElement) object;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BusinessDomainModel boRef = (BusinessDomainModel) getBusinessObjectForPictogramElement(pictogramElement);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BusinessDomainModel bo = EcoreUtil.copy(boRef);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("addBusinessObjectToContainer(bo, pictogramElement);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// create a new AddContext for the creation of a new shape.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AddContext ac = new AddContext(new AddContext(), bo);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ac.setLocation(0, 0); // for simplicity paste at (0, 0)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ac.setTargetContainer(diagram); // paste on diagram");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// copy all properties from the shape (e.g. ALIAS etc.)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for(Property prop : pictogramElement.getProperties()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ac.putProperty(prop.getKey(), prop.getValue());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getFeatureProvider().addIfPossible(ac);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void addBusinessObjectToContainer(BusinessDomainModel bo, PictogramElement pe) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BusinessDomainModel model = modelService.getModel();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String alias = Graphiti.getPeService().getPropertyValue(pe, PROPERTY_ALIAS);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && \"BusinessClassNameOnly\".equals(alias)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getTypes().add((BusinessClass) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.PACKAGE && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getPackages().add((samplepackage.Package) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.PACKAGE && \"Autopackage\".equals(alias)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getPackages().add((samplepackage.Package) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getTypes().add((BusinessClass) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_CLASS && \"SimpleClass\".equals(alias)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getTypes().add((BusinessClass) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.STRING_PROPERTY && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.STRING_PROPERTY && \"String\".equals(alias)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BOOL_PROPERTY && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.UNIQUE_RULE && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_RULE && \"BBB\".equals(alias)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.BUSINESS_RULE && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new UnsupportedOperationException(\"No create behavior defined\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(bo.eClass() == BusinessDomainDslPackage.Literals.ASSOCIATION && alias == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("model.getAssociations().add((Association) bo);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
