/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;

/* @RunWith(XtextRunner2.class) */@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jModuleBaseTest extends AbstractSprayGeneratorTest {
  /* @Test
   */public void test() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method assertTrue is undefined for the type Mod4jModuleBaseTest"
      + "\nThe method assertEquals is undefined for the type Mod4jModuleBaseTest");
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray GuiceModule.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.resources.IWorkspace;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.resources.ResourcesPlugin;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.IWorkbench;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.PlatformUI;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.service.AbstractGenericModule;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ui.editor.GlobalURIEditorOpener;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ui.editor.IURIEditorOpener;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ui.resource.IStorage2UriMapper;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ui.resource.Storage2UriMapperImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Binder;");
    _builder.newLine();
    _builder.append("import com.google.inject.name.Names;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Mod4jModuleBase extends AbstractGenericModule {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Class<? extends IURIEditorOpener> bindIURIEditorOpener() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return GlobalURIEditorOpener.class;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void configure(Binder binder) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("binder.bind(IStorage2UriMapper.class).to(Storage2UriMapperImpl.class);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("binder.bind(IWorkbench.class).toInstance(PlatformUI.getWorkbench());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("binder.bind(IWorkspace.class).toInstance(ResourcesPlugin.getWorkspace());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("binder.bind(String.class).annotatedWith(Names.named(\"diagramTypeId\")).toInstance(\"Mod4j\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
