/*
* generated by Xtext
*/
package org.eclipselabs.spray.shapes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipselabs.spray.styles.services.StyleGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ShapeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ShapeContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cShapeContainerElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShapeContainerElementShapeContainerElementParserRuleCall_1_0 = (RuleCall)cShapeContainerElementAssignment_1.eContents().get(0);
		
		//ShapeContainer:
		//	imports+=Import* shapeContainerElement+=ShapeContainerElement*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* shapeContainerElement+=ShapeContainerElement*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//shapeContainerElement+=ShapeContainerElement*
		public Assignment getShapeContainerElementAssignment_1() { return cShapeContainerElementAssignment_1; }

		//ShapeContainerElement
		public RuleCall getShapeContainerElementShapeContainerElementParserRuleCall_1_0() { return cShapeContainerElementShapeContainerElementParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceShapesQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=ShapesQualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ShapesQualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ShapesQualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ShapesQualifiedNameWithWildCard
		public RuleCall getImportedNamespaceShapesQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceShapesQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class ShapesQualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapesQualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ShapesQualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class ShapeContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeContainerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ShapeContainerElement:
		//	ShapeDefinition | ConnectionDefinition;
		public ParserRule getRule() { return rule; }

		//ShapeDefinition | ConnectionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ShapeDefinition
		public RuleCall getShapeDefinitionParserRuleCall_0() { return cShapeDefinitionParserRuleCall_0; }

		//ConnectionDefinition
		public RuleCall getConnectionDefinitionParserRuleCall_1() { return cConnectionDefinitionParserRuleCall_1; }
	}

	public class ConnectionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConnectionTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConnectionStyleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConnectionStyleConnectionStyleEnumRuleCall_4_1_0 = (RuleCall)cConnectionStyleAssignment_4_1.eContents().get(0);
		private final Assignment cLayoutAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_5_0 = (RuleCall)cLayoutAssignment_5.eContents().get(0);
		private final Assignment cPlacingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlacingPlacingDefinitionParserRuleCall_6_0 = (RuleCall)cPlacingAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConnectionDefinition:
		//	"connection" name=ID style=ShapeStyleRef? "{" ("connection-type" connectionStyle=ConnectionStyle)?
		//	layout=ShapestyleLayout? placing+=PlacingDefinition* "}";
		public ParserRule getRule() { return rule; }

		//"connection" name=ID style=ShapeStyleRef? "{" ("connection-type" connectionStyle=ConnectionStyle)?
		//layout=ShapestyleLayout? placing+=PlacingDefinition* "}"
		public Group getGroup() { return cGroup; }

		//"connection"
		public Keyword getConnectionKeyword_0() { return cConnectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("connection-type" connectionStyle=ConnectionStyle)?
		public Group getGroup_4() { return cGroup_4; }

		//"connection-type"
		public Keyword getConnectionTypeKeyword_4_0() { return cConnectionTypeKeyword_4_0; }

		//connectionStyle=ConnectionStyle
		public Assignment getConnectionStyleAssignment_4_1() { return cConnectionStyleAssignment_4_1; }

		//ConnectionStyle
		public RuleCall getConnectionStyleConnectionStyleEnumRuleCall_4_1_0() { return cConnectionStyleConnectionStyleEnumRuleCall_4_1_0; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_5() { return cLayoutAssignment_5; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_5_0() { return cLayoutShapestyleLayoutParserRuleCall_5_0; }

		//placing+=PlacingDefinition*
		public Assignment getPlacingAssignment_6() { return cPlacingAssignment_6; }

		//PlacingDefinition
		public RuleCall getPlacingPlacingDefinitionParserRuleCall_6_0() { return cPlacingPlacingDefinitionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ShapeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cShapeLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cShapeLayoutShapeLayoutParserRuleCall_4_0 = (RuleCall)cShapeLayoutAssignment_4.eContents().get(0);
		private final Assignment cShapeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cShapeShapeParserRuleCall_5_0 = (RuleCall)cShapeAssignment_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDescriptionParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Assignment cAnchorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnchorAnchorParserRuleCall_7_0 = (RuleCall)cAnchorAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ShapeDefinition:
		//	"shape" name=ID style=ShapeStyleRef? "{" shapeLayout=ShapeLayout shape+=Shape+ description=Description? anchor=Anchor?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"shape" name=ID style=ShapeStyleRef? "{" shapeLayout=ShapeLayout shape+=Shape+ description=Description? anchor=Anchor?
		//"}"
		public Group getGroup() { return cGroup; }

		//"shape"
		public Keyword getShapeKeyword_0() { return cShapeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//shapeLayout=ShapeLayout
		public Assignment getShapeLayoutAssignment_4() { return cShapeLayoutAssignment_4; }

		//ShapeLayout
		public RuleCall getShapeLayoutShapeLayoutParserRuleCall_4_0() { return cShapeLayoutShapeLayoutParserRuleCall_4_0; }

		//shape+=Shape+
		public Assignment getShapeAssignment_5() { return cShapeAssignment_5; }

		//Shape
		public RuleCall getShapeShapeParserRuleCall_5_0() { return cShapeShapeParserRuleCall_5_0; }

		//description=Description?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_6_0() { return cDescriptionDescriptionParserRuleCall_6_0; }

		//anchor=Anchor?
		public Assignment getAnchorAssignment_7() { return cAnchorAssignment_7; }

		//Anchor
		public RuleCall getAnchorAnchorParserRuleCall_7_0() { return cAnchorAnchorParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class PlacingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlacingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlacingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPositionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOffsetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOffsetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOffsetDOUBLEParserRuleCall_6_0 = (RuleCall)cOffsetAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cRadiusKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cEqualsSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cDistanceAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cDistanceINTTerminalRuleCall_7_3_0 = (RuleCall)cDistanceAssignment_7_3.eContents().get(0);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cAngleKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Keyword cEqualsSignKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cAngleAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cAngleINTTerminalRuleCall_7_7_0 = (RuleCall)cAngleAssignment_7_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cShapeConAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cShapeConShapeConnectionParserRuleCall_9_0 = (RuleCall)cShapeConAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PlacingDefinition:
		//	"placing" "{" "position" "(" "offset" "=" offset=DOUBLE ("," "radius" "=" distance=INT "," "angle" "=" angle=INT)? ")"
		//	shapeCon=ShapeConnection "}";
		public ParserRule getRule() { return rule; }

		//"placing" "{" "position" "(" "offset" "=" offset=DOUBLE ("," "radius" "=" distance=INT "," "angle" "=" angle=INT)? ")"
		//shapeCon=ShapeConnection "}"
		public Group getGroup() { return cGroup; }

		//"placing"
		public Keyword getPlacingKeyword_0() { return cPlacingKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"position"
		public Keyword getPositionKeyword_2() { return cPositionKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//"offset"
		public Keyword getOffsetKeyword_4() { return cOffsetKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//offset=DOUBLE
		public Assignment getOffsetAssignment_6() { return cOffsetAssignment_6; }

		//DOUBLE
		public RuleCall getOffsetDOUBLEParserRuleCall_6_0() { return cOffsetDOUBLEParserRuleCall_6_0; }

		//("," "radius" "=" distance=INT "," "angle" "=" angle=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//"radius"
		public Keyword getRadiusKeyword_7_1() { return cRadiusKeyword_7_1; }

		//"="
		public Keyword getEqualsSignKeyword_7_2() { return cEqualsSignKeyword_7_2; }

		//distance=INT
		public Assignment getDistanceAssignment_7_3() { return cDistanceAssignment_7_3; }

		//INT
		public RuleCall getDistanceINTTerminalRuleCall_7_3_0() { return cDistanceINTTerminalRuleCall_7_3_0; }

		//","
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }

		//"angle"
		public Keyword getAngleKeyword_7_5() { return cAngleKeyword_7_5; }

		//"="
		public Keyword getEqualsSignKeyword_7_6() { return cEqualsSignKeyword_7_6; }

		//angle=INT
		public Assignment getAngleAssignment_7_7() { return cAngleAssignment_7_7; }

		//INT
		public RuleCall getAngleINTTerminalRuleCall_7_7_0() { return cAngleINTTerminalRuleCall_7_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//shapeCon=ShapeConnection
		public Assignment getShapeConAssignment_9() { return cShapeConAssignment_9; }

		//ShapeConnection
		public RuleCall getShapeConShapeConnectionParserRuleCall_9_0() { return cShapeConShapeConnectionParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Anchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnchorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAnchorTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Anchor:
		//	"anchor" type=AnchorType;
		public ParserRule getRule() { return rule; }

		//"anchor" type=AnchorType
		public Group getGroup() { return cGroup; }

		//"anchor"
		public Keyword getAnchorKeyword_0() { return cAnchorKeyword_0; }

		//type=AnchorType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AnchorType
		public RuleCall getTypeAnchorTypeParserRuleCall_1_0() { return cTypeAnchorTypeParserRuleCall_1_0; }
	}

	public class AnchorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnchorPredefiniedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnchorManualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnchorType:
		//	AnchorPredefinied | AnchorManual;
		public ParserRule getRule() { return rule; }

		//AnchorPredefinied | AnchorManual
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnchorPredefinied
		public RuleCall getAnchorPredefiniedParserRuleCall_0() { return cAnchorPredefiniedParserRuleCall_0; }

		//AnchorManual
		public RuleCall getAnchorManualParserRuleCall_1() { return cAnchorManualParserRuleCall_1; }
	}

	public class AnchorPredefiniedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorPredefinied");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAnchorPredefiniedEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AnchorPredefinied:
		//	value=AnchorPredefiniedEnum;
		public ParserRule getRule() { return rule; }

		//value=AnchorPredefiniedEnum
		public Assignment getValueAssignment() { return cValueAssignment; }

		//AnchorPredefiniedEnum
		public RuleCall getValueAnchorPredefiniedEnumEnumRuleCall_0() { return cValueAnchorPredefiniedEnumEnumRuleCall_0; }
	}

	public class AnchorManualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorManual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionAnchorPositionParserRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AnchorManual:
		//	"{" position+=AnchorPosition+ "}";
		public ParserRule getRule() { return rule; }

		//"{" position+=AnchorPosition+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//position+=AnchorPosition+
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }

		//AnchorPosition
		public RuleCall getPositionAnchorPositionParserRuleCall_1_0() { return cPositionAnchorPositionParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class AnchorPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPosAnchorPositionPosParserRuleCall_2_0 = (RuleCall)cPosAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AnchorPosition:
		//	"position" "(" pos=AnchorPositionPos ")";
		public ParserRule getRule() { return rule; }

		//"position" "(" pos=AnchorPositionPos ")"
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//pos=AnchorPositionPos
		public Assignment getPosAssignment_2() { return cPosAssignment_2; }

		//AnchorPositionPos
		public RuleCall getPosAnchorPositionPosParserRuleCall_2_0() { return cPosAnchorPositionPosParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AnchorPositionPosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorPositionPos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnchorRelativePositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnchorFixPointPositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnchorPositionPos:
		//	AnchorRelativePosition | AnchorFixPointPosition;
		public ParserRule getRule() { return rule; }

		//AnchorRelativePosition | AnchorFixPointPosition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnchorRelativePosition
		public RuleCall getAnchorRelativePositionParserRuleCall_0() { return cAnchorRelativePositionParserRuleCall_0; }

		//AnchorFixPointPosition
		public RuleCall getAnchorFixPointPositionParserRuleCall_1() { return cAnchorFixPointPositionParserRuleCall_1; }
	}

	public class AnchorRelativePositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorRelativePosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXoffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXoffsetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXoffsetDOUBLEParserRuleCall_2_0 = (RuleCall)cXoffsetAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cYoffsetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYoffsetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYoffsetDOUBLEParserRuleCall_6_0 = (RuleCall)cYoffsetAssignment_6.eContents().get(0);
		
		//AnchorRelativePosition:
		//	"xoffset" "=" xoffset=DOUBLE "," "yoffset" "=" yoffset=DOUBLE;
		public ParserRule getRule() { return rule; }

		//"xoffset" "=" xoffset=DOUBLE "," "yoffset" "=" yoffset=DOUBLE
		public Group getGroup() { return cGroup; }

		//"xoffset"
		public Keyword getXoffsetKeyword_0() { return cXoffsetKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//xoffset=DOUBLE
		public Assignment getXoffsetAssignment_2() { return cXoffsetAssignment_2; }

		//DOUBLE
		public RuleCall getXoffsetDOUBLEParserRuleCall_2_0() { return cXoffsetDOUBLEParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"yoffset"
		public Keyword getYoffsetKeyword_4() { return cYoffsetKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//yoffset=DOUBLE
		public Assignment getYoffsetAssignment_6() { return cYoffsetAssignment_6; }

		//DOUBLE
		public RuleCall getYoffsetDOUBLEParserRuleCall_6_0() { return cYoffsetDOUBLEParserRuleCall_6_0; }
	}

	public class AnchorFixPointPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorFixPointPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXcorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXcorINTTerminalRuleCall_2_0 = (RuleCall)cXcorAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYcorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYcorINTTerminalRuleCall_6_0 = (RuleCall)cYcorAssignment_6.eContents().get(0);
		
		//AnchorFixPointPosition:
		//	"x" "=" xcor=INT "," "y" "=" ycor=INT;
		public ParserRule getRule() { return rule; }

		//"x" "=" xcor=INT "," "y" "=" ycor=INT
		public Group getGroup() { return cGroup; }

		//"x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//xcor=INT
		public Assignment getXcorAssignment_2() { return cXcorAssignment_2; }

		//INT
		public RuleCall getXcorINTTerminalRuleCall_2_0() { return cXcorINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"y"
		public Keyword getYKeyword_4() { return cYKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//ycor=INT
		public Assignment getYcorAssignment_6() { return cYcorAssignment_6; }

		//INT
		public RuleCall getYcorINTTerminalRuleCall_6_0() { return cYcorINTTerminalRuleCall_6_0; }
	}

	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPolylineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRectangleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRoundedRectangleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPolygonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEllipseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTextParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Shape:
		//	Line | Polyline | Rectangle | RoundedRectangle | Polygon | Ellipse | Text;
		public ParserRule getRule() { return rule; }

		//Line | Polyline | Rectangle | RoundedRectangle | Polygon | Ellipse | Text
		public Alternatives getAlternatives() { return cAlternatives; }

		//Line
		public RuleCall getLineParserRuleCall_0() { return cLineParserRuleCall_0; }

		//Polyline
		public RuleCall getPolylineParserRuleCall_1() { return cPolylineParserRuleCall_1; }

		//Rectangle
		public RuleCall getRectangleParserRuleCall_2() { return cRectangleParserRuleCall_2; }

		//RoundedRectangle
		public RuleCall getRoundedRectangleParserRuleCall_3() { return cRoundedRectangleParserRuleCall_3; }

		//Polygon
		public RuleCall getPolygonParserRuleCall_4() { return cPolygonParserRuleCall_4; }

		//Ellipse
		public RuleCall getEllipseParserRuleCall_5() { return cEllipseParserRuleCall_5; }

		//Text
		public RuleCall getTextParserRuleCall_6() { return cTextParserRuleCall_6; }
	}

	public class ShapeConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeConnection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCDLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCDPolylineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCDRectangleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCDRoundedRectangleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCDPolygonParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCDEllipseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCDTextParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ShapeConnection:
		//	CDLine | CDPolyline | CDRectangle | CDRoundedRectangle | CDPolygon | CDEllipse | CDText;
		public ParserRule getRule() { return rule; }

		//CDLine | CDPolyline | CDRectangle | CDRoundedRectangle | CDPolygon | CDEllipse | CDText
		public Alternatives getAlternatives() { return cAlternatives; }

		//CDLine
		public RuleCall getCDLineParserRuleCall_0() { return cCDLineParserRuleCall_0; }

		//CDPolyline
		public RuleCall getCDPolylineParserRuleCall_1() { return cCDPolylineParserRuleCall_1; }

		//CDRectangle
		public RuleCall getCDRectangleParserRuleCall_2() { return cCDRectangleParserRuleCall_2; }

		//CDRoundedRectangle
		public RuleCall getCDRoundedRectangleParserRuleCall_3() { return cCDRoundedRectangleParserRuleCall_3; }

		//CDPolygon
		public RuleCall getCDPolygonParserRuleCall_4() { return cCDPolygonParserRuleCall_4; }

		//CDEllipse
		public RuleCall getCDEllipseParserRuleCall_5() { return cCDEllipseParserRuleCall_5; }

		//CDText
		public RuleCall getCDTextParserRuleCall_6() { return cCDTextParserRuleCall_6; }
	}

	public class CDLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDLine:
		//	{CDLine} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDLine} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDLine}
		public Action getCDLineAction_0() { return cCDLineAction_0; }

		//"line"
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=LineLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=LineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//LineLayout
		public RuleCall getLayoutLineLayoutParserRuleCall_3_1_0() { return cLayoutLineLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDPolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDPolyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDPolylineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolylineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutPolyLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDPolyline:
		//	{CDPolyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDPolyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDPolyline}
		public Action getCDPolylineAction_0() { return cCDPolylineAction_0; }

		//"polyline"
		public Keyword getPolylineKeyword_1() { return cPolylineKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=PolyLineLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=PolyLineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//PolyLineLayout
		public RuleCall getLayoutPolyLineLayoutParserRuleCall_3_1_0() { return cLayoutPolyLineLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDRectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDRectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDRectangle:
		//	{CDRectangle} "rectangle" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDRectangle} "rectangle" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDRectangle}
		public Action getCDRectangleAction_0() { return cCDRectangleAction_0; }

		//"rectangle"
		public Keyword getRectangleKeyword_1() { return cRectangleKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=RectangleEllipseLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_3_1_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDRoundedRectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDRoundedRectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDRoundedRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoundedRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutRoundedRectangleLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDRoundedRectangle:
		//	{CDRoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDRoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDRoundedRectangle}
		public Action getCDRoundedRectangleAction_0() { return cCDRoundedRectangleAction_0; }

		//"rounded-rectangle"
		public Keyword getRoundedRectangleKeyword_1() { return cRoundedRectangleKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=RoundedRectangleLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=RoundedRectangleLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//RoundedRectangleLayout
		public RuleCall getLayoutRoundedRectangleLayoutParserRuleCall_3_1_0() { return cLayoutRoundedRectangleLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDPolygonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDPolygon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDPolygonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolygonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutPolyLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDPolygon:
		//	{CDPolygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDPolygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDPolygon}
		public Action getCDPolygonAction_0() { return cCDPolygonAction_0; }

		//"polygon"
		public Keyword getPolygonKeyword_1() { return cPolygonKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=PolyLineLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=PolyLineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//PolyLineLayout
		public RuleCall getLayoutPolyLineLayoutParserRuleCall_3_1_0() { return cLayoutPolyLineLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDEllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDEllipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDEllipseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEllipseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//CDEllipse:
		//	{CDEllipse} "ellipse" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}");
		public ParserRule getRule() { return rule; }

		//{CDEllipse} "ellipse" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}")
		public Group getGroup() { return cGroup; }

		//{CDEllipse}
		public Action getCDEllipseAction_0() { return cCDEllipseAction_0; }

		//"ellipse"
		public Keyword getEllipseKeyword_1() { return cEllipseKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=RectangleEllipseLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_3_1_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CDTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CDText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCDTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTexttypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexttypeTextTypeEnumRuleCall_1_0 = (RuleCall)cTexttypeAssignment_1.eContents().get(0);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutTextLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyTextBodyParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//CDText:
		//	{CDText} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{CDText} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{CDText}
		public Action getCDTextAction_0() { return cCDTextAction_0; }

		//texttype=TextType
		public Assignment getTexttypeAssignment_1() { return cTexttypeAssignment_1; }

		//TextType
		public RuleCall getTexttypeTextTypeEnumRuleCall_1_0() { return cTexttypeTextTypeEnumRuleCall_1_0; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=TextLayout body=TextBody "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=TextLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//TextLayout
		public RuleCall getLayoutTextLayoutParserRuleCall_3_1_0() { return cLayoutTextLayoutParserRuleCall_3_1_0; }

		//body=TextBody
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }

		//TextBody
		public RuleCall getBodyTextBodyParserRuleCall_3_2_0() { return cBodyTextBodyParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Line:
		//	{Line} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}");
		public ParserRule getRule() { return rule; }

		//{Line} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}")
		public Group getGroup() { return cGroup; }

		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }

		//"line"
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=LineLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=LineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//LineLayout
		public RuleCall getLayoutLineLayoutParserRuleCall_3_1_0() { return cLayoutLineLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolylineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolylineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutPolyLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Polyline:
		//	{Polyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
		public ParserRule getRule() { return rule; }

		//{Polyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}")
		public Group getGroup() { return cGroup; }

		//{Polyline}
		public Action getPolylineAction_0() { return cPolylineAction_0; }

		//"polyline"
		public Keyword getPolylineKeyword_1() { return cPolylineKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=PolyLineLayout "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=PolyLineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//PolyLineLayout
		public RuleCall getLayoutPolyLineLayoutParserRuleCall_3_1_0() { return cLayoutPolyLineLayoutParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCompartmentInfoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCompartmentInfoCompartmentInfoParserRuleCall_3_1_0 = (RuleCall)cCompartmentInfoAssignment_3_1.eContents().get(0);
		private final Assignment cLayoutAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_3_2_0 = (RuleCall)cLayoutAssignment_3_2.eContents().get(0);
		private final Assignment cShapeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cShapeShapeParserRuleCall_3_3_0 = (RuleCall)cShapeAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Rectangle:
		//	{Rectangle} "rectangle" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
		//	shape+=Shape* "}");
		public ParserRule getRule() { return rule; }

		//{Rectangle} "rectangle" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
		//shape+=Shape* "}")
		public Group getGroup() { return cGroup; }

		//{Rectangle}
		public Action getRectangleAction_0() { return cRectangleAction_0; }

		//"rectangle"
		public Keyword getRectangleKeyword_1() { return cRectangleKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout shape+=Shape* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//compartmentInfo=CompartmentInfo?
		public Assignment getCompartmentInfoAssignment_3_1() { return cCompartmentInfoAssignment_3_1; }

		//CompartmentInfo
		public RuleCall getCompartmentInfoCompartmentInfoParserRuleCall_3_1_0() { return cCompartmentInfoCompartmentInfoParserRuleCall_3_1_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_3_2() { return cLayoutAssignment_3_2; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_3_2_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_3_2_0; }

		//shape+=Shape*
		public Assignment getShapeAssignment_3_3() { return cShapeAssignment_3_3; }

		//Shape
		public RuleCall getShapeShapeParserRuleCall_3_3_0() { return cShapeShapeParserRuleCall_3_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}

	public class RoundedRectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoundedRectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoundedRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoundedRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutRoundedRectangleLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Assignment cShapeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cShapeShapeParserRuleCall_3_2_0 = (RuleCall)cShapeAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//RoundedRectangle:
		//	{RoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout shape+=Shape* "}");
		public ParserRule getRule() { return rule; }

		//{RoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout shape+=Shape* "}")
		public Group getGroup() { return cGroup; }

		//{RoundedRectangle}
		public Action getRoundedRectangleAction_0() { return cRoundedRectangleAction_0; }

		//"rounded-rectangle"
		public Keyword getRoundedRectangleKeyword_1() { return cRoundedRectangleKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=RoundedRectangleLayout shape+=Shape* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=RoundedRectangleLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//RoundedRectangleLayout
		public RuleCall getLayoutRoundedRectangleLayoutParserRuleCall_3_1_0() { return cLayoutRoundedRectangleLayoutParserRuleCall_3_1_0; }

		//shape+=Shape*
		public Assignment getShapeAssignment_3_2() { return cShapeAssignment_3_2; }

		//Shape
		public RuleCall getShapeShapeParserRuleCall_3_2_0() { return cShapeShapeParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class PolygonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Polygon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolygonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolygonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutPolyLineLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Assignment cShapeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cShapeShapeParserRuleCall_3_2_0 = (RuleCall)cShapeAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Polygon:
		//	{Polygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout shape+=Shape* "}");
		public ParserRule getRule() { return rule; }

		//{Polygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout shape+=Shape* "}")
		public Group getGroup() { return cGroup; }

		//{Polygon}
		public Action getPolygonAction_0() { return cPolygonAction_0; }

		//"polygon"
		public Keyword getPolygonKeyword_1() { return cPolygonKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=PolyLineLayout shape+=Shape* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=PolyLineLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//PolyLineLayout
		public RuleCall getLayoutPolyLineLayoutParserRuleCall_3_1_0() { return cLayoutPolyLineLayoutParserRuleCall_3_1_0; }

		//shape+=Shape*
		public Assignment getShapeAssignment_3_2() { return cShapeAssignment_3_2; }

		//Shape
		public RuleCall getShapeShapeParserRuleCall_3_2_0() { return cShapeShapeParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class EllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ellipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEllipseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEllipseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCompartmentInfoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCompartmentInfoCompartmentInfoParserRuleCall_3_1_0 = (RuleCall)cCompartmentInfoAssignment_3_1.eContents().get(0);
		private final Assignment cLayoutAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_3_2_0 = (RuleCall)cLayoutAssignment_3_2.eContents().get(0);
		private final Assignment cShapeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cShapeShapeParserRuleCall_3_3_0 = (RuleCall)cShapeAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Ellipse:
		//	{Ellipse} "ellipse" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
		//	shape+=Shape* "}");
		public ParserRule getRule() { return rule; }

		//{Ellipse} "ellipse" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
		//shape+=Shape* "}")
		public Group getGroup() { return cGroup; }

		//{Ellipse}
		public Action getEllipseAction_0() { return cEllipseAction_0; }

		//"ellipse"
		public Keyword getEllipseKeyword_1() { return cEllipseKeyword_1; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout shape+=Shape* "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//compartmentInfo=CompartmentInfo?
		public Assignment getCompartmentInfoAssignment_3_1() { return cCompartmentInfoAssignment_3_1; }

		//CompartmentInfo
		public RuleCall getCompartmentInfoCompartmentInfoParserRuleCall_3_1_0() { return cCompartmentInfoCompartmentInfoParserRuleCall_3_1_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_3_2() { return cLayoutAssignment_3_2; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_3_2_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_3_2_0; }

		//shape+=Shape*
		public Assignment getShapeAssignment_3_3() { return cShapeAssignment_3_3; }

		//Shape
		public RuleCall getShapeShapeParserRuleCall_3_3_0() { return cShapeShapeParserRuleCall_3_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTexttypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexttypeTextTypeEnumRuleCall_1_0 = (RuleCall)cTexttypeAssignment_1.eContents().get(0);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLayoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLayoutTextLayoutParserRuleCall_3_1_0 = (RuleCall)cLayoutAssignment_3_1.eContents().get(0);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyTextBodyParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Text:
		//	{Text} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{Text} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{Text}
		public Action getTextAction_0() { return cTextAction_0; }

		//texttype=TextType
		public Assignment getTexttypeAssignment_1() { return cTexttypeAssignment_1; }

		//TextType
		public RuleCall getTexttypeTextTypeEnumRuleCall_1_0() { return cTexttypeTextTypeEnumRuleCall_1_0; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_2_0() { return cStyleShapeStyleRefParserRuleCall_2_0; }

		//"{" layout=TextLayout body=TextBody "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//layout=TextLayout
		public Assignment getLayoutAssignment_3_1() { return cLayoutAssignment_3_1; }

		//TextLayout
		public RuleCall getLayoutTextLayoutParserRuleCall_3_1_0() { return cLayoutTextLayoutParserRuleCall_3_1_0; }

		//body=TextBody
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }

		//TextBody
		public RuleCall getBodyTextBodyParserRuleCall_3_2_0() { return cBodyTextBodyParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class CompartmentInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompartmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cLayoutKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cCompartmentLayoutAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0_2_0 = (RuleCall)cCompartmentLayoutAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cStretchingKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cHorizontalKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cStretchHAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cStretchHBooleanParserRuleCall_2_1_4_0 = (RuleCall)cStretchHAssignment_2_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_5 = (Keyword)cGroup_2_1.eContents().get(5);
		private final Keyword cVerticalKeyword_2_1_6 = (Keyword)cGroup_2_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_2_1_7 = (Keyword)cGroup_2_1.eContents().get(7);
		private final Assignment cStretchVAssignment_2_1_8 = (Assignment)cGroup_2_1.eContents().get(8);
		private final RuleCall cStretchVBooleanParserRuleCall_2_1_8_0 = (RuleCall)cStretchVAssignment_2_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_9 = (Keyword)cGroup_2_1.eContents().get(9);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cSpacingKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cSpacingAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cSpacingINTTerminalRuleCall_2_2_2_0 = (RuleCall)cSpacingAssignment_2_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cMarginKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cMarginAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cMarginINTTerminalRuleCall_2_3_2_0 = (RuleCall)cMarginAssignment_2_3_2.eContents().get(0);
		private final Assignment cInvisibleAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cInvisibleInvisibleKeyword_2_4_0 = (Keyword)cInvisibleAssignment_2_4.eContents().get(0);
		private final Assignment cIdAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final RuleCall cIdTextBodyParserRuleCall_2_5_0 = (RuleCall)cIdAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////ShapeRef: {ShapeRef} 'shape' (ref=JvmTypeReference) 
		////"{" layout=RectangleEllipseLayout "}";
		//CompartmentInfo:
		//	"compartment" "(" ("layout" "=" compartmentLayout=CompartmentLayout & ("stretching" "(" "horizontal" "="
		//	stretchH=Boolean "," "vertical" "=" stretchV=Boolean ")")? & ("spacing" "=" spacing=INT)? & ("margin" "=" margin=INT)?
		//	& invisible?="invisible"? & id=TextBody?) ")";
		public ParserRule getRule() { return rule; }

		//"compartment" "(" ("layout" "=" compartmentLayout=CompartmentLayout & ("stretching" "(" "horizontal" "="
		//stretchH=Boolean "," "vertical" "=" stretchV=Boolean ")")? & ("spacing" "=" spacing=INT)? & ("margin" "=" margin=INT)?
		//& invisible?="invisible"? & id=TextBody?) ")"
		public Group getGroup() { return cGroup; }

		//"compartment"
		public Keyword getCompartmentKeyword_0() { return cCompartmentKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"layout" "=" compartmentLayout=CompartmentLayout & ("stretching" "(" "horizontal" "=" stretchH=Boolean "," "vertical"
		//"=" stretchV=Boolean ")")? & ("spacing" "=" spacing=INT)? & ("margin" "=" margin=INT)? & invisible?="invisible"? &
		//id=TextBody?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"layout" "=" compartmentLayout=CompartmentLayout
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"layout"
		public Keyword getLayoutKeyword_2_0_0() { return cLayoutKeyword_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_1() { return cEqualsSignKeyword_2_0_1; }

		//compartmentLayout=CompartmentLayout
		public Assignment getCompartmentLayoutAssignment_2_0_2() { return cCompartmentLayoutAssignment_2_0_2; }

		//CompartmentLayout
		public RuleCall getCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0_2_0() { return cCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0_2_0; }

		//("stretching" "(" "horizontal" "=" stretchH=Boolean "," "vertical" "=" stretchV=Boolean ")")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"stretching"
		public Keyword getStretchingKeyword_2_1_0() { return cStretchingKeyword_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }

		//"horizontal"
		public Keyword getHorizontalKeyword_2_1_2() { return cHorizontalKeyword_2_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_3() { return cEqualsSignKeyword_2_1_3; }

		//stretchH=Boolean
		public Assignment getStretchHAssignment_2_1_4() { return cStretchHAssignment_2_1_4; }

		//Boolean
		public RuleCall getStretchHBooleanParserRuleCall_2_1_4_0() { return cStretchHBooleanParserRuleCall_2_1_4_0; }

		//","
		public Keyword getCommaKeyword_2_1_5() { return cCommaKeyword_2_1_5; }

		//"vertical"
		public Keyword getVerticalKeyword_2_1_6() { return cVerticalKeyword_2_1_6; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_7() { return cEqualsSignKeyword_2_1_7; }

		//stretchV=Boolean
		public Assignment getStretchVAssignment_2_1_8() { return cStretchVAssignment_2_1_8; }

		//Boolean
		public RuleCall getStretchVBooleanParserRuleCall_2_1_8_0() { return cStretchVBooleanParserRuleCall_2_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_9() { return cRightParenthesisKeyword_2_1_9; }

		//("spacing" "=" spacing=INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"spacing"
		public Keyword getSpacingKeyword_2_2_0() { return cSpacingKeyword_2_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2_1() { return cEqualsSignKeyword_2_2_1; }

		//spacing=INT
		public Assignment getSpacingAssignment_2_2_2() { return cSpacingAssignment_2_2_2; }

		//INT
		public RuleCall getSpacingINTTerminalRuleCall_2_2_2_0() { return cSpacingINTTerminalRuleCall_2_2_2_0; }

		//("margin" "=" margin=INT)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"margin"
		public Keyword getMarginKeyword_2_3_0() { return cMarginKeyword_2_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_3_1() { return cEqualsSignKeyword_2_3_1; }

		//margin=INT
		public Assignment getMarginAssignment_2_3_2() { return cMarginAssignment_2_3_2; }

		//INT
		public RuleCall getMarginINTTerminalRuleCall_2_3_2_0() { return cMarginINTTerminalRuleCall_2_3_2_0; }

		//invisible?="invisible"?
		public Assignment getInvisibleAssignment_2_4() { return cInvisibleAssignment_2_4; }

		//"invisible"
		public Keyword getInvisibleInvisibleKeyword_2_4_0() { return cInvisibleInvisibleKeyword_2_4_0; }

		//id=TextBody?
		public Assignment getIdAssignment_2_5() { return cIdAssignment_2_5; }

		//TextBody
		public RuleCall getIdTextBodyParserRuleCall_2_5_0() { return cIdTextBodyParserRuleCall_2_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CompartmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compartment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompartmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompartmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCompartmentLayoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0 = (RuleCall)cCompartmentLayoutAssignment_2.eContents().get(0);
		private final Assignment cShapeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShapeCompartmentShapeParserRuleCall_3_0 = (RuleCall)cShapeAssignment_3.eContents().get(0);
		
		/////'{' common = CommonLayout body = TextBody '}'
		//Compartment:
		//	{Compartment} "compartment" compartmentLayout=CompartmentLayout? shape=CompartmentShape;
		public ParserRule getRule() { return rule; }

		//{Compartment} "compartment" compartmentLayout=CompartmentLayout? shape=CompartmentShape
		public Group getGroup() { return cGroup; }

		//{Compartment}
		public Action getCompartmentAction_0() { return cCompartmentAction_0; }

		//"compartment"
		public Keyword getCompartmentKeyword_1() { return cCompartmentKeyword_1; }

		//compartmentLayout=CompartmentLayout?
		public Assignment getCompartmentLayoutAssignment_2() { return cCompartmentLayoutAssignment_2; }

		//CompartmentLayout
		public RuleCall getCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0() { return cCompartmentLayoutCompartmentLayoutEnumRuleCall_2_0; }

		//shape=CompartmentShape
		public Assignment getShapeAssignment_3() { return cShapeAssignment_3; }

		//CompartmentShape
		public RuleCall getShapeCompartmentShapeParserRuleCall_3_0() { return cShapeCompartmentShapeParserRuleCall_3_0; }
	}

	public class CompartmentShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentShape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompartmentEllipseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompartmentRectangleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// | CompartmentPolygon | CompartmentRoundedRectangle
		//CompartmentShape:
		//	CompartmentEllipse | CompartmentRectangle;
		public ParserRule getRule() { return rule; }

		//CompartmentEllipse | CompartmentRectangle
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompartmentEllipse
		public RuleCall getCompartmentEllipseParserRuleCall_0() { return cCompartmentEllipseParserRuleCall_0; }

		//CompartmentRectangle
		public RuleCall getCompartmentRectangleParserRuleCall_1() { return cCompartmentRectangleParserRuleCall_1; }
	}

	public class CompartmentRectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentRectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompartmentRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLayoutAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_2_1_0 = (RuleCall)cLayoutAssignment_2_1.eContents().get(0);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdTextBodyParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompartmentRectangle:
		//	{CompartmentRectangle} "rectangle" ("{" layout=RectangleEllipseLayout id=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{CompartmentRectangle} "rectangle" ("{" layout=RectangleEllipseLayout id=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{CompartmentRectangle}
		public Action getCompartmentRectangleAction_0() { return cCompartmentRectangleAction_0; }

		//"rectangle"
		public Keyword getRectangleKeyword_1() { return cRectangleKeyword_1; }

		//"{" layout=RectangleEllipseLayout id=TextBody "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_2_1() { return cLayoutAssignment_2_1; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_2_1_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_2_1_0; }

		//id=TextBody
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//TextBody
		public RuleCall getIdTextBodyParserRuleCall_2_2_0() { return cIdTextBodyParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class CompartmentRoundedRectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentRoundedRectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompartmentRoundedRectangleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoundedRectangleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLayoutAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLayoutRoundedRectangleLayoutParserRuleCall_2_1_0 = (RuleCall)cLayoutAssignment_2_1.eContents().get(0);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdTextBodyParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompartmentRoundedRectangle:
		//	{CompartmentRoundedRectangle} "rounded-rectangle" ("{" layout=RoundedRectangleLayout id=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{CompartmentRoundedRectangle} "rounded-rectangle" ("{" layout=RoundedRectangleLayout id=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{CompartmentRoundedRectangle}
		public Action getCompartmentRoundedRectangleAction_0() { return cCompartmentRoundedRectangleAction_0; }

		//"rounded-rectangle"
		public Keyword getRoundedRectangleKeyword_1() { return cRoundedRectangleKeyword_1; }

		//"{" layout=RoundedRectangleLayout id=TextBody "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//layout=RoundedRectangleLayout
		public Assignment getLayoutAssignment_2_1() { return cLayoutAssignment_2_1; }

		//RoundedRectangleLayout
		public RuleCall getLayoutRoundedRectangleLayoutParserRuleCall_2_1_0() { return cLayoutRoundedRectangleLayoutParserRuleCall_2_1_0; }

		//id=TextBody
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//TextBody
		public RuleCall getIdTextBodyParserRuleCall_2_2_0() { return cIdTextBodyParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class CompartmentPolygonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentPolygon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompartmentPolygonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolygonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLayoutAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLayoutPolyLineLayoutParserRuleCall_2_1_0 = (RuleCall)cLayoutAssignment_2_1.eContents().get(0);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdTextBodyParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompartmentPolygon:
		//	{CompartmentPolygon} "polygon" ("{" layout=PolyLineLayout id=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{CompartmentPolygon} "polygon" ("{" layout=PolyLineLayout id=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{CompartmentPolygon}
		public Action getCompartmentPolygonAction_0() { return cCompartmentPolygonAction_0; }

		//"polygon"
		public Keyword getPolygonKeyword_1() { return cPolygonKeyword_1; }

		//"{" layout=PolyLineLayout id=TextBody "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//layout=PolyLineLayout
		public Assignment getLayoutAssignment_2_1() { return cLayoutAssignment_2_1; }

		//PolyLineLayout
		public RuleCall getLayoutPolyLineLayoutParserRuleCall_2_1_0() { return cLayoutPolyLineLayoutParserRuleCall_2_1_0; }

		//id=TextBody
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//TextBody
		public RuleCall getIdTextBodyParserRuleCall_2_2_0() { return cIdTextBodyParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class CompartmentEllipseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentEllipse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompartmentEllipseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEllipseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLayoutAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLayoutRectangleEllipseLayoutParserRuleCall_2_1_0 = (RuleCall)cLayoutAssignment_2_1.eContents().get(0);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdTextBodyParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompartmentEllipse:
		//	{CompartmentEllipse} "ellipse" ("{" layout=RectangleEllipseLayout id=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{CompartmentEllipse} "ellipse" ("{" layout=RectangleEllipseLayout id=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{CompartmentEllipse}
		public Action getCompartmentEllipseAction_0() { return cCompartmentEllipseAction_0; }

		//"ellipse"
		public Keyword getEllipseKeyword_1() { return cEllipseKeyword_1; }

		//"{" layout=RectangleEllipseLayout id=TextBody "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//layout=RectangleEllipseLayout
		public Assignment getLayoutAssignment_2_1() { return cLayoutAssignment_2_1; }

		//RectangleEllipseLayout
		public RuleCall getLayoutRectangleEllipseLayoutParserRuleCall_2_1_0() { return cLayoutRectangleEllipseLayoutParserRuleCall_2_1_0; }

		//id=TextBody
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//TextBody
		public RuleCall getIdTextBodyParserRuleCall_2_2_0() { return cIdTextBodyParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDescriptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDescriptionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStyleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStyleShapeStyleRefParserRuleCall_1_1_0 = (RuleCall)cStyleAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAlignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cHorizontalKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_2_1 = (Keyword)cGroup_1_3_2.eContents().get(1);
		private final Assignment cHAlignAssignment_1_3_2_2 = (Assignment)cGroup_1_3_2.eContents().get(2);
		private final RuleCall cHAlignHAlignEnumRuleCall_1_3_2_2_0 = (RuleCall)cHAlignAssignment_1_3_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3_2_3 = (Keyword)cGroup_1_3_2.eContents().get(3);
		private final Keyword cVerticalKeyword_1_3_2_4 = (Keyword)cGroup_1_3_2.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_3_2_5 = (Keyword)cGroup_1_3_2.eContents().get(5);
		private final Assignment cVAlignAssignment_1_3_2_6 = (Assignment)cGroup_1_3_2.eContents().get(6);
		private final RuleCall cVAlignVAlignEnumRuleCall_1_3_2_6_0 = (RuleCall)cVAlignAssignment_1_3_2_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cBodyAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cBodyTextBodyParserRuleCall_1_4_0 = (RuleCall)cBodyAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Description:
		//	{Description} ("description" style=ShapeStyleRef? "{" ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "="
		//	vAlign=VAlign)? ")")? body=TextBody "}");
		public ParserRule getRule() { return rule; }

		//{Description} ("description" style=ShapeStyleRef? "{" ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "="
		//vAlign=VAlign)? ")")? body=TextBody "}")
		public Group getGroup() { return cGroup; }

		//{Description}
		public Action getDescriptionAction_0() { return cDescriptionAction_0; }

		//"description" style=ShapeStyleRef? "{" ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
		//")")? body=TextBody "}"
		public Group getGroup_1() { return cGroup_1; }

		//"description"
		public Keyword getDescriptionKeyword_1_0() { return cDescriptionKeyword_1_0; }

		//style=ShapeStyleRef?
		public Assignment getStyleAssignment_1_1() { return cStyleAssignment_1_1; }

		//ShapeStyleRef
		public RuleCall getStyleShapeStyleRefParserRuleCall_1_1_0() { return cStyleShapeStyleRefParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"align"
		public Keyword getAlignKeyword_1_3_0() { return cAlignKeyword_1_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }

		//("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//"horizontal"
		public Keyword getHorizontalKeyword_1_3_2_0() { return cHorizontalKeyword_1_3_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_2_1() { return cEqualsSignKeyword_1_3_2_1; }

		//hAlign=HAlign
		public Assignment getHAlignAssignment_1_3_2_2() { return cHAlignAssignment_1_3_2_2; }

		//HAlign
		public RuleCall getHAlignHAlignEnumRuleCall_1_3_2_2_0() { return cHAlignHAlignEnumRuleCall_1_3_2_2_0; }

		//","
		public Keyword getCommaKeyword_1_3_2_3() { return cCommaKeyword_1_3_2_3; }

		//"vertical"
		public Keyword getVerticalKeyword_1_3_2_4() { return cVerticalKeyword_1_3_2_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_2_5() { return cEqualsSignKeyword_1_3_2_5; }

		//vAlign=VAlign
		public Assignment getVAlignAssignment_1_3_2_6() { return cVAlignAssignment_1_3_2_6; }

		//VAlign
		public RuleCall getVAlignVAlignEnumRuleCall_1_3_2_6_0() { return cVAlignVAlignEnumRuleCall_1_3_2_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_3() { return cRightParenthesisKeyword_1_3_3; }

		//body=TextBody
		public Assignment getBodyAssignment_1_4() { return cBodyAssignment_1_4; }

		//TextBody
		public RuleCall getBodyTextBodyParserRuleCall_1_4_0() { return cBodyTextBodyParserRuleCall_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}

	public class ShapeLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cSizeMinKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cWidthKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cMinwidthAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cMinwidthINTTerminalRuleCall_1_0_4_0 = (RuleCall)cMinwidthAssignment_1_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Keyword cHeightKeyword_1_0_6 = (Keyword)cGroup_1_0.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Assignment cMinheightAssignment_1_0_8 = (Assignment)cGroup_1_0.eContents().get(8);
		private final RuleCall cMinheightINTTerminalRuleCall_1_0_8_0 = (RuleCall)cMinheightAssignment_1_0_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_9 = (Keyword)cGroup_1_0.eContents().get(9);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cSizeMaxKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cWidthKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cMaxwidthAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cMaxwidthINTTerminalRuleCall_1_1_4_0 = (RuleCall)cMaxwidthAssignment_1_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Keyword cHeightKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_1_7 = (Keyword)cGroup_1_1.eContents().get(7);
		private final Assignment cMaxheightAssignment_1_1_8 = (Assignment)cGroup_1_1.eContents().get(8);
		private final RuleCall cMaxheightINTTerminalRuleCall_1_1_8_0 = (RuleCall)cMaxheightAssignment_1_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_9 = (Keyword)cGroup_1_1.eContents().get(9);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cStretchingKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cHorizontalKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cStretchHAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cStretchHBooleanParserRuleCall_1_2_4_0 = (RuleCall)cStretchHAssignment_1_2_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_5 = (Keyword)cGroup_1_2.eContents().get(5);
		private final Keyword cVerticalKeyword_1_2_6 = (Keyword)cGroup_1_2.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_2_7 = (Keyword)cGroup_1_2.eContents().get(7);
		private final Assignment cStretchVAssignment_1_2_8 = (Assignment)cGroup_1_2.eContents().get(8);
		private final RuleCall cStretchVBooleanParserRuleCall_1_2_8_0 = (RuleCall)cStretchVAssignment_1_2_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_9 = (Keyword)cGroup_1_2.eContents().get(9);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cProportionalKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cProportionalAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cProportionalBooleanParserRuleCall_1_3_2_0 = (RuleCall)cProportionalAssignment_1_3_2.eContents().get(0);
		
		//ShapeLayout:
		//	{ShapeLayout} (("size-min" "(" "width" "=" minwidth=INT "," "height" "=" minheight=INT ")")? & ("size-max" "(" "width"
		//	"=" maxwidth=INT "," "height" "=" maxheight=INT ")")? & ("stretching" "(" "horizontal" "=" stretchH=Boolean ","
		//	"vertical" "=" stretchV=Boolean ")")? & ("proportional" "=" proportional=Boolean)?);
		public ParserRule getRule() { return rule; }

		//{ShapeLayout} (("size-min" "(" "width" "=" minwidth=INT "," "height" "=" minheight=INT ")")? & ("size-max" "(" "width"
		//"=" maxwidth=INT "," "height" "=" maxheight=INT ")")? & ("stretching" "(" "horizontal" "=" stretchH=Boolean ","
		//"vertical" "=" stretchV=Boolean ")")? & ("proportional" "=" proportional=Boolean)?)
		public Group getGroup() { return cGroup; }

		//{ShapeLayout}
		public Action getShapeLayoutAction_0() { return cShapeLayoutAction_0; }

		//("size-min" "(" "width" "=" minwidth=INT "," "height" "=" minheight=INT ")")? & ("size-max" "(" "width" "=" maxwidth=INT
		//"," "height" "=" maxheight=INT ")")? & ("stretching" "(" "horizontal" "=" stretchH=Boolean "," "vertical" "="
		//stretchV=Boolean ")")? & ("proportional" "=" proportional=Boolean)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//("size-min" "(" "width" "=" minwidth=INT "," "height" "=" minheight=INT ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"size-min"
		public Keyword getSizeMinKeyword_1_0_0() { return cSizeMinKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//"width"
		public Keyword getWidthKeyword_1_0_2() { return cWidthKeyword_1_0_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_3() { return cEqualsSignKeyword_1_0_3; }

		//minwidth=INT
		public Assignment getMinwidthAssignment_1_0_4() { return cMinwidthAssignment_1_0_4; }

		//INT
		public RuleCall getMinwidthINTTerminalRuleCall_1_0_4_0() { return cMinwidthINTTerminalRuleCall_1_0_4_0; }

		//","
		public Keyword getCommaKeyword_1_0_5() { return cCommaKeyword_1_0_5; }

		//"height"
		public Keyword getHeightKeyword_1_0_6() { return cHeightKeyword_1_0_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_7() { return cEqualsSignKeyword_1_0_7; }

		//minheight=INT
		public Assignment getMinheightAssignment_1_0_8() { return cMinheightAssignment_1_0_8; }

		//INT
		public RuleCall getMinheightINTTerminalRuleCall_1_0_8_0() { return cMinheightINTTerminalRuleCall_1_0_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_9() { return cRightParenthesisKeyword_1_0_9; }

		//("size-max" "(" "width" "=" maxwidth=INT "," "height" "=" maxheight=INT ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"size-max"
		public Keyword getSizeMaxKeyword_1_1_0() { return cSizeMaxKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//"width"
		public Keyword getWidthKeyword_1_1_2() { return cWidthKeyword_1_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_3() { return cEqualsSignKeyword_1_1_3; }

		//maxwidth=INT
		public Assignment getMaxwidthAssignment_1_1_4() { return cMaxwidthAssignment_1_1_4; }

		//INT
		public RuleCall getMaxwidthINTTerminalRuleCall_1_1_4_0() { return cMaxwidthINTTerminalRuleCall_1_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_1_5() { return cCommaKeyword_1_1_5; }

		//"height"
		public Keyword getHeightKeyword_1_1_6() { return cHeightKeyword_1_1_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_7() { return cEqualsSignKeyword_1_1_7; }

		//maxheight=INT
		public Assignment getMaxheightAssignment_1_1_8() { return cMaxheightAssignment_1_1_8; }

		//INT
		public RuleCall getMaxheightINTTerminalRuleCall_1_1_8_0() { return cMaxheightINTTerminalRuleCall_1_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_9() { return cRightParenthesisKeyword_1_1_9; }

		//("stretching" "(" "horizontal" "=" stretchH=Boolean "," "vertical" "=" stretchV=Boolean ")")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"stretching"
		public Keyword getStretchingKeyword_1_2_0() { return cStretchingKeyword_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_1() { return cLeftParenthesisKeyword_1_2_1; }

		//"horizontal"
		public Keyword getHorizontalKeyword_1_2_2() { return cHorizontalKeyword_1_2_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_3() { return cEqualsSignKeyword_1_2_3; }

		//stretchH=Boolean
		public Assignment getStretchHAssignment_1_2_4() { return cStretchHAssignment_1_2_4; }

		//Boolean
		public RuleCall getStretchHBooleanParserRuleCall_1_2_4_0() { return cStretchHBooleanParserRuleCall_1_2_4_0; }

		//","
		public Keyword getCommaKeyword_1_2_5() { return cCommaKeyword_1_2_5; }

		//"vertical"
		public Keyword getVerticalKeyword_1_2_6() { return cVerticalKeyword_1_2_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_7() { return cEqualsSignKeyword_1_2_7; }

		//stretchV=Boolean
		public Assignment getStretchVAssignment_1_2_8() { return cStretchVAssignment_1_2_8; }

		//Boolean
		public RuleCall getStretchVBooleanParserRuleCall_1_2_8_0() { return cStretchVBooleanParserRuleCall_1_2_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_9() { return cRightParenthesisKeyword_1_2_9; }

		//("proportional" "=" proportional=Boolean)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"proportional"
		public Keyword getProportionalKeyword_1_3_0() { return cProportionalKeyword_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_1() { return cEqualsSignKeyword_1_3_1; }

		//proportional=Boolean
		public Assignment getProportionalAssignment_1_3_2() { return cProportionalAssignment_1_3_2; }

		//Boolean
		public RuleCall getProportionalBooleanParserRuleCall_1_3_2_0() { return cProportionalBooleanParserRuleCall_1_3_2_0; }
	}

	public class RectangleEllipseLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RectangleEllipseLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRectangleEllipseLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cCommonAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cCommonCommonLayoutParserRuleCall_1_0_0 = (RuleCall)cCommonAssignment_1_0.eContents().get(0);
		private final Assignment cLayoutAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_1_1_0 = (RuleCall)cLayoutAssignment_1_1.eContents().get(0);
		
		//RectangleEllipseLayout:
		//	{RectangleEllipseLayout} (common=CommonLayout & layout=ShapestyleLayout?);
		public ParserRule getRule() { return rule; }

		//{RectangleEllipseLayout} (common=CommonLayout & layout=ShapestyleLayout?)
		public Group getGroup() { return cGroup; }

		//{RectangleEllipseLayout}
		public Action getRectangleEllipseLayoutAction_0() { return cRectangleEllipseLayoutAction_0; }

		//common=CommonLayout & layout=ShapestyleLayout?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//common=CommonLayout
		public Assignment getCommonAssignment_1_0() { return cCommonAssignment_1_0; }

		//CommonLayout
		public RuleCall getCommonCommonLayoutParserRuleCall_1_0_0() { return cCommonCommonLayoutParserRuleCall_1_0_0; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_1_1() { return cLayoutAssignment_1_1; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_1_1_0() { return cLayoutShapestyleLayoutParserRuleCall_1_1_0; }
	}

	public class LineLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LineLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPointPointParserRuleCall_1_0_0 = (RuleCall)cPointAssignment_1_0.eContents().get(0);
		private final Assignment cPointAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPointPointParserRuleCall_1_1_0 = (RuleCall)cPointAssignment_1_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		
		//LineLayout:
		//	{LineLayout} (point+=Point point+=Point layout=ShapestyleLayout?);
		public ParserRule getRule() { return rule; }

		//{LineLayout} (point+=Point point+=Point layout=ShapestyleLayout?)
		public Group getGroup() { return cGroup; }

		//{LineLayout}
		public Action getLineLayoutAction_0() { return cLineLayoutAction_0; }

		//point+=Point point+=Point layout=ShapestyleLayout?
		public Group getGroup_1() { return cGroup_1; }

		//point+=Point
		public Assignment getPointAssignment_1_0() { return cPointAssignment_1_0; }

		//Point
		public RuleCall getPointPointParserRuleCall_1_0_0() { return cPointPointParserRuleCall_1_0_0; }

		//point+=Point
		public Assignment getPointAssignment_1_1() { return cPointAssignment_1_1; }

		//Point
		public RuleCall getPointPointParserRuleCall_1_1_0() { return cPointPointParserRuleCall_1_1_0; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_1_2_0() { return cLayoutShapestyleLayoutParserRuleCall_1_2_0; }
	}

	public class PolyLineLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PolyLineLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolyLineLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPointPointParserRuleCall_1_0_0 = (RuleCall)cPointAssignment_1_0.eContents().get(0);
		private final Assignment cPointAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPointPointParserRuleCall_1_1_0 = (RuleCall)cPointAssignment_1_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		
		//PolyLineLayout:
		//	{PolyLineLayout} (point+=Point point+=Point+ layout=ShapestyleLayout?);
		public ParserRule getRule() { return rule; }

		//{PolyLineLayout} (point+=Point point+=Point+ layout=ShapestyleLayout?)
		public Group getGroup() { return cGroup; }

		//{PolyLineLayout}
		public Action getPolyLineLayoutAction_0() { return cPolyLineLayoutAction_0; }

		//point+=Point point+=Point+ layout=ShapestyleLayout?
		public Group getGroup_1() { return cGroup_1; }

		//point+=Point
		public Assignment getPointAssignment_1_0() { return cPointAssignment_1_0; }

		//Point
		public RuleCall getPointPointParserRuleCall_1_0_0() { return cPointPointParserRuleCall_1_0_0; }

		//point+=Point+
		public Assignment getPointAssignment_1_1() { return cPointAssignment_1_1; }

		//Point
		public RuleCall getPointPointParserRuleCall_1_1_0() { return cPointPointParserRuleCall_1_1_0; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_1_2_0() { return cLayoutShapestyleLayoutParserRuleCall_1_2_0; }
	}

	public class RoundedRectangleLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoundedRectangleLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoundedRectangleLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cCommonAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cCommonCommonLayoutParserRuleCall_1_0_0 = (RuleCall)cCommonAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cCurveKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cWidthKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cCurveWidthAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cCurveWidthINTTerminalRuleCall_1_1_4_0 = (RuleCall)cCurveWidthAssignment_1_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Keyword cHeightKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_1_7 = (Keyword)cGroup_1_1.eContents().get(7);
		private final Assignment cCurveHeightAssignment_1_1_8 = (Assignment)cGroup_1_1.eContents().get(8);
		private final RuleCall cCurveHeightINTTerminalRuleCall_1_1_8_0 = (RuleCall)cCurveHeightAssignment_1_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_9 = (Keyword)cGroup_1_1.eContents().get(9);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		
		//RoundedRectangleLayout:
		//	{RoundedRectangleLayout} (common=CommonLayout & "curve" "(" "width" "=" curveWidth=INT "," "height" "="
		//	curveHeight=INT ")" & layout=ShapestyleLayout?);
		public ParserRule getRule() { return rule; }

		//{RoundedRectangleLayout} (common=CommonLayout & "curve" "(" "width" "=" curveWidth=INT "," "height" "=" curveHeight=INT
		//")" & layout=ShapestyleLayout?)
		public Group getGroup() { return cGroup; }

		//{RoundedRectangleLayout}
		public Action getRoundedRectangleLayoutAction_0() { return cRoundedRectangleLayoutAction_0; }

		//common=CommonLayout & "curve" "(" "width" "=" curveWidth=INT "," "height" "=" curveHeight=INT ")" &
		//layout=ShapestyleLayout?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//common=CommonLayout
		public Assignment getCommonAssignment_1_0() { return cCommonAssignment_1_0; }

		//CommonLayout
		public RuleCall getCommonCommonLayoutParserRuleCall_1_0_0() { return cCommonCommonLayoutParserRuleCall_1_0_0; }

		//"curve" "(" "width" "=" curveWidth=INT "," "height" "=" curveHeight=INT ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"curve"
		public Keyword getCurveKeyword_1_1_0() { return cCurveKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//"width"
		public Keyword getWidthKeyword_1_1_2() { return cWidthKeyword_1_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_3() { return cEqualsSignKeyword_1_1_3; }

		//curveWidth=INT
		public Assignment getCurveWidthAssignment_1_1_4() { return cCurveWidthAssignment_1_1_4; }

		//INT
		public RuleCall getCurveWidthINTTerminalRuleCall_1_1_4_0() { return cCurveWidthINTTerminalRuleCall_1_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_1_5() { return cCommaKeyword_1_1_5; }

		//"height"
		public Keyword getHeightKeyword_1_1_6() { return cHeightKeyword_1_1_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_7() { return cEqualsSignKeyword_1_1_7; }

		//curveHeight=INT
		public Assignment getCurveHeightAssignment_1_1_8() { return cCurveHeightAssignment_1_1_8; }

		//INT
		public RuleCall getCurveHeightINTTerminalRuleCall_1_1_8_0() { return cCurveHeightINTTerminalRuleCall_1_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_9() { return cRightParenthesisKeyword_1_1_9; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_1_2_0() { return cLayoutShapestyleLayoutParserRuleCall_1_2_0; }
	}

	public class TextLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cCommonAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cCommonCommonLayoutParserRuleCall_1_0_0 = (RuleCall)cCommonAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cAlignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cHorizontalKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		private final Assignment cHAlignAssignment_1_1_2_2 = (Assignment)cGroup_1_1_2.eContents().get(2);
		private final RuleCall cHAlignHAlignEnumRuleCall_1_1_2_2_0 = (RuleCall)cHAlignAssignment_1_1_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_2_3 = (Keyword)cGroup_1_1_2.eContents().get(3);
		private final Keyword cVerticalKeyword_1_1_2_4 = (Keyword)cGroup_1_1_2.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_1_2_5 = (Keyword)cGroup_1_1_2.eContents().get(5);
		private final Assignment cVAlignAssignment_1_1_2_6 = (Assignment)cGroup_1_1_2.eContents().get(6);
		private final RuleCall cVAlignVAlignEnumRuleCall_1_1_2_6_0 = (RuleCall)cVAlignAssignment_1_1_2_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cLayoutShapestyleLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		
		//TextLayout:
		//	{TextLayout} (common=CommonLayout & ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
		//	")")? & layout=ShapestyleLayout?);
		public ParserRule getRule() { return rule; }

		//{TextLayout} (common=CommonLayout & ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
		//")")? & layout=ShapestyleLayout?)
		public Group getGroup() { return cGroup; }

		//{TextLayout}
		public Action getTextLayoutAction_0() { return cTextLayoutAction_0; }

		//common=CommonLayout & ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)? ")")? &
		//layout=ShapestyleLayout?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//common=CommonLayout
		public Assignment getCommonAssignment_1_0() { return cCommonAssignment_1_0; }

		//CommonLayout
		public RuleCall getCommonCommonLayoutParserRuleCall_1_0_0() { return cCommonCommonLayoutParserRuleCall_1_0_0; }

		//("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)? ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"align"
		public Keyword getAlignKeyword_1_1_0() { return cAlignKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"horizontal"
		public Keyword getHorizontalKeyword_1_1_2_0() { return cHorizontalKeyword_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_2_1() { return cEqualsSignKeyword_1_1_2_1; }

		//hAlign=HAlign
		public Assignment getHAlignAssignment_1_1_2_2() { return cHAlignAssignment_1_1_2_2; }

		//HAlign
		public RuleCall getHAlignHAlignEnumRuleCall_1_1_2_2_0() { return cHAlignHAlignEnumRuleCall_1_1_2_2_0; }

		//","
		public Keyword getCommaKeyword_1_1_2_3() { return cCommaKeyword_1_1_2_3; }

		//"vertical"
		public Keyword getVerticalKeyword_1_1_2_4() { return cVerticalKeyword_1_1_2_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_2_5() { return cEqualsSignKeyword_1_1_2_5; }

		//vAlign=VAlign
		public Assignment getVAlignAssignment_1_1_2_6() { return cVAlignAssignment_1_1_2_6; }

		//VAlign
		public RuleCall getVAlignVAlignEnumRuleCall_1_1_2_6_0() { return cVAlignVAlignEnumRuleCall_1_1_2_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }

		//layout=ShapestyleLayout?
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//ShapestyleLayout
		public RuleCall getLayoutShapestyleLayoutParserRuleCall_1_2_0() { return cLayoutShapestyleLayoutParserRuleCall_1_2_0; }
	}

	public class ShapestyleLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapestyleLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapestyleLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cStyleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLayoutStyleLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ShapestyleLayout:
		//	{ShapestyleLayout} ("style" "(" layout=StyleLayout ")");
		public ParserRule getRule() { return rule; }

		//{ShapestyleLayout} ("style" "(" layout=StyleLayout ")")
		public Group getGroup() { return cGroup; }

		//{ShapestyleLayout}
		public Action getShapestyleLayoutAction_0() { return cShapestyleLayoutAction_0; }

		//"style" "(" layout=StyleLayout ")"
		public Group getGroup_1() { return cGroup_1; }

		//"style"
		public Keyword getStyleKeyword_1_0() { return cStyleKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//layout=StyleLayout
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//StyleLayout
		public RuleCall getLayoutStyleLayoutParserRuleCall_1_2_0() { return cLayoutStyleLayoutParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ShapeStyleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShapeStyleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cJAVAKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cJavaStyleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cJavaStyleAssignment_1_0_1.eContents().get(0);
		private final Assignment cDslStyleAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cDslStyleStyleCrossReference_1_1_0 = (CrossReference)cDslStyleAssignment_1_1.eContents().get(0);
		private final RuleCall cDslStyleStyleIDTerminalRuleCall_1_1_0_1 = (RuleCall)cDslStyleStyleCrossReference_1_1_0.eContents().get(1);
		
		//ShapeStyleRef:
		//	"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]);
		public ParserRule getRule() { return rule; }

		//"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style])
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//"JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"JAVA" javaStyle=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_1_0_0() { return cJAVAKeyword_1_0_0; }

		//javaStyle=JvmTypeReference
		public Assignment getJavaStyleAssignment_1_0_1() { return cJavaStyleAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0() { return cJavaStyleJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//dslStyle=[styles::Style]
		public Assignment getDslStyleAssignment_1_1() { return cDslStyleAssignment_1_1; }

		//[styles::Style]
		public CrossReference getDslStyleStyleCrossReference_1_1_0() { return cDslStyleStyleCrossReference_1_1_0; }

		//ID
		public RuleCall getDslStyleStyleIDTerminalRuleCall_1_1_0_1() { return cDslStyleStyleIDTerminalRuleCall_1_1_0_1; }
	}

	public class CommonLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommonLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cPositionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cXKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cXcorAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cXcorN_INTParserRuleCall_1_0_4_0 = (RuleCall)cXcorAssignment_1_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Keyword cYKeyword_1_0_6 = (Keyword)cGroup_1_0.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Assignment cYcorAssignment_1_0_8 = (Assignment)cGroup_1_0.eContents().get(8);
		private final RuleCall cYcorN_INTParserRuleCall_1_0_8_0 = (RuleCall)cYcorAssignment_1_0_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_9 = (Keyword)cGroup_1_0.eContents().get(9);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cSizeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cWidthKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cWidthAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cWidthINTTerminalRuleCall_1_1_4_0 = (RuleCall)cWidthAssignment_1_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final Keyword cHeightKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_1_7 = (Keyword)cGroup_1_1.eContents().get(7);
		private final Assignment cHeigthAssignment_1_1_8 = (Assignment)cGroup_1_1.eContents().get(8);
		private final RuleCall cHeigthINTTerminalRuleCall_1_1_8_0 = (RuleCall)cHeigthAssignment_1_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_9 = (Keyword)cGroup_1_1.eContents().get(9);
		
		//CommonLayout:
		//	{CommonLayout} (("position" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ")")? & "size" "(" "width" "=" width=INT ","
		//	"height" "=" heigth=INT ")");
		public ParserRule getRule() { return rule; }

		//{CommonLayout} (("position" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ")")? & "size" "(" "width" "=" width=INT ","
		//"height" "=" heigth=INT ")")
		public Group getGroup() { return cGroup; }

		//{CommonLayout}
		public Action getCommonLayoutAction_0() { return cCommonLayoutAction_0; }

		//("position" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ")")? & "size" "(" "width" "=" width=INT "," "height" "="
		//heigth=INT ")"
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//("position" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"position"
		public Keyword getPositionKeyword_1_0_0() { return cPositionKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//"x"
		public Keyword getXKeyword_1_0_2() { return cXKeyword_1_0_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_3() { return cEqualsSignKeyword_1_0_3; }

		//xcor=N_INT
		public Assignment getXcorAssignment_1_0_4() { return cXcorAssignment_1_0_4; }

		//N_INT
		public RuleCall getXcorN_INTParserRuleCall_1_0_4_0() { return cXcorN_INTParserRuleCall_1_0_4_0; }

		//","
		public Keyword getCommaKeyword_1_0_5() { return cCommaKeyword_1_0_5; }

		//"y"
		public Keyword getYKeyword_1_0_6() { return cYKeyword_1_0_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_7() { return cEqualsSignKeyword_1_0_7; }

		//ycor=N_INT
		public Assignment getYcorAssignment_1_0_8() { return cYcorAssignment_1_0_8; }

		//N_INT
		public RuleCall getYcorN_INTParserRuleCall_1_0_8_0() { return cYcorN_INTParserRuleCall_1_0_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_9() { return cRightParenthesisKeyword_1_0_9; }

		//"size" "(" "width" "=" width=INT "," "height" "=" heigth=INT ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"size"
		public Keyword getSizeKeyword_1_1_0() { return cSizeKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//"width"
		public Keyword getWidthKeyword_1_1_2() { return cWidthKeyword_1_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_3() { return cEqualsSignKeyword_1_1_3; }

		//width=INT
		public Assignment getWidthAssignment_1_1_4() { return cWidthAssignment_1_1_4; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_1_4_0() { return cWidthINTTerminalRuleCall_1_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_1_5() { return cCommaKeyword_1_1_5; }

		//"height"
		public Keyword getHeightKeyword_1_1_6() { return cHeightKeyword_1_1_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_7() { return cEqualsSignKeyword_1_1_7; }

		//heigth=INT
		public Assignment getHeigthAssignment_1_1_8() { return cHeigthAssignment_1_1_8; }

		//INT
		public RuleCall getHeigthINTTerminalRuleCall_1_1_8_0() { return cHeigthINTTerminalRuleCall_1_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_9() { return cRightParenthesisKeyword_1_1_9; }
	}

	public class TextBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////value=TextBodyValue;
		//TextBody:
		//	{TextBody} "id" "=" value=ID;
		public ParserRule getRule() { return rule; }

		//{TextBody} "id" "=" value=ID
		public Group getGroup() { return cGroup; }

		//{TextBody}
		public Action getTextBodyAction_0() { return cTextBodyAction_0; }

		//"id"
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=ID
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPointKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cXKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cXcorAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cXcorN_INTParserRuleCall_1_4_0 = (RuleCall)cXcorAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cYKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cYcorAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cYcorN_INTParserRuleCall_1_8_0 = (RuleCall)cYcorAssignment_1_8.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cGroup_1.eContents().get(9);
		private final Keyword cCommaKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Keyword cCurveBeforeKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_9_2 = (Keyword)cGroup_1_9.eContents().get(2);
		private final Assignment cCurveBeforeAssignment_1_9_3 = (Assignment)cGroup_1_9.eContents().get(3);
		private final RuleCall cCurveBeforeINTTerminalRuleCall_1_9_3_0 = (RuleCall)cCurveBeforeAssignment_1_9_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_9_4 = (Keyword)cGroup_1_9.eContents().get(4);
		private final Keyword cCurveAfterKeyword_1_9_5 = (Keyword)cGroup_1_9.eContents().get(5);
		private final Keyword cEqualsSignKeyword_1_9_6 = (Keyword)cGroup_1_9.eContents().get(6);
		private final Assignment cCurveAfterAssignment_1_9_7 = (Assignment)cGroup_1_9.eContents().get(7);
		private final RuleCall cCurveAfterINTTerminalRuleCall_1_9_7_0 = (RuleCall)cCurveAfterAssignment_1_9_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_10 = (Keyword)cGroup_1.eContents().get(10);
		
		////TextBodyValue:
		////  TextBodyParameter | TextBodyString;
		////
		////TextBodyString:
		////  param=STRING;
		////
		////TextBodyParameter:
		////  param=[types::JvmIdentifiableElement] ("formatting" format=ID)?;
		//Point:
		//	{Point} ("point" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ("," "curveBefore" "=" curveBefore=INT "," "curveAfter"
		//	"=" curveAfter=INT)? ")");
		public ParserRule getRule() { return rule; }

		//{Point} ("point" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ("," "curveBefore" "=" curveBefore=INT "," "curveAfter"
		//"=" curveAfter=INT)? ")")
		public Group getGroup() { return cGroup; }

		//{Point}
		public Action getPointAction_0() { return cPointAction_0; }

		//"point" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ("," "curveBefore" "=" curveBefore=INT "," "curveAfter" "="
		//curveAfter=INT)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"point"
		public Keyword getPointKeyword_1_0() { return cPointKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//"x"
		public Keyword getXKeyword_1_2() { return cXKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//xcor=N_INT
		public Assignment getXcorAssignment_1_4() { return cXcorAssignment_1_4; }

		//N_INT
		public RuleCall getXcorN_INTParserRuleCall_1_4_0() { return cXcorN_INTParserRuleCall_1_4_0; }

		//","
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//"y"
		public Keyword getYKeyword_1_6() { return cYKeyword_1_6; }

		//"="
		public Keyword getEqualsSignKeyword_1_7() { return cEqualsSignKeyword_1_7; }

		//ycor=N_INT
		public Assignment getYcorAssignment_1_8() { return cYcorAssignment_1_8; }

		//N_INT
		public RuleCall getYcorN_INTParserRuleCall_1_8_0() { return cYcorN_INTParserRuleCall_1_8_0; }

		//("," "curveBefore" "=" curveBefore=INT "," "curveAfter" "=" curveAfter=INT)?
		public Group getGroup_1_9() { return cGroup_1_9; }

		//","
		public Keyword getCommaKeyword_1_9_0() { return cCommaKeyword_1_9_0; }

		//"curveBefore"
		public Keyword getCurveBeforeKeyword_1_9_1() { return cCurveBeforeKeyword_1_9_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_9_2() { return cEqualsSignKeyword_1_9_2; }

		//curveBefore=INT
		public Assignment getCurveBeforeAssignment_1_9_3() { return cCurveBeforeAssignment_1_9_3; }

		//INT
		public RuleCall getCurveBeforeINTTerminalRuleCall_1_9_3_0() { return cCurveBeforeINTTerminalRuleCall_1_9_3_0; }

		//","
		public Keyword getCommaKeyword_1_9_4() { return cCommaKeyword_1_9_4; }

		//"curveAfter"
		public Keyword getCurveAfterKeyword_1_9_5() { return cCurveAfterKeyword_1_9_5; }

		//"="
		public Keyword getEqualsSignKeyword_1_9_6() { return cEqualsSignKeyword_1_9_6; }

		//curveAfter=INT
		public Assignment getCurveAfterAssignment_1_9_7() { return cCurveAfterAssignment_1_9_7; }

		//INT
		public RuleCall getCurveAfterINTTerminalRuleCall_1_9_7_0() { return cCurveAfterINTTerminalRuleCall_1_9_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_10() { return cRightParenthesisKeyword_1_10; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean returns ecore::EBooleanObject:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class N_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "N_INT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//N_INT returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class CompartmentLayoutElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompartmentLayout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFIXEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFIXEDFixedKeyword_0_0 = (Keyword)cFIXEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERTICALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERTICALVerticalKeyword_1_0 = (Keyword)cVERTICALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHORIZONTALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHORIZONTALHorizontalKeyword_2_0 = (Keyword)cHORIZONTALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFITEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFITFitKeyword_3_0 = (Keyword)cFITEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompartmentLayout:
		//	FIXED="fixed" | VERTICAL="vertical" | HORIZONTAL="horizontal" | FIT="fit";
		public EnumRule getRule() { return rule; }

		//FIXED="fixed" | VERTICAL="vertical" | HORIZONTAL="horizontal" | FIT="fit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FIXED="fixed"
		public EnumLiteralDeclaration getFIXEDEnumLiteralDeclaration_0() { return cFIXEDEnumLiteralDeclaration_0; }

		//"fixed"
		public Keyword getFIXEDFixedKeyword_0_0() { return cFIXEDFixedKeyword_0_0; }

		//VERTICAL="vertical"
		public EnumLiteralDeclaration getVERTICALEnumLiteralDeclaration_1() { return cVERTICALEnumLiteralDeclaration_1; }

		//"vertical"
		public Keyword getVERTICALVerticalKeyword_1_0() { return cVERTICALVerticalKeyword_1_0; }

		//HORIZONTAL="horizontal"
		public EnumLiteralDeclaration getHORIZONTALEnumLiteralDeclaration_2() { return cHORIZONTALEnumLiteralDeclaration_2; }

		//"horizontal"
		public Keyword getHORIZONTALHorizontalKeyword_2_0() { return cHORIZONTALHorizontalKeyword_2_0; }

		//FIT="fit"
		public EnumLiteralDeclaration getFITEnumLiteralDeclaration_3() { return cFITEnumLiteralDeclaration_3; }

		//"fit"
		public Keyword getFITFitKeyword_3_0() { return cFITFitKeyword_3_0; }
	}

	public class HAlignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HAlign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCENTERCenterKeyword_1_0 = (Keyword)cCENTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRightKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HAlign:
		//	LEFT="left" | CENTER="center" | RIGHT="right";
		public EnumRule getRule() { return rule; }

		//LEFT="left" | CENTER="center" | RIGHT="right"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT="left"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }

		//"left"
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }

		//CENTER="center"
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_1() { return cCENTEREnumLiteralDeclaration_1; }

		//"center"
		public Keyword getCENTERCenterKeyword_1_0() { return cCENTERCenterKeyword_1_0; }

		//RIGHT="right"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }

		//"right"
		public Keyword getRIGHTRightKeyword_2_0() { return cRIGHTRightKeyword_2_0; }
	}

	public class VAlignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VAlign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTOPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTOPTopKeyword_0_0 = (Keyword)cTOPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMIDDLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMIDDLEMiddleKeyword_1_0 = (Keyword)cMIDDLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOTTOMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOTTOMBottomKeyword_2_0 = (Keyword)cBOTTOMEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VAlign:
		//	TOP="top" | MIDDLE="middle" | BOTTOM="bottom";
		public EnumRule getRule() { return rule; }

		//TOP="top" | MIDDLE="middle" | BOTTOM="bottom"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TOP="top"
		public EnumLiteralDeclaration getTOPEnumLiteralDeclaration_0() { return cTOPEnumLiteralDeclaration_0; }

		//"top"
		public Keyword getTOPTopKeyword_0_0() { return cTOPTopKeyword_0_0; }

		//MIDDLE="middle"
		public EnumLiteralDeclaration getMIDDLEEnumLiteralDeclaration_1() { return cMIDDLEEnumLiteralDeclaration_1; }

		//"middle"
		public Keyword getMIDDLEMiddleKeyword_1_0() { return cMIDDLEMiddleKeyword_1_0; }

		//BOTTOM="bottom"
		public EnumLiteralDeclaration getBOTTOMEnumLiteralDeclaration_2() { return cBOTTOMEnumLiteralDeclaration_2; }

		//"bottom"
		public Keyword getBOTTOMBottomKeyword_2_0() { return cBOTTOMBottomKeyword_2_0; }
	}

	public class ConnectionStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFreeformEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFreeformFreeformKeyword_0_0 = (Keyword)cFreeformEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManhattenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManhattenManhattenKeyword_1_0 = (Keyword)cManhattenEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConnectionStyle:
		//	freeform | manhatten;
		public EnumRule getRule() { return rule; }

		//freeform | manhatten
		public Alternatives getAlternatives() { return cAlternatives; }

		//freeform
		public EnumLiteralDeclaration getFreeformEnumLiteralDeclaration_0() { return cFreeformEnumLiteralDeclaration_0; }

		//"freeform"
		public Keyword getFreeformFreeformKeyword_0_0() { return cFreeformFreeformKeyword_0_0; }

		//manhatten
		public EnumLiteralDeclaration getManhattenEnumLiteralDeclaration_1() { return cManhattenEnumLiteralDeclaration_1; }

		//"manhatten"
		public Keyword getManhattenManhattenKeyword_1_0() { return cManhattenManhattenKeyword_1_0; }
	}

	public class AnchorPredefiniedEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnchorPredefiniedEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCenterCenterKeyword_0_0 = (Keyword)cCenterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCornersEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCornersCornersKeyword_1_0 = (Keyword)cCornersEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AnchorPredefiniedEnum:
		//	center | corners;
		public EnumRule getRule() { return rule; }

		//center | corners
		public Alternatives getAlternatives() { return cAlternatives; }

		//center
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_0() { return cCenterEnumLiteralDeclaration_0; }

		//"center"
		public Keyword getCenterCenterKeyword_0_0() { return cCenterCenterKeyword_0_0; }

		//corners
		public EnumLiteralDeclaration getCornersEnumLiteralDeclaration_1() { return cCornersEnumLiteralDeclaration_1; }

		//"corners"
		public Keyword getCornersCornersKeyword_1_0() { return cCornersCornersKeyword_1_0; }
	}

	public class TextTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TextType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDefaultTextKeyword_0_0 = (Keyword)cDefaultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMultilineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMultilineWrappedTextKeyword_1_0 = (Keyword)cMultilineEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TextType:
		//	default="text" | multiline="wrapped-text";
		public EnumRule getRule() { return rule; }

		//default="text" | multiline="wrapped-text"
		public Alternatives getAlternatives() { return cAlternatives; }

		//default="text"
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_0() { return cDefaultEnumLiteralDeclaration_0; }

		//"text"
		public Keyword getDefaultTextKeyword_0_0() { return cDefaultTextKeyword_0_0; }

		//multiline="wrapped-text"
		public EnumLiteralDeclaration getMultilineEnumLiteralDeclaration_1() { return cMultilineEnumLiteralDeclaration_1; }

		//"wrapped-text"
		public Keyword getMultilineWrappedTextKeyword_1_0() { return cMultilineWrappedTextKeyword_1_0; }
	}
	
	private ShapeContainerElements pShapeContainer;
	private ImportElements pImport;
	private ShapesQualifiedNameWithWildCardElements pShapesQualifiedNameWithWildCard;
	private ShapeContainerElementElements pShapeContainerElement;
	private ConnectionDefinitionElements pConnectionDefinition;
	private ShapeDefinitionElements pShapeDefinition;
	private PlacingDefinitionElements pPlacingDefinition;
	private AnchorElements pAnchor;
	private AnchorTypeElements pAnchorType;
	private AnchorPredefiniedElements pAnchorPredefinied;
	private AnchorManualElements pAnchorManual;
	private AnchorPositionElements pAnchorPosition;
	private AnchorPositionPosElements pAnchorPositionPos;
	private AnchorRelativePositionElements pAnchorRelativePosition;
	private AnchorFixPointPositionElements pAnchorFixPointPosition;
	private ShapeElements pShape;
	private ShapeConnectionElements pShapeConnection;
	private CDLineElements pCDLine;
	private CDPolylineElements pCDPolyline;
	private CDRectangleElements pCDRectangle;
	private CDRoundedRectangleElements pCDRoundedRectangle;
	private CDPolygonElements pCDPolygon;
	private CDEllipseElements pCDEllipse;
	private CDTextElements pCDText;
	private LineElements pLine;
	private PolylineElements pPolyline;
	private RectangleElements pRectangle;
	private RoundedRectangleElements pRoundedRectangle;
	private PolygonElements pPolygon;
	private EllipseElements pEllipse;
	private TextElements pText;
	private CompartmentInfoElements pCompartmentInfo;
	private CompartmentLayoutElements unknownRuleCompartmentLayout;
	private CompartmentElements pCompartment;
	private CompartmentShapeElements pCompartmentShape;
	private CompartmentRectangleElements pCompartmentRectangle;
	private CompartmentRoundedRectangleElements pCompartmentRoundedRectangle;
	private CompartmentPolygonElements pCompartmentPolygon;
	private CompartmentEllipseElements pCompartmentEllipse;
	private DescriptionElements pDescription;
	private ShapeLayoutElements pShapeLayout;
	private RectangleEllipseLayoutElements pRectangleEllipseLayout;
	private LineLayoutElements pLineLayout;
	private PolyLineLayoutElements pPolyLineLayout;
	private RoundedRectangleLayoutElements pRoundedRectangleLayout;
	private TextLayoutElements pTextLayout;
	private ShapestyleLayoutElements pShapestyleLayout;
	private ShapeStyleRefElements pShapeStyleRef;
	private CommonLayoutElements pCommonLayout;
	private TextBodyElements pTextBody;
	private PointElements pPoint;
	private BooleanElements pBoolean;
	private HAlignElements unknownRuleHAlign;
	private VAlignElements unknownRuleVAlign;
	private ConnectionStyleElements unknownRuleConnectionStyle;
	private AnchorPredefiniedEnumElements unknownRuleAnchorPredefiniedEnum;
	private TextTypeElements unknownRuleTextType;
	private N_INTElements pN_INT;
	
	private final Grammar grammar;

	private StyleGrammarAccess gaStyle;

	@Inject
	public ShapeGrammarAccess(GrammarProvider grammarProvider,
		StyleGrammarAccess gaStyle) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaStyle = gaStyle;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.spray.shapes.Shape".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public StyleGrammarAccess getStyleGrammarAccess() {
		return gaStyle;
	}

	
	//ShapeContainer:
	//	imports+=Import* shapeContainerElement+=ShapeContainerElement*;
	public ShapeContainerElements getShapeContainerAccess() {
		return (pShapeContainer != null) ? pShapeContainer : (pShapeContainer = new ShapeContainerElements());
	}
	
	public ParserRule getShapeContainerRule() {
		return getShapeContainerAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=ShapesQualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ShapesQualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public ShapesQualifiedNameWithWildCardElements getShapesQualifiedNameWithWildCardAccess() {
		return (pShapesQualifiedNameWithWildCard != null) ? pShapesQualifiedNameWithWildCard : (pShapesQualifiedNameWithWildCard = new ShapesQualifiedNameWithWildCardElements());
	}
	
	public ParserRule getShapesQualifiedNameWithWildCardRule() {
		return getShapesQualifiedNameWithWildCardAccess().getRule();
	}

	//ShapeContainerElement:
	//	ShapeDefinition | ConnectionDefinition;
	public ShapeContainerElementElements getShapeContainerElementAccess() {
		return (pShapeContainerElement != null) ? pShapeContainerElement : (pShapeContainerElement = new ShapeContainerElementElements());
	}
	
	public ParserRule getShapeContainerElementRule() {
		return getShapeContainerElementAccess().getRule();
	}

	//ConnectionDefinition:
	//	"connection" name=ID style=ShapeStyleRef? "{" ("connection-type" connectionStyle=ConnectionStyle)?
	//	layout=ShapestyleLayout? placing+=PlacingDefinition* "}";
	public ConnectionDefinitionElements getConnectionDefinitionAccess() {
		return (pConnectionDefinition != null) ? pConnectionDefinition : (pConnectionDefinition = new ConnectionDefinitionElements());
	}
	
	public ParserRule getConnectionDefinitionRule() {
		return getConnectionDefinitionAccess().getRule();
	}

	//ShapeDefinition:
	//	"shape" name=ID style=ShapeStyleRef? "{" shapeLayout=ShapeLayout shape+=Shape+ description=Description? anchor=Anchor?
	//	"}";
	public ShapeDefinitionElements getShapeDefinitionAccess() {
		return (pShapeDefinition != null) ? pShapeDefinition : (pShapeDefinition = new ShapeDefinitionElements());
	}
	
	public ParserRule getShapeDefinitionRule() {
		return getShapeDefinitionAccess().getRule();
	}

	//PlacingDefinition:
	//	"placing" "{" "position" "(" "offset" "=" offset=DOUBLE ("," "radius" "=" distance=INT "," "angle" "=" angle=INT)? ")"
	//	shapeCon=ShapeConnection "}";
	public PlacingDefinitionElements getPlacingDefinitionAccess() {
		return (pPlacingDefinition != null) ? pPlacingDefinition : (pPlacingDefinition = new PlacingDefinitionElements());
	}
	
	public ParserRule getPlacingDefinitionRule() {
		return getPlacingDefinitionAccess().getRule();
	}

	//Anchor:
	//	"anchor" type=AnchorType;
	public AnchorElements getAnchorAccess() {
		return (pAnchor != null) ? pAnchor : (pAnchor = new AnchorElements());
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}

	//AnchorType:
	//	AnchorPredefinied | AnchorManual;
	public AnchorTypeElements getAnchorTypeAccess() {
		return (pAnchorType != null) ? pAnchorType : (pAnchorType = new AnchorTypeElements());
	}
	
	public ParserRule getAnchorTypeRule() {
		return getAnchorTypeAccess().getRule();
	}

	//AnchorPredefinied:
	//	value=AnchorPredefiniedEnum;
	public AnchorPredefiniedElements getAnchorPredefiniedAccess() {
		return (pAnchorPredefinied != null) ? pAnchorPredefinied : (pAnchorPredefinied = new AnchorPredefiniedElements());
	}
	
	public ParserRule getAnchorPredefiniedRule() {
		return getAnchorPredefiniedAccess().getRule();
	}

	//AnchorManual:
	//	"{" position+=AnchorPosition+ "}";
	public AnchorManualElements getAnchorManualAccess() {
		return (pAnchorManual != null) ? pAnchorManual : (pAnchorManual = new AnchorManualElements());
	}
	
	public ParserRule getAnchorManualRule() {
		return getAnchorManualAccess().getRule();
	}

	//AnchorPosition:
	//	"position" "(" pos=AnchorPositionPos ")";
	public AnchorPositionElements getAnchorPositionAccess() {
		return (pAnchorPosition != null) ? pAnchorPosition : (pAnchorPosition = new AnchorPositionElements());
	}
	
	public ParserRule getAnchorPositionRule() {
		return getAnchorPositionAccess().getRule();
	}

	//AnchorPositionPos:
	//	AnchorRelativePosition | AnchorFixPointPosition;
	public AnchorPositionPosElements getAnchorPositionPosAccess() {
		return (pAnchorPositionPos != null) ? pAnchorPositionPos : (pAnchorPositionPos = new AnchorPositionPosElements());
	}
	
	public ParserRule getAnchorPositionPosRule() {
		return getAnchorPositionPosAccess().getRule();
	}

	//AnchorRelativePosition:
	//	"xoffset" "=" xoffset=DOUBLE "," "yoffset" "=" yoffset=DOUBLE;
	public AnchorRelativePositionElements getAnchorRelativePositionAccess() {
		return (pAnchorRelativePosition != null) ? pAnchorRelativePosition : (pAnchorRelativePosition = new AnchorRelativePositionElements());
	}
	
	public ParserRule getAnchorRelativePositionRule() {
		return getAnchorRelativePositionAccess().getRule();
	}

	//AnchorFixPointPosition:
	//	"x" "=" xcor=INT "," "y" "=" ycor=INT;
	public AnchorFixPointPositionElements getAnchorFixPointPositionAccess() {
		return (pAnchorFixPointPosition != null) ? pAnchorFixPointPosition : (pAnchorFixPointPosition = new AnchorFixPointPositionElements());
	}
	
	public ParserRule getAnchorFixPointPositionRule() {
		return getAnchorFixPointPositionAccess().getRule();
	}

	//Shape:
	//	Line | Polyline | Rectangle | RoundedRectangle | Polygon | Ellipse | Text;
	public ShapeElements getShapeAccess() {
		return (pShape != null) ? pShape : (pShape = new ShapeElements());
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}

	//ShapeConnection:
	//	CDLine | CDPolyline | CDRectangle | CDRoundedRectangle | CDPolygon | CDEllipse | CDText;
	public ShapeConnectionElements getShapeConnectionAccess() {
		return (pShapeConnection != null) ? pShapeConnection : (pShapeConnection = new ShapeConnectionElements());
	}
	
	public ParserRule getShapeConnectionRule() {
		return getShapeConnectionAccess().getRule();
	}

	//CDLine:
	//	{CDLine} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}");
	public CDLineElements getCDLineAccess() {
		return (pCDLine != null) ? pCDLine : (pCDLine = new CDLineElements());
	}
	
	public ParserRule getCDLineRule() {
		return getCDLineAccess().getRule();
	}

	//CDPolyline:
	//	{CDPolyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
	public CDPolylineElements getCDPolylineAccess() {
		return (pCDPolyline != null) ? pCDPolyline : (pCDPolyline = new CDPolylineElements());
	}
	
	public ParserRule getCDPolylineRule() {
		return getCDPolylineAccess().getRule();
	}

	//CDRectangle:
	//	{CDRectangle} "rectangle" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}");
	public CDRectangleElements getCDRectangleAccess() {
		return (pCDRectangle != null) ? pCDRectangle : (pCDRectangle = new CDRectangleElements());
	}
	
	public ParserRule getCDRectangleRule() {
		return getCDRectangleAccess().getRule();
	}

	//CDRoundedRectangle:
	//	{CDRoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout "}");
	public CDRoundedRectangleElements getCDRoundedRectangleAccess() {
		return (pCDRoundedRectangle != null) ? pCDRoundedRectangle : (pCDRoundedRectangle = new CDRoundedRectangleElements());
	}
	
	public ParserRule getCDRoundedRectangleRule() {
		return getCDRoundedRectangleAccess().getRule();
	}

	//CDPolygon:
	//	{CDPolygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
	public CDPolygonElements getCDPolygonAccess() {
		return (pCDPolygon != null) ? pCDPolygon : (pCDPolygon = new CDPolygonElements());
	}
	
	public ParserRule getCDPolygonRule() {
		return getCDPolygonAccess().getRule();
	}

	//CDEllipse:
	//	{CDEllipse} "ellipse" style=ShapeStyleRef? ("{" layout=RectangleEllipseLayout "}");
	public CDEllipseElements getCDEllipseAccess() {
		return (pCDEllipse != null) ? pCDEllipse : (pCDEllipse = new CDEllipseElements());
	}
	
	public ParserRule getCDEllipseRule() {
		return getCDEllipseAccess().getRule();
	}

	//CDText:
	//	{CDText} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}");
	public CDTextElements getCDTextAccess() {
		return (pCDText != null) ? pCDText : (pCDText = new CDTextElements());
	}
	
	public ParserRule getCDTextRule() {
		return getCDTextAccess().getRule();
	}

	//Line:
	//	{Line} "line" style=ShapeStyleRef? ("{" layout=LineLayout "}");
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//Polyline:
	//	{Polyline} "polyline" style=ShapeStyleRef? ("{" layout=PolyLineLayout "}");
	public PolylineElements getPolylineAccess() {
		return (pPolyline != null) ? pPolyline : (pPolyline = new PolylineElements());
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}

	//Rectangle:
	//	{Rectangle} "rectangle" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
	//	shape+=Shape* "}");
	public RectangleElements getRectangleAccess() {
		return (pRectangle != null) ? pRectangle : (pRectangle = new RectangleElements());
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}

	//RoundedRectangle:
	//	{RoundedRectangle} "rounded-rectangle" style=ShapeStyleRef? ("{" layout=RoundedRectangleLayout shape+=Shape* "}");
	public RoundedRectangleElements getRoundedRectangleAccess() {
		return (pRoundedRectangle != null) ? pRoundedRectangle : (pRoundedRectangle = new RoundedRectangleElements());
	}
	
	public ParserRule getRoundedRectangleRule() {
		return getRoundedRectangleAccess().getRule();
	}

	//Polygon:
	//	{Polygon} "polygon" style=ShapeStyleRef? ("{" layout=PolyLineLayout shape+=Shape* "}");
	public PolygonElements getPolygonAccess() {
		return (pPolygon != null) ? pPolygon : (pPolygon = new PolygonElements());
	}
	
	public ParserRule getPolygonRule() {
		return getPolygonAccess().getRule();
	}

	//Ellipse:
	//	{Ellipse} "ellipse" style=ShapeStyleRef? ("{" compartmentInfo=CompartmentInfo? layout=RectangleEllipseLayout
	//	shape+=Shape* "}");
	public EllipseElements getEllipseAccess() {
		return (pEllipse != null) ? pEllipse : (pEllipse = new EllipseElements());
	}
	
	public ParserRule getEllipseRule() {
		return getEllipseAccess().getRule();
	}

	//Text:
	//	{Text} texttype=TextType style=ShapeStyleRef? ("{" layout=TextLayout body=TextBody "}");
	public TextElements getTextAccess() {
		return (pText != null) ? pText : (pText = new TextElements());
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	////ShapeRef: {ShapeRef} 'shape' (ref=JvmTypeReference) 
	////"{" layout=RectangleEllipseLayout "}";
	//CompartmentInfo:
	//	"compartment" "(" ("layout" "=" compartmentLayout=CompartmentLayout & ("stretching" "(" "horizontal" "="
	//	stretchH=Boolean "," "vertical" "=" stretchV=Boolean ")")? & ("spacing" "=" spacing=INT)? & ("margin" "=" margin=INT)?
	//	& invisible?="invisible"? & id=TextBody?) ")";
	public CompartmentInfoElements getCompartmentInfoAccess() {
		return (pCompartmentInfo != null) ? pCompartmentInfo : (pCompartmentInfo = new CompartmentInfoElements());
	}
	
	public ParserRule getCompartmentInfoRule() {
		return getCompartmentInfoAccess().getRule();
	}

	//enum CompartmentLayout:
	//	FIXED="fixed" | VERTICAL="vertical" | HORIZONTAL="horizontal" | FIT="fit";
	public CompartmentLayoutElements getCompartmentLayoutAccess() {
		return (unknownRuleCompartmentLayout != null) ? unknownRuleCompartmentLayout : (unknownRuleCompartmentLayout = new CompartmentLayoutElements());
	}
	
	public EnumRule getCompartmentLayoutRule() {
		return getCompartmentLayoutAccess().getRule();
	}

	/////'{' common = CommonLayout body = TextBody '}'
	//Compartment:
	//	{Compartment} "compartment" compartmentLayout=CompartmentLayout? shape=CompartmentShape;
	public CompartmentElements getCompartmentAccess() {
		return (pCompartment != null) ? pCompartment : (pCompartment = new CompartmentElements());
	}
	
	public ParserRule getCompartmentRule() {
		return getCompartmentAccess().getRule();
	}

	//// | CompartmentPolygon | CompartmentRoundedRectangle
	//CompartmentShape:
	//	CompartmentEllipse | CompartmentRectangle;
	public CompartmentShapeElements getCompartmentShapeAccess() {
		return (pCompartmentShape != null) ? pCompartmentShape : (pCompartmentShape = new CompartmentShapeElements());
	}
	
	public ParserRule getCompartmentShapeRule() {
		return getCompartmentShapeAccess().getRule();
	}

	//CompartmentRectangle:
	//	{CompartmentRectangle} "rectangle" ("{" layout=RectangleEllipseLayout id=TextBody "}");
	public CompartmentRectangleElements getCompartmentRectangleAccess() {
		return (pCompartmentRectangle != null) ? pCompartmentRectangle : (pCompartmentRectangle = new CompartmentRectangleElements());
	}
	
	public ParserRule getCompartmentRectangleRule() {
		return getCompartmentRectangleAccess().getRule();
	}

	//CompartmentRoundedRectangle:
	//	{CompartmentRoundedRectangle} "rounded-rectangle" ("{" layout=RoundedRectangleLayout id=TextBody "}");
	public CompartmentRoundedRectangleElements getCompartmentRoundedRectangleAccess() {
		return (pCompartmentRoundedRectangle != null) ? pCompartmentRoundedRectangle : (pCompartmentRoundedRectangle = new CompartmentRoundedRectangleElements());
	}
	
	public ParserRule getCompartmentRoundedRectangleRule() {
		return getCompartmentRoundedRectangleAccess().getRule();
	}

	//CompartmentPolygon:
	//	{CompartmentPolygon} "polygon" ("{" layout=PolyLineLayout id=TextBody "}");
	public CompartmentPolygonElements getCompartmentPolygonAccess() {
		return (pCompartmentPolygon != null) ? pCompartmentPolygon : (pCompartmentPolygon = new CompartmentPolygonElements());
	}
	
	public ParserRule getCompartmentPolygonRule() {
		return getCompartmentPolygonAccess().getRule();
	}

	//CompartmentEllipse:
	//	{CompartmentEllipse} "ellipse" ("{" layout=RectangleEllipseLayout id=TextBody "}");
	public CompartmentEllipseElements getCompartmentEllipseAccess() {
		return (pCompartmentEllipse != null) ? pCompartmentEllipse : (pCompartmentEllipse = new CompartmentEllipseElements());
	}
	
	public ParserRule getCompartmentEllipseRule() {
		return getCompartmentEllipseAccess().getRule();
	}

	//Description:
	//	{Description} ("description" style=ShapeStyleRef? "{" ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "="
	//	vAlign=VAlign)? ")")? body=TextBody "}");
	public DescriptionElements getDescriptionAccess() {
		return (pDescription != null) ? pDescription : (pDescription = new DescriptionElements());
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//ShapeLayout:
	//	{ShapeLayout} (("size-min" "(" "width" "=" minwidth=INT "," "height" "=" minheight=INT ")")? & ("size-max" "(" "width"
	//	"=" maxwidth=INT "," "height" "=" maxheight=INT ")")? & ("stretching" "(" "horizontal" "=" stretchH=Boolean ","
	//	"vertical" "=" stretchV=Boolean ")")? & ("proportional" "=" proportional=Boolean)?);
	public ShapeLayoutElements getShapeLayoutAccess() {
		return (pShapeLayout != null) ? pShapeLayout : (pShapeLayout = new ShapeLayoutElements());
	}
	
	public ParserRule getShapeLayoutRule() {
		return getShapeLayoutAccess().getRule();
	}

	//RectangleEllipseLayout:
	//	{RectangleEllipseLayout} (common=CommonLayout & layout=ShapestyleLayout?);
	public RectangleEllipseLayoutElements getRectangleEllipseLayoutAccess() {
		return (pRectangleEllipseLayout != null) ? pRectangleEllipseLayout : (pRectangleEllipseLayout = new RectangleEllipseLayoutElements());
	}
	
	public ParserRule getRectangleEllipseLayoutRule() {
		return getRectangleEllipseLayoutAccess().getRule();
	}

	//LineLayout:
	//	{LineLayout} (point+=Point point+=Point layout=ShapestyleLayout?);
	public LineLayoutElements getLineLayoutAccess() {
		return (pLineLayout != null) ? pLineLayout : (pLineLayout = new LineLayoutElements());
	}
	
	public ParserRule getLineLayoutRule() {
		return getLineLayoutAccess().getRule();
	}

	//PolyLineLayout:
	//	{PolyLineLayout} (point+=Point point+=Point+ layout=ShapestyleLayout?);
	public PolyLineLayoutElements getPolyLineLayoutAccess() {
		return (pPolyLineLayout != null) ? pPolyLineLayout : (pPolyLineLayout = new PolyLineLayoutElements());
	}
	
	public ParserRule getPolyLineLayoutRule() {
		return getPolyLineLayoutAccess().getRule();
	}

	//RoundedRectangleLayout:
	//	{RoundedRectangleLayout} (common=CommonLayout & "curve" "(" "width" "=" curveWidth=INT "," "height" "="
	//	curveHeight=INT ")" & layout=ShapestyleLayout?);
	public RoundedRectangleLayoutElements getRoundedRectangleLayoutAccess() {
		return (pRoundedRectangleLayout != null) ? pRoundedRectangleLayout : (pRoundedRectangleLayout = new RoundedRectangleLayoutElements());
	}
	
	public ParserRule getRoundedRectangleLayoutRule() {
		return getRoundedRectangleLayoutAccess().getRule();
	}

	//TextLayout:
	//	{TextLayout} (common=CommonLayout & ("align" "(" ("horizontal" "=" hAlign=HAlign "," "vertical" "=" vAlign=VAlign)?
	//	")")? & layout=ShapestyleLayout?);
	public TextLayoutElements getTextLayoutAccess() {
		return (pTextLayout != null) ? pTextLayout : (pTextLayout = new TextLayoutElements());
	}
	
	public ParserRule getTextLayoutRule() {
		return getTextLayoutAccess().getRule();
	}

	//ShapestyleLayout:
	//	{ShapestyleLayout} ("style" "(" layout=StyleLayout ")");
	public ShapestyleLayoutElements getShapestyleLayoutAccess() {
		return (pShapestyleLayout != null) ? pShapestyleLayout : (pShapestyleLayout = new ShapestyleLayoutElements());
	}
	
	public ParserRule getShapestyleLayoutRule() {
		return getShapestyleLayoutAccess().getRule();
	}

	//ShapeStyleRef:
	//	"style" ("JAVA" javaStyle=JvmTypeReference | dslStyle=[styles::Style]);
	public ShapeStyleRefElements getShapeStyleRefAccess() {
		return (pShapeStyleRef != null) ? pShapeStyleRef : (pShapeStyleRef = new ShapeStyleRefElements());
	}
	
	public ParserRule getShapeStyleRefRule() {
		return getShapeStyleRefAccess().getRule();
	}

	//CommonLayout:
	//	{CommonLayout} (("position" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ")")? & "size" "(" "width" "=" width=INT ","
	//	"height" "=" heigth=INT ")");
	public CommonLayoutElements getCommonLayoutAccess() {
		return (pCommonLayout != null) ? pCommonLayout : (pCommonLayout = new CommonLayoutElements());
	}
	
	public ParserRule getCommonLayoutRule() {
		return getCommonLayoutAccess().getRule();
	}

	////value=TextBodyValue;
	//TextBody:
	//	{TextBody} "id" "=" value=ID;
	public TextBodyElements getTextBodyAccess() {
		return (pTextBody != null) ? pTextBody : (pTextBody = new TextBodyElements());
	}
	
	public ParserRule getTextBodyRule() {
		return getTextBodyAccess().getRule();
	}

	////TextBodyValue:
	////  TextBodyParameter | TextBodyString;
	////
	////TextBodyString:
	////  param=STRING;
	////
	////TextBodyParameter:
	////  param=[types::JvmIdentifiableElement] ("formatting" format=ID)?;
	//Point:
	//	{Point} ("point" "(" "x" "=" xcor=N_INT "," "y" "=" ycor=N_INT ("," "curveBefore" "=" curveBefore=INT "," "curveAfter"
	//	"=" curveAfter=INT)? ")");
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Boolean returns ecore::EBooleanObject:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//enum HAlign:
	//	LEFT="left" | CENTER="center" | RIGHT="right";
	public HAlignElements getHAlignAccess() {
		return (unknownRuleHAlign != null) ? unknownRuleHAlign : (unknownRuleHAlign = new HAlignElements());
	}
	
	public EnumRule getHAlignRule() {
		return getHAlignAccess().getRule();
	}

	//enum VAlign:
	//	TOP="top" | MIDDLE="middle" | BOTTOM="bottom";
	public VAlignElements getVAlignAccess() {
		return (unknownRuleVAlign != null) ? unknownRuleVAlign : (unknownRuleVAlign = new VAlignElements());
	}
	
	public EnumRule getVAlignRule() {
		return getVAlignAccess().getRule();
	}

	//enum ConnectionStyle:
	//	freeform | manhatten;
	public ConnectionStyleElements getConnectionStyleAccess() {
		return (unknownRuleConnectionStyle != null) ? unknownRuleConnectionStyle : (unknownRuleConnectionStyle = new ConnectionStyleElements());
	}
	
	public EnumRule getConnectionStyleRule() {
		return getConnectionStyleAccess().getRule();
	}

	//enum AnchorPredefiniedEnum:
	//	center | corners;
	public AnchorPredefiniedEnumElements getAnchorPredefiniedEnumAccess() {
		return (unknownRuleAnchorPredefiniedEnum != null) ? unknownRuleAnchorPredefiniedEnum : (unknownRuleAnchorPredefiniedEnum = new AnchorPredefiniedEnumElements());
	}
	
	public EnumRule getAnchorPredefiniedEnumRule() {
		return getAnchorPredefiniedEnumAccess().getRule();
	}

	//enum TextType:
	//	default="text" | multiline="wrapped-text";
	public TextTypeElements getTextTypeAccess() {
		return (unknownRuleTextType != null) ? unknownRuleTextType : (unknownRuleTextType = new TextTypeElements());
	}
	
	public EnumRule getTextTypeRule() {
		return getTextTypeAccess().getRule();
	}

	//N_INT returns ecore::EInt:
	//	"-"? INT;
	public N_INTElements getN_INTAccess() {
		return (pN_INT != null) ? pN_INT : (pN_INT = new N_INTElements());
	}
	
	public ParserRule getN_INTRule() {
		return getN_INTAccess().getRule();
	}

	//StyleContainer:
	//	styleContainerElement+=StyleContainerElement*;
	public StyleGrammarAccess.StyleContainerElements getStyleContainerAccess() {
		return gaStyle.getStyleContainerAccess();
	}
	
	public ParserRule getStyleContainerRule() {
		return getStyleContainerAccess().getRule();
	}

	//StyleContainerElement:
	//	Style | Gradient;
	public StyleGrammarAccess.StyleContainerElementElements getStyleContainerElementAccess() {
		return gaStyle.getStyleContainerElementAccess();
	}
	
	public ParserRule getStyleContainerElementRule() {
		return getStyleContainerElementAccess().getRule();
	}

	//Style:
	//	{Style} "style" name=ID ("extends" ("JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]))? "{"
	//	("description" "=" description=STRING)? layout=StyleLayout "}";
	public StyleGrammarAccess.StyleElements getStyleAccess() {
		return gaStyle.getStyleAccess();
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//Gradient:
	//	{Gradient} "gradient" name=ID "{" ("description" "=" description=STRING)? layout=GradientLayout "}";
	public StyleGrammarAccess.GradientElements getGradientAccess() {
		return gaStyle.getGradientAccess();
	}
	
	public ParserRule getGradientRule() {
		return getGradientAccess().getRule();
	}

	//StyleLayout:
	//	{StyleLayout} (("transparency" "=" transparency=DOUBLE)? & ("background-color" "=" background=ColorOrGradient)? &
	//	("gradient-orientation" "=" gradient_orientation=GradientAllignment)? & ("highlighting"
	//	highlighting=HighlightingValues)? & ("line-color" "=" lineColor=ColorWithTransparency)? & ("line-width" "="
	//	lineWidth=INT)? & ("line-style" "=" lineStyle=LineStyle)? & ("font-name" "=" fontName=STRING)? & ("font-color" "="
	//	fontColor=Color)? & ("font-size" "=" fontSize=INT)? & ("font-italic" "=" fontItalic=YesNoBool)? & ("font-bold" "="
	//	fontBold=YesNoBool)?);
	public StyleGrammarAccess.StyleLayoutElements getStyleLayoutAccess() {
		return gaStyle.getStyleLayoutAccess();
	}
	
	public ParserRule getStyleLayoutRule() {
		return getStyleLayoutAccess().getRule();
	}

	//GradientLayout:
	//	{GradientLayout} ("area" area+=GradientColorArea)*;
	public StyleGrammarAccess.GradientLayoutElements getGradientLayoutAccess() {
		return gaStyle.getGradientLayoutAccess();
	}
	
	public ParserRule getGradientLayoutRule() {
		return getGradientLayoutAccess().getRule();
	}

	//HighlightingValues:
	//	{HighlightingValues} "(" ("selected" "=" selected=ColorOrGradient)? ("multiselected" "="
	//	multiselected=ColorOrGradient)? ("allowed" "=" allowed=ColorOrGradient)? ("unallowed" "=" unallowed=ColorOrGradient)?
	//	")";
	public StyleGrammarAccess.HighlightingValuesElements getHighlightingValuesAccess() {
		return gaStyle.getHighlightingValuesAccess();
	}
	
	public ParserRule getHighlightingValuesRule() {
		return getHighlightingValuesAccess().getRule();
	}

	//GradientColorArea:
	//	{GradientColorArea} "(" "color" "=" color=Color "," "offset" "=" offset=DOUBLE ")"+;
	public StyleGrammarAccess.GradientColorAreaElements getGradientColorAreaAccess() {
		return gaStyle.getGradientColorAreaAccess();
	}
	
	public ParserRule getGradientColorAreaRule() {
		return getGradientColorAreaAccess().getRule();
	}

	//ColorOrGradient:
	//	Color | Transparent | GradientRef;
	public StyleGrammarAccess.ColorOrGradientElements getColorOrGradientAccess() {
		return gaStyle.getColorOrGradientAccess();
	}
	
	public ParserRule getColorOrGradientRule() {
		return getColorOrGradientAccess().getRule();
	}

	//ColorWithTransparency:
	//	Color | Transparent;
	public StyleGrammarAccess.ColorWithTransparencyElements getColorWithTransparencyAccess() {
		return gaStyle.getColorWithTransparencyAccess();
	}
	
	public ParserRule getColorWithTransparencyRule() {
		return getColorWithTransparencyAccess().getRule();
	}

	//Color:
	//	RGBColor | ColorConstantRef;
	public StyleGrammarAccess.ColorElements getColorAccess() {
		return gaStyle.getColorAccess();
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//RGBColor:
	//	"RGB" "(" red=INT "," green=INT "," blue=INT ")";
	public StyleGrammarAccess.RGBColorElements getRGBColorAccess() {
		return gaStyle.getRGBColorAccess();
	}
	
	public ParserRule getRGBColorRule() {
		return getRGBColorAccess().getRule();
	}

	//GradientRef:
	//	{GradientRef} ("JAVA" gradientRef=JvmTypeReference | gradientRefFromDsl=[Gradient]);
	public StyleGrammarAccess.GradientRefElements getGradientRefAccess() {
		return gaStyle.getGradientRefAccess();
	}
	
	public ParserRule getGradientRefRule() {
		return getGradientRefAccess().getRule();
	}

	//ColorConstantRef:
	//	value=ColorConstants;
	public StyleGrammarAccess.ColorConstantRefElements getColorConstantRefAccess() {
		return gaStyle.getColorConstantRefAccess();
	}
	
	public ParserRule getColorConstantRefRule() {
		return getColorConstantRefAccess().getRule();
	}

	//Transparent:
	//	transparent?="transparent";
	public StyleGrammarAccess.TransparentElements getTransparentAccess() {
		return gaStyle.getTransparentAccess();
	}
	
	public ParserRule getTransparentRule() {
		return getTransparentAccess().getRule();
	}

	//enum ColorConstants:
	//	WHITE="white" | LIGHT_LIGHT_GRAY="very-light-gray" | LIGHT_GRAY="light-gray" | GRAY="gray" | DARK_GRAY="dark-gray" |
	//	BLACK="black" | RED="red" | LIGHT_ORANGE="light-orange" | ORANGE="orange" | DARK_ORANGE="dark-orange" |
	//	YELLOW="yellow" | GREEN="green" | LIGHT_GREEN="light-green" | DARK_GREEN="dark-green" | CYAN="cyan" |
	//	LIGHT_BLUE="light-blue" | BLUE="blue" | DARK_BLUE="dark-blue";
	public StyleGrammarAccess.ColorConstantsElements getColorConstantsAccess() {
		return gaStyle.getColorConstantsAccess();
	}
	
	public EnumRule getColorConstantsRule() {
		return getColorConstantsAccess().getRule();
	}

	//enum LineStyle:
	//	SOLID="solid" | DOT="dot" | DASH="dash" | DASHDOT="dash-dot" | DASHDOTDOT="dash-dot-dot";
	public StyleGrammarAccess.LineStyleElements getLineStyleAccess() {
		return gaStyle.getLineStyleAccess();
	}
	
	public EnumRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}

	//enum YesNoBool:
	//	YES="yes" | NO="no";
	public StyleGrammarAccess.YesNoBoolElements getYesNoBoolAccess() {
		return gaStyle.getYesNoBoolAccess();
	}
	
	public EnumRule getYesNoBoolRule() {
		return getYesNoBoolAccess().getRule();
	}

	//enum GradientAllignment:
	//	HORIZONTAL="horizontal" | VERTICAL="vertical";
	public StyleGrammarAccess.GradientAllignmentElements getGradientAllignmentAccess() {
		return gaStyle.getGradientAllignmentAccess();
	}
	
	public EnumRule getGradientAllignmentRule() {
		return getGradientAllignmentAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public StyleGrammarAccess.DOUBLEElements getDOUBLEAccess() {
		return gaStyle.getDOUBLEAccess();
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaStyle.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaStyle.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaStyle.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaStyle.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaStyle.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaStyle.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaStyle.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaStyle.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaStyle.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaStyle.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaStyle.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaStyle.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaStyle.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaStyle.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaStyle.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaStyle.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaStyle.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaStyle.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaStyle.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaStyle.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaStyle.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaStyle.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaStyle.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaStyle.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaStyle.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaStyle.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaStyle.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaStyle.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaStyle.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaStyle.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaStyle.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaStyle.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaStyle.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaStyle.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaStyle.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaStyle.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaStyle.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaStyle.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaStyle.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaStyle.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaStyle.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaStyle.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaStyle.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaStyle.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaStyle.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaStyle.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaStyle.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaStyle.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaStyle.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaStyle.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaStyle.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaStyle.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaStyle.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaStyle.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaStyle.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaStyle.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaStyle.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaStyle.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX returns ecore::EString:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaStyle.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaStyle.getINTRule();
	} 

	//terminal DECIMAL returns ecore::EString:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaStyle.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaStyle.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaStyle.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaStyle.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaStyle.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaStyle.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaStyle.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaStyle.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaStyle.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaStyle.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaStyle.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaStyle.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaStyle.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaStyle.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaStyle.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID returns ecore::EString:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaStyle.getIDRule();
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaStyle.getSTRINGRule();
	} 

	//terminal ML_COMMENT returns ecore::EString:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaStyle.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT returns ecore::EString:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaStyle.getSL_COMMENTRule();
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaStyle.getWSRule();
	} 

	//terminal ANY_OTHER returns ecore::EString:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaStyle.getANY_OTHERRule();
	} 
}
