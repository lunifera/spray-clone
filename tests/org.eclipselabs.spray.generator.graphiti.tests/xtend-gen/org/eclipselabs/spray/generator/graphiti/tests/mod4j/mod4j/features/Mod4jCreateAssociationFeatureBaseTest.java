/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;

/* @RunWith(XtextRunner2.class) */@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jCreateAssociationFeatureBaseTest extends AbstractSprayGeneratorTest {
  /* @Test
   */public void test() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method assertTrue is undefined for the type Mod4jCreateAssociationFeatureBaseTest"
      + "\nThe method assertEquals is undefined for the type Mod4jCreateAssociationFeatureBaseTest");
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray CreateConnectionFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.ICreateConnectionContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddConnectionContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Anchor;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Connection;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Shape;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractCreateConnectionFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.containers.SampleUtil;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import null.BusinessDomainDslFactory;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.Activator;");
    _builder.newLine();
    _builder.append("import samplepackage.AbstractBusinessClass;");
    _builder.newLine();
    _builder.append("import samplepackage.Association;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessClass;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessDomainModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jCreateAssociationFeatureBase extends AbstractCreateConnectionFeature {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static String TITLE = \"Create Association\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static String USER_QUESTION = \"Enter new Association name\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jCreateAssociationFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// provide name and description for the UI, e.g. the palette");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp, \"Association\", \"Create Association\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService = Activator.get(IGaService.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canCreate(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor targetAnchor = getDslShapeAnchor(context.getTargetPictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (targetAnchor == null){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true if both anchors belong to an EClass of the right type and those EClasses are not identical");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("BusinessClass source = getBusinessClass(sourceAnchor);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AbstractBusinessClass target = getAbstractBusinessClass(targetAnchor);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ( (source != null) && (target != null) && (source != target) ) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canStartConnection(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true if start anchor belongs to a EClass of the right type");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (getBusinessClass(sourceAnchor) != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public Connection create(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Connection newConnection = null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Anchor targetAnchor = getDslShapeAnchor(context.getTargetPictogramElement());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// get EClasses which should be connected");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final BusinessClass source = getBusinessClass(sourceAnchor);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final AbstractBusinessClass target = getAbstractBusinessClass(targetAnchor);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// containment reference is not a feature of source");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final BusinessDomainModel container = org.eclipse.xtext.EcoreUtil2.getContainerOfType(source, BusinessDomainModel.class);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (source != null && target != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// create new business object");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final Association eReference = createAssociation(source, target);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// add the element to containment reference");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("container.getAssociations().add(eReference);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// add connection for business object");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final AddConnectionContext addContext = new AddConnectionContext(sourceAnchor, targetAnchor);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("addContext.setNewObject(eReference);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newConnection = (Connection) getFeatureProvider().addIfPossible(addContext);");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// activate direct editing after object creation");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("getFeatureProvider().getDirectEditingInfo().setActive(true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return newConnection;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the BusinessClass belonging to the anchor, or <code>null</code> if not available.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected BusinessClass getBusinessClass(final Anchor anchor) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (anchor != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final EObject bo = (EObject) getBusinessObjectForPictogramElement(anchor.getParent()); ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (bo instanceof BusinessClass) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return (BusinessClass) bo;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the AbstractBusinessClass belonging to the anchor, or <code>null</code> if not available.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected AbstractBusinessClass getAbstractBusinessClass(final Anchor anchor) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (anchor != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final EObject bo = (EObject) getBusinessObjectForPictogramElement(anchor.getParent()); ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (bo instanceof AbstractBusinessClass) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return (AbstractBusinessClass) bo;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Creates a EReference between two EClasses.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Association createAssociation(final BusinessClass source, final AbstractBusinessClass target) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TODO: Domain Object");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Association domainObject = BusinessDomainDslFactory.eINSTANCE.createAssociation();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("domainObject.setSource(source);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("domainObject.setTarget(target);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return domainObject;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Anchor getDslShapeAnchor(PictogramElement pe) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( pe == null ){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Shape dslShape = SprayLayoutService.findDslShape(pe);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (dslShape != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("EList<Anchor> anchors = dslShape.getAnchors();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!anchors.isEmpty()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return anchors.get(0);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
