/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;

/* @RunWith(XtextRunner2.class) */@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jAddReferenceBusinessClassSuperclassFeatureBaseTest extends AbstractSprayGeneratorTest {
  /* @Test
   */public void test() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method assertTrue is undefined for the type Mod4jAddReferenceBusinessClassSuperclassFeatureBaseTest"
      + "\nThe method assertEquals is undefined for the type Mod4jAddReferenceBusinessClassSuperclassFeatureBaseTest");
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray AddReferenceAsConnectionFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddConnectionContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.AnchorContainer;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Connection;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.Polyline;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractAddConnectionFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.Activator;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("public abstract class Mod4jAddReferenceBusinessClassSuperclassFeatureBase extends AbstractAddConnectionFeature {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jAddReferenceBusinessClassSuperclassFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService = Activator.get(IGaService.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canAdd(final IAddContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true if given business object is an BusinessClass");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// note, that the context must be an instance of IAddConnectionContext");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (context instanceof IAddConnectionContext && context.getNewObject() instanceof BusinessClass) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public PictogramElement add(final IAddContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IAddConnectionContext addConContext = (IAddConnectionContext) context;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("BusinessClass addedDomainObject = (BusinessClass) context.getNewObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("removeExisting(context);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// CONNECTION WITH POLYLINE");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Connection connection = peCreateService.createFreeFormConnection(getDiagram());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("connection.setStart(addConContext.getSourceAnchor());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("connection.setEnd(addConContext.getTargetAnchor());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TRY");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final AnchorContainer parent = connection.getStart().getParent();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final EObject start = (EObject) getBusinessObjectForPictogramElement(parent);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final AnchorContainer child = connection.getEnd().getParent();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final EObject end = (EObject) getBusinessObjectForPictogramElement(child);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//END TRY");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Polyline polyline = gaService.createPolyline(connection);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("polyline.setLineWidth(1);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// create link and wire it");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(connection, PROPERTY_MODEL_TYPE, \"BusinessClass.superclass\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(connection, PROPERTY_REFERENCE, (String) context.getProperty(PROPERTY_REFERENCE));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(connection, PROPERTY_TARGETOBJECT, (String) context.getProperty(PROPERTY_TARGETOBJECT));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("link(connection, addedDomainObject);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// add static graphical decorator");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// ConnectionDecorator cd = peCreateService.createConnectionDecorator(connection, false, 1.0, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//      No arrows");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//        createArrow(cd);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("decorateConnection(addConContext, connection);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return connection;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void removeExisting(final IAddContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IAddConnectionContext addConContext = (IAddConnectionContext) context;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BusinessClass addedDomainObject = (BusinessClass) context.getNewObject();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Object[] pictogramElements = peService.getLinkedPictogramElements(new EObject[]{addedDomainObject}, getDiagram());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (final Object pict : pictogramElements) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (pict instanceof PictogramElement) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final PictogramElement p = (PictogramElement) pict;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (\"BusinessClass\".equals(peService.getPropertyValue(p, PROPERTY_REFERENCE))) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("peService.deletePictogramElement(p);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
