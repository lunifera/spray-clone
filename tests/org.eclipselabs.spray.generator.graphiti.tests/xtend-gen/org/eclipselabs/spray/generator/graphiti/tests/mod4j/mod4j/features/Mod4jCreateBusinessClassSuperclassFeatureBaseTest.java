/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jCreateBusinessClassSuperclassFeatureBaseTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jCreateBusinessClassSuperclassFeatureBase.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray CreateReferenceAsConnectionFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.ICreateConnectionContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddConnectionContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Anchor;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Connection;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Shape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractCreateConnectionFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import null.BusinessDomainDslPackage;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jCreateBusinessClassSuperclassFeatureBase extends AbstractCreateConnectionFeature {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jCreateBusinessClassSuperclassFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// set name and description of the creation feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this(fp, \"superclass\", \"Create superclass\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Mod4jCreateBusinessClassSuperclassFeatureBase(final IFeatureProvider fp, final String name, final String description) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// provide name and description for the UI, e.g. the palette");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp, name, description);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canCreate(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true if both anchors belong to an EClass of the correct type and those EClasses are not identical");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor targetAnchor = getDslShapeAnchor(context.getTargetPictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BusinessClass source = getBusinessClass(sourceAnchor);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BusinessClass target = getSuperclass(targetAnchor);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ( (source != null) && (target != null) && (source != target) ) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canStartConnection(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return true if start anchor belongs to a EClass of the right type");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BusinessClass businessClass = (BusinessClass) getBusinessClass(sourceAnchor);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (businessClass == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// single valued reference. can only be started if the reference is not set yet.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return businessClass.getSuperclass() == null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public Connection create(final ICreateConnectionContext context) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Connection newConnection = null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Anchor sourceAnchor = getDslShapeAnchor(context.getSourcePictogramElement());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Anchor targetAnchor = getDslShapeAnchor(context.getTargetPictogramElement());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// get EClasses which should be connected");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final BusinessClass source = getBusinessClass(sourceAnchor);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final BusinessClass target = getSuperclass(targetAnchor);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (source != null && target != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// create new business object");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("setSuperclass(source, target);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// add connection for business object");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final AddConnectionContext addContext = new AddConnectionContext( sourceAnchor, targetAnchor);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("addContext.setNewObject(source);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("addContext.putProperty(PROPERTY_REFERENCE, BusinessDomainDslPackage.Literals.BUSINESS_CLASS__SUPERCLASS.getName());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// TODO: assume that the target object has a Name property");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//        addContext.putProperty(\"TARGETOBJECT\", target.getName());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newConnection = (Connection) getFeatureProvider().addIfPossible(addContext);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return newConnection;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the BusinessClass belonging to the anchor, or <code>null</code> if not available.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected BusinessClass getBusinessClass(final Anchor anchor) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( anchor != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final Object bo = getBusinessObjectForPictogramElement(anchor.getParent());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (anchor != null && bo instanceof BusinessClass) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return (BusinessClass) bo;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the superclass belonging to the anchor, or <code>null</code> if not available.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected BusinessClass getSuperclass(final Anchor anchor) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( anchor != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final Object bo = getBusinessObjectForPictogramElement(anchor.getParent());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (anchor != null && bo instanceof BusinessClass) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return (BusinessClass) bo;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Creates a superclass .");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void setSuperclass(final BusinessClass source, final BusinessClass target) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("source.setSuperclass(target);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Anchor getDslShapeAnchor(PictogramElement pe) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( pe == null ){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Shape dslShape = SprayLayoutService.findDslShape(pe);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (dslShape != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("EList<Anchor> anchors = dslShape.getAnchors();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!anchors.isEmpty()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return anchors.get(0);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
