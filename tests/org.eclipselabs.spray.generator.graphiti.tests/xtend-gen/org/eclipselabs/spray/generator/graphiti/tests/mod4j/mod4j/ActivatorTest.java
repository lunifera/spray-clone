/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class ActivatorTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/Activator.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray PluginActivator.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.ui.plugin.AbstractUIPlugin;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.Modules2;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiRuntimeModule;");
    _builder.newLine();
    _builder.append("import org.osgi.framework.BundleContext;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Guice;");
    _builder.newLine();
    _builder.append("import com.google.inject.Injector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The activator class controls the plug-in life cycle");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Activator extends AbstractUIPlugin {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Injector           injector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// The plug-in ID");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final String PLUGIN_ID = \"spray\"; //$NON-NLS-1$");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// The shared instance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Activator   plugin;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* (non-Javadoc)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void start(BundleContext context) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.start(context);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("plugin = this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("injector = createInjector();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* (non-Javadoc)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void stop(BundleContext context) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("plugin = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.stop(context);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Returns the shared instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the shared instance");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Activator getDefault() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return plugin;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Injector createInjector() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Guice.createInjector(Modules2.mixin(new GraphitiRuntimeModule(), new Mod4jModule()));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Injector getInjector() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return injector;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final <T> T get(Class<T> type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getDefault().getInjector().getInstance(type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
