/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jDeleteReferenceBusinessClassSuperclassFeatureBaseTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/features/Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray DeleteReferenceFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EcoreUtil;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IRemoveFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IDeleteContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IRemoveContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.RemoveContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.AnchorContainer;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Connection;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.DefaultDeleteFeature;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase extends DefaultDeleteFeature {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jDeleteReferenceBusinessClassSuperclassFeatureBase(final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void delete(final IDeleteContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final PictogramElement pe = context.getPictogramElement();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String reference = peService.getPropertyValue(pe, PROPERTY_REFERENCE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final String element = peService.getPropertyValue(pe, PROPERTY_TARGETOBJECT);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Object[] businessObjectsForPictogramElement = getAllBusinessObjectsForPictogramElement(pe);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (businessObjectsForPictogramElement != null && businessObjectsForPictogramElement.length > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!getUserDecision()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("preDelete(context);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TRY");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (pe instanceof Connection) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final Connection line = (Connection) pe;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final AnchorContainer parent = line.getStart().getParent();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// EObject start = getBusinessObjectForPictogramElement(parent);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final AnchorContainer child = line.getEnd().getParent();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// EObject end = getBusinessObjectForPictogramElement(child);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//END TRY");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IRemoveContext rc = new RemoveContext(pe);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IRemoveFeature removeFeature = getFeatureProvider().getRemoveFeature(rc);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (removeFeature != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("removeFeature.remove(rc);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("deleteReferences(businessObjectsForPictogramElement, reference, element);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("postDelete(context);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Delete business objects.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param businessObjects");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*            the business objects");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void deleteReferences(final Object[] businessObjects, final String reference, final String element) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (businessObjects != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (final Object bo : businessObjects) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("deleteReference((EObject) bo, reference, element);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Delete business object.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param bo");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*            the bo");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void deleteReference(final EObject bo, final String reference, final String element) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (reference == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("EcoreUtil.delete(bo, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (bo instanceof BusinessClass) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final BusinessClass object = (BusinessClass) bo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("object.setSuperclass(null);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(\"DELETE OBJECT \" + bo);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
