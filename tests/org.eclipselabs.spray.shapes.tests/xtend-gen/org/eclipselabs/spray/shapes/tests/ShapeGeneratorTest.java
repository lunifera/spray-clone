/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.shapes.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Provider;
import java.util.Map;
import java.util.Set;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipselabs.spray.shapes.ShapeContainer;
import org.eclipselabs.spray.shapes.ShapeContainerElement;
import org.eclipselabs.spray.shapes.ShapeDefinition;
import org.eclipselabs.spray.shapes.generator.ShapeGenerator;
import org.eclipselabs.spray.shapes.tests.util.ShapeTestsInjectorProvider;
import org.eclipselabs.spray.xtext.generator.filesystem.JavaGenFile;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(void.class)
@InjectWith(ShapeTestsInjectorProvider.class)
@SuppressWarnings("all")
public class ShapeGeneratorTest {
  @Inject
  private Provider<JavaGenFile> genFileProvider;
  
  @Inject
  @Extension
  private ParseHelper<ShapeContainer> parseHelper;
  
  @Inject
  @Extension
  private ShapeGenerator shapeGenerator;
  
  private CharSequence shapeModelLine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("shape MyShape {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("line {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=10, y=15)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=80, y=85)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateShapeModelLine() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _shapeModelLine = this.shapeModelLine();
      ShapeContainer _parse = this.parseHelper.parse(_shapeModelLine);
      EList<ShapeContainerElement> _shapeContainerElement = _parse.getShapeContainerElement();
      Iterable<ShapeDefinition> _filter = Iterables.<ShapeDefinition>filter(_shapeContainerElement, ShapeDefinition.class);
      ShapeDefinition _head = IterableExtensions.<ShapeDefinition>head(_filter);
      this.shapeGenerator.generateJava(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTshapes/MyShapeShapeBase.java", _key);
      CharSequence _shapeModelLineExpectedContent = this.shapeModelLineExpectedContent();
      String _string = _shapeModelLineExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence shapeModelLineExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Shape for Spray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package shapes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Point;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.datatypes.IDimension;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.impl.AbstractAddShapeFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeCreateService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayAbstractLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.DefaultSprayShape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.SprayLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyShapeShapeBase extends DefaultSprayShape {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static enum TextIds {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MyShapeShapeBase(IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContainerShape getShape(ContainerShape targetContainer, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Create a ContainerShape for this Shape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Diagram diagram = peService.getDiagramForShape(targetContainer);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(containerShape, \"MyShape.containerShape\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// define general layout for ContainerShape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setProportional(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchH(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchV(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// layout data");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType containerLayout = SprayLayoutType.FIT;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(containerShape, containerLayout, 0, 0, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createCascadedElements(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createAnchorPoints(diagram, containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Fix the broken coordinate syaten for not active container shapes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayAbstractLayoutManager.fixOffset(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return containerShape;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// START GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createCascadedElements(Diagram diagram, ContainerShape containerShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setMainPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm element_0 = gaService.createInvisibleRectangle(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_0.setStyle(sprayStyle.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setShapeFromDsl(containerShape, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_0, 0, 0, 80, 85);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createElement_1(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set start values for height and width as properties on the element for Layout Feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager.setSizePictogramProperties(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Shape createElement_1(Diagram diagram,  ContainerShape parentShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Point> pointList_1 = new ArrayList<Point>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(10, 15, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(80, 85, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Shape shape_1 = peCreateService.createShape(parentShape, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(shape_1, \"MyShape.shape_1\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Polyline element_1 = gaService.createPlainPolyline(shape_1, pointList_1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ISprayStyle style_1 = sprayStyle;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setStyle(style_1.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return shape_1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// STOP GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createAnchorPoints(Diagram diagram, ContainerShape containerShape) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peCreateService.createChopboxAnchor(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SprayLayoutManager getShapeLayout() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager layoutManager = new SprayLayoutManager();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchHorizontal(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchVertical(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return layoutManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence shapeModelPolyline() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("shape MyShape {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("polyline {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=10, y=15)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=80, y=85)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=140, y=145)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("point(x=170, y=175)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateShapeModelPolyline() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _shapeModelPolyline = this.shapeModelPolyline();
      ShapeContainer _parse = this.parseHelper.parse(_shapeModelPolyline);
      EList<ShapeContainerElement> _shapeContainerElement = _parse.getShapeContainerElement();
      Iterable<ShapeDefinition> _filter = Iterables.<ShapeDefinition>filter(_shapeContainerElement, ShapeDefinition.class);
      ShapeDefinition _head = IterableExtensions.<ShapeDefinition>head(_filter);
      this.shapeGenerator.generateJava(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTshapes/MyShapeShapeBase.java", _key);
      CharSequence _shapeModelPolylineExpectedContent = this.shapeModelPolylineExpectedContent();
      String _string = _shapeModelPolylineExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence shapeModelPolylineExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Shape for Spray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package shapes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Point;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.datatypes.IDimension;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.impl.AbstractAddShapeFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeCreateService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayAbstractLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.DefaultSprayShape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.SprayLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyShapeShapeBase extends DefaultSprayShape {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static enum TextIds {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MyShapeShapeBase(IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContainerShape getShape(ContainerShape targetContainer, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Create a ContainerShape for this Shape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Diagram diagram = peService.getDiagramForShape(targetContainer);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(containerShape, \"MyShape.containerShape\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// define general layout for ContainerShape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setProportional(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchH(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchV(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// layout data");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType containerLayout = SprayLayoutType.FIT;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(containerShape, containerLayout, 0, 0, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createCascadedElements(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createAnchorPoints(diagram, containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Fix the broken coordinate syaten for not active container shapes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayAbstractLayoutManager.fixOffset(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return containerShape;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// START GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createCascadedElements(Diagram diagram, ContainerShape containerShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setMainPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm element_0 = gaService.createInvisibleRectangle(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_0.setStyle(sprayStyle.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setShapeFromDsl(containerShape, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_0, 0, 0, 170, 175);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createElement_1(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set start values for height and width as properties on the element for Layout Feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager.setSizePictogramProperties(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Shape createElement_1(Diagram diagram,  ContainerShape parentShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Point> pointList_1 = new ArrayList<Point>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(10, 15, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(80, 85, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(140, 145, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointList_1.add(gaService.createPoint(170, 175, 0, 0));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape shape_1 = peCreateService.createContainerShape(parentShape, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(shape_1, \"MyShape.shape_1\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Polyline element_1 = gaService.createPlainPolyline(shape_1, pointList_1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ISprayStyle style_1 = sprayStyle;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setStyle(style_1.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return shape_1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// STOP GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createAnchorPoints(Diagram diagram, ContainerShape containerShape) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peCreateService.createChopboxAnchor(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SprayLayoutManager getShapeLayout() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager layoutManager = new SprayLayoutManager();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchHorizontal(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchVertical(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return layoutManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence shapeModelRectangle() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("shape MyShape {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rectangle {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("position(x=10, y=15)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("size(width=80, height=85)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testGenerateShapeModelRectangle() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _shapeModelRectangle = this.shapeModelRectangle();
      ShapeContainer _parse = this.parseHelper.parse(_shapeModelRectangle);
      EList<ShapeContainerElement> _shapeContainerElement = _parse.getShapeContainerElement();
      Iterable<ShapeDefinition> _filter = Iterables.<ShapeDefinition>filter(_shapeContainerElement, ShapeDefinition.class);
      ShapeDefinition _head = IterableExtensions.<ShapeDefinition>head(_filter);
      this.shapeGenerator.generateJava(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTshapes/MyShapeShapeBase.java", _key);
      CharSequence _shapeModelRectangleExpectedContent = this.shapeModelRectangleExpectedContent();
      String _string = _shapeModelRectangleExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence shapeModelRectangleExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Shape for Spray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package shapes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Point;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.datatypes.IDimension;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.impl.AbstractAddShapeFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeCreateService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayAbstractLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.DefaultSprayShape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.SprayLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyShapeShapeBase extends DefaultSprayShape {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static enum TextIds {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MyShapeShapeBase(IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContainerShape getShape(ContainerShape targetContainer, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Create a ContainerShape for this Shape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Diagram diagram = peService.getDiagramForShape(targetContainer);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(containerShape, \"MyShape.containerShape\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// define general layout for ContainerShape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setProportional(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchH(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchV(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// layout data");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType containerLayout = SprayLayoutType.FIT;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(containerShape, containerLayout, 0, 0, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createCascadedElements(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createAnchorPoints(diagram, containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Fix the broken coordinate syaten for not active container shapes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayAbstractLayoutManager.fixOffset(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return containerShape;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// START GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createCascadedElements(Diagram diagram, ContainerShape containerShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setMainPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm element_0 = gaService.createInvisibleRectangle(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_0.setStyle(sprayStyle.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setShapeFromDsl(containerShape, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_0, 0, 0, 90, 100);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createElement_1(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set start values for height and width as properties on the element for Layout Feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager.setSizePictogramProperties(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Shape createElement_1(Diagram diagram,  ContainerShape parentShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape shape_1 = peCreateService.createContainerShape(parentShape, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(shape_1, \"MyShape.shape_1\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setCompartment(shape_1, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Rectangle element_1 = gaService.createPlainRectangle(shape_1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ISprayStyle style_1 = sprayStyle;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setStyle(style_1.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_1, 10, 15, 80, 85);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutData(shape_1, 80, 85, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return shape_1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// STOP GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createAnchorPoints(Diagram diagram, ContainerShape containerShape) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peCreateService.createChopboxAnchor(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SprayLayoutManager getShapeLayout() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager layoutManager = new SprayLayoutManager();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchHorizontal(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchVertical(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return layoutManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  @Test
  public void testIssue248Regression() {
    try {
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      final JavaGenFile java = this.genFileProvider.get();
      java.setAccess(fsa);
      CharSequence _issue248ExampleModel = this.issue248ExampleModel();
      ShapeContainer _parse = this.parseHelper.parse(_issue248ExampleModel);
      EList<ShapeContainerElement> _shapeContainerElement = _parse.getShapeContainerElement();
      Iterable<ShapeDefinition> _filter = Iterables.<ShapeDefinition>filter(_shapeContainerElement, ShapeDefinition.class);
      ShapeDefinition _head = IterableExtensions.<ShapeDefinition>head(_filter);
      this.shapeGenerator.generateJava(java, _head);
      Map<String,CharSequence> _files = fsa.getFiles();
      final Set<Map.Entry<String,CharSequence>> entries = _files.entrySet();
      int _size = entries.size();
      Assert.assertEquals("Expected file count generated", 1, _size);
      Map.Entry<String,CharSequence> _head_1 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      String _key = _head_1.getKey();
      Assert.assertEquals("In expected file output generated", "DEFAULT_OUTPUTshapes/TabShapeShapeBase.java", _key);
      CharSequence _issue248ExampleModelExpectedContent = this.issue248ExampleModelExpectedContent();
      String _string = _issue248ExampleModelExpectedContent.toString();
      Map.Entry<String,CharSequence> _head_2 = IterableExtensions.<Map.Entry<String,CharSequence>>head(entries);
      CharSequence _value = _head_2.getValue();
      String _string_1 = _value.toString();
      Assert.assertEquals("Expected file content generated", _string, _string_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private CharSequence issue248ExampleModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("shape TabShape {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("stretching(horizontal=false, vertical=false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rectangle style TabStyle {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("compartment (");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("id = tabCompartment");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("layout = fixed");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("spacing=2");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("margin=2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("position (x=0, y=20)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("size (width=600, height=400)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("style (background-color=RGB (192, 192, 192))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("text{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("align(horizontal=center,vertical=middle)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("position(x=0, y=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("size(width=600,height=20)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("style(background-color=blue font-color=red transparency=0.1)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("id=tabID");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence issue248ExampleModelExpectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is a generated Shape for Spray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package shapes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.Point;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.datatypes.IDimension;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.impl.AbstractAddShapeFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IGaService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.IPeCreateService;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.ColorConstant;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.util.IColorConstant;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.*;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.styles.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.ISprayConstants;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayAbstractLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.DefaultSprayShape;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.shape.SprayLayoutManager;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class TabShapeShapeBase extends DefaultSprayShape {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static enum TextIds {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tabCompartment,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tabID");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public TabShapeShapeBase(IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ContainerShape getShape(ContainerShape targetContainer, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Create a ContainerShape for this Shape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Diagram diagram = peService.getDiagramForShape(targetContainer);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape containerShape = peCreateService.createContainerShape(targetContainer, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(containerShape, \"TabShape.containerShape\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// define general layout for ContainerShape");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setProportional(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchH(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setHorizontalStrechable(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sprayStyle.getStyle(diagram).setStretchV(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setVerticalStrechable(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// layout data");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType containerLayout = SprayLayoutType.FIT;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(containerShape, containerLayout, 0, 0, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.getLayoutData(containerShape).setVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createCascadedElements(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createAnchorPoints(diagram, containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Fix the broken coordinate syaten for not active container shapes");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayAbstractLayoutManager.fixOffset(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return containerShape;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// START GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createCascadedElements(Diagram diagram, ContainerShape containerShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setMainPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("directEditingInfo.setPictogramElement(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm element_0 = gaService.createInvisibleRectangle(containerShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_0.setStyle(sprayStyle.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setShapeFromDsl(containerShape, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_0, 0, 0, 600, 420);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Invisible rectangle around the elements (because more then one element is on first layer).");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape invisibleShape = peCreateService.createContainerShape(containerShape, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(invisibleShape, \"TabShape.invisibleShape\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType layout_1 = SprayLayoutType.TOP;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(containerShape, layout_1, 0, 0);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphicsAlgorithm element_1 = gaService.createPlainRectangle(invisibleShape);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setStyle(sprayStyle.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setFilled(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_1.setLineVisible(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_1, 0, 0, 600, 420);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createElement_2(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("createElement_3(diagram, containerShape, sprayStyle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Set start values for height and width as properties on the element for Layout Feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager.setSizePictogramProperties(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Shape createElement_2(Diagram diagram,  ContainerShape parentShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ContainerShape shape_2 = peCreateService.createContainerShape(parentShape, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(shape_2, \"TabShape.shape_2\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setCompartment(shape_2, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GraphitiProperties.set(shape_2, ISprayConstants.TEXT_ID, \"tabCompartment\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutType layout_2 = SprayLayoutType.FIXED;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutManager(shape_2, layout_2, 2, 2, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutData(shape_2, 600, 400);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Rectangle element_2 = gaService.createPlainRectangle(shape_2);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ISprayStyle style_2 = new styles.();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_2.setStyle(style_2.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_2, 0, 20, 600, 400);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutData(shape_2, 600, 400, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_2.setBackground(gaService.manageColor(diagram,new ColorConstant(192, 192, 192)));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return shape_2;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Shape createElement_3(Diagram diagram,  ContainerShape parentShape, ISprayStyle sprayStyle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Shape shape_3 = peCreateService.createShape(parentShape, false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setId(shape_3, \"TabShape.shape_3\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Text element_3 = gaService.createPlainText(shape_3);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ISprayStyle style_3 = sprayStyle;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setStyle(style_3.getStyle(diagram));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gaService.setLocationAndSize(element_3, 0, 0, 600, 20);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutService.setLayoutData(shape_3, 600, 20, true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setVerticalAlignment(Orientation.ALIGNMENT_MIDDLE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(element_3, ISprayConstants.TEXT_ID, TextIds.tabID.name());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peService.setPropertyValue(shape_3, ISprayConstants.TEXT_ID, TextIds.tabID.name());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setValue(\"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setBackground(gaService.manageColor(diagram,IColorConstant.BLUE));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("element_3.setTransparency(0.1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Style style = element_3.getStyle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String fontName = style.getFont().getName();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("int fontSize = style.getFont().getSize();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("element_3.setForeground(gaService.manageColor(diagram,IColorConstant.RED));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean fontItalic = style.getFont().isItalic();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("boolean fontBold = style.getFont().isBold();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("style.setFont(gaService.manageFont(diagram, fontName, fontSize, fontItalic, fontBold));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getFeatureProvider().getDirectEditingInfo().setGraphicsAlgorithm(element_3);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return shape_3;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// STOP GENERATING CASCADED ELEMENTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void createAnchorPoints(Diagram diagram, ContainerShape containerShape) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("peCreateService.createChopboxAnchor(containerShape);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SprayLayoutManager getShapeLayout() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SprayLayoutManager layoutManager = new SprayLayoutManager();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeWidth(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMinSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setMaxSizeHeight(-1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchHorizontal(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("layoutManager.setStretchVertical(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return layoutManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
