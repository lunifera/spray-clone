/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.diagram;

import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.InMemoryFilesystemAccessExt;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner2.class)
@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jToolBehaviorProviderBaseTest extends AbstractSprayGeneratorTest {
  @Test
  public void test() {
    final InMemoryFilesystemAccessExt fsa = this.triggerGenerator("mod4j/mod4j-busmod.spray");
    final String keyClass = "DEFAULT_OUTPUTorg/eclipselabs/spray/examples/mod4j/diagram/Mod4jToolBehaviorProviderBase.java";
    Map<String,CharSequence> _files = fsa.getFiles();
    boolean _containsKey = _files.containsKey(keyClass);
    Assert.assertTrue((keyClass + " should have been generated"), _containsKey);
    Map<String,CharSequence> _files_1 = fsa.getFiles();
    CharSequence _get = _files_1.get(keyClass);
    String _string = _get.toString();
    CharSequence _expectedContent = this.expectedContent();
    String _string_1 = _expectedContent.toString();
    Assert.assertEquals((keyClass + " should have the expected content"), _string, _string_1);
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray ToolBehaviorProvider.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.diagram;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.dt.IDiagramTypeProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.palette.IPaletteCompartmentEntry;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.tb.AbstractSprayToolBehaviorProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.ContainerShape;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.common.collect.Lists;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAssociationFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateAutopackageFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBBBFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBoolPropertyFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassNameOnlyFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessClassSuperclassFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateBusinessRuleFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreatePackageFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateSimpleClassFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateStringPropertyFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.features.Mod4jCreateUniqueRuleFeature;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jToolBehaviorProviderBase extends AbstractSprayToolBehaviorProvider {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static final String COMPARTMENT_SHAPES      = \"Shapes\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static final String COMPARTMENT_RULES       = \"Rules\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static final String COMPARTMENT_CONNECTIONS = \"Connections\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static final String COMPARTMENT_PROPERTIES  = \"Properties\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jToolBehaviorProviderBase(final IDiagramTypeProvider dtp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(dtp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public GraphicsAlgorithm getSelectionBorder(PictogramElement pe) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean isFromDsl = SprayLayoutService.isShapeFromDsl(pe);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (isFromDsl) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ContainerShape container = (ContainerShape) pe;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!container.getChildren().isEmpty()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return container.getChildren().get(0).getGraphicsAlgorithm();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.getSelectionBorder(pe);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void buildCreationTools() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBusinessClassNameOnlyFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreatePackageFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateAutopackageFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBusinessClassFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateSimpleClassFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateStringPropertyFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateStringFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBoolPropertyFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateUniqueRuleFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBBBFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBusinessRuleFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateAssociationFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("buildCreationTool(new Mod4jCreateBusinessClassSuperclassFeature(this.getFeatureProvider()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Compartments");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Iterable<IPaletteCompartmentEntry> buildPaletteCompartments() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Lists.newArrayList(getPaletteCompartment(COMPARTMENT_SHAPES), getPaletteCompartment(COMPARTMENT_RULES), getPaletteCompartment(COMPARTMENT_CONNECTIONS), getPaletteCompartment(COMPARTMENT_PROPERTIES), getPaletteCompartment(COMPARTMENT_DEFAULT));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected IPaletteCompartmentEntry getPaletteCompartmentForFeature(final IFeature feature) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (feature instanceof Mod4jCreateBusinessClassNameOnlyFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreatePackageFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateAutopackageFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateBusinessClassFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateSimpleClassFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateStringPropertyFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_PROPERTIES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateStringFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_PROPERTIES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateBoolPropertyFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_PROPERTIES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateUniqueRuleFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_RULES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateBBBFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_SHAPES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateBusinessRuleFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_RULES);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (feature instanceof Mod4jCreateAssociationFeature) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getPaletteCompartment(COMPARTMENT_CONNECTIONS);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.getPaletteCompartmentForFeature(feature);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
