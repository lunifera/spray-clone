/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.tests.mod4j.mod4j.features;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipselabs.spray.generator.graphiti.tests.AbstractSprayGeneratorTest;
import org.eclipselabs.spray.generator.graphiti.tests.SprayTestsInjectorProvider;

/* @RunWith(XtextRunner2.class) */@InjectWith(SprayTestsInjectorProvider.class)
@SuppressWarnings("all")
public class Mod4jCreateBoolPropertyFeatureBaseTest extends AbstractSprayGeneratorTest {
  /* @Test
   */public void test() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method assertTrue is undefined for the type Mod4jCreateBoolPropertyFeatureBaseTest"
      + "\nThe method assertEquals is undefined for the type Mod4jCreateBoolPropertyFeatureBaseTest");
  }
  
  private CharSequence expectedContent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*************************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Spray CreateShapeFeature.xtend");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file contains generated and should not be changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Use the extension point class (the direct subclass of this class) to add manual code");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*************************************************************************************/");
    _builder.newLine();
    _builder.append("package org.eclipselabs.spray.examples.mod4j.features;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.ICreateContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.containers.SampleUtil;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.features.AbstractCreateFeature;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.layout.SprayLayoutService;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.runtime.graphiti.GraphitiProperties;");
    _builder.newLine();
    _builder.append("import samplepackage.BoolProperty;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.IAreaContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddContext;");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.ContainerShape;");
    _builder.newLine();
    _builder.append("import null.BusinessDomainDslFactory;");
    _builder.newLine();
    _builder.append("import org.eclipselabs.spray.examples.mod4j.diagram.Mod4jModelService;");
    _builder.newLine();
    _builder.append("import samplepackage.BoolProperty;");
    _builder.newLine();
    _builder.append("import samplepackage.BusinessDomainModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Mod4jCreateBoolPropertyFeatureBase extends AbstractCreateFeature {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static String TITLE = \"Create \";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected static String USER_QUESTION = \"Enter new  name\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected Mod4jModelService modelService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected BoolProperty newClass = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Mod4jCreateBoolPropertyFeatureBase (final IFeatureProvider fp) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// set name and description of the creation feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(fp, \"BoolProperty\", \"Create new BoolProperty\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("modelService = Mod4jModelService.getModelService(fp.getDiagramTypeProvider());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean canCreate(final ICreateContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TODO: Respect the cardinality of the containment reference");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (context.getTargetContainer() instanceof Diagram) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (context.getTargetContainer() instanceof ContainerShape) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// And now the new stuff");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// cls BusinessClass refers to this metaClass");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( target instanceof samplepackage.BusinessClass ){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (SprayLayoutService.isCompartment(context.getTargetContainer())) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String id = GraphitiProperties.get(context.getTargetContainer(), TEXT_ID);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if ( (id != null) && (id.equals(\"attributes\")) ) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// cls BusinessClass refers to this metaClass");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if( target instanceof samplepackage.BusinessClass ){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (SprayLayoutService.isCompartment(context.getTargetContainer())) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String id = GraphitiProperties.get(context.getTargetContainer(), TEXT_ID);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if ( (id != null) && (id.equals(\"simpleAttributes\")) ) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// cls UniqueRule refers to this metaClass");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* {@inheritDoc}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Object[] create(final ICreateContext context) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("newClass = createBoolProperty(context);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (newClass == null ) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return EMPTY;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// do the add");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("addGraphicalRepresentation(context, newClass);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// activate direct editing after object creation");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getFeatureProvider().getDirectEditingInfo().setActive(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// return newly created business object(s)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Object[] { newClass };");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//        ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* Creates a new {@link BoolProperty} instance and adds it to the containing type.");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("protected BoolProperty createBoolProperty(final ICreateContext context) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("// create BoolProperty instance");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final BoolProperty newClass = BusinessDomainDslFactory.eINSTANCE.createBoolProperty();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("boolean isContainment = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("final Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//              And now the NEW stuff");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("if( target instanceof samplepackage.BusinessClass ){");
    _builder.newLine();
    _builder.append("                       ");
    _builder.append("samplepackage.BusinessClass domainObject = (samplepackage.BusinessClass) target;");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("// containment");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("domainObject.getProperties().add(newClass);");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("return newClass;");
    _builder.newLine();
    _builder.append("                       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("if( target instanceof samplepackage.BusinessClass ){");
    _builder.newLine();
    _builder.append("                       ");
    _builder.append("samplepackage.BusinessClass domainObject = (samplepackage.BusinessClass) target;");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("// containment");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("domainObject.getProperties().add(newClass);");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("                           ");
    _builder.append("return newClass;");
    _builder.newLine();
    _builder.append("                       ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("// NOT containment ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("setDoneChanges(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return newClass;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
