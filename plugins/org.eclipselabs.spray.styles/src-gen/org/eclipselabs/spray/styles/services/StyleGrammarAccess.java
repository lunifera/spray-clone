/*
* generated by Xtext
*/
package org.eclipselabs.spray.styles.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class StyleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StyleContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleContainer");
		private final Assignment cStyleContainerElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStyleContainerElementStyleContainerElementParserRuleCall_0 = (RuleCall)cStyleContainerElementAssignment.eContents().get(0);
		
		//StyleContainer:
		//	styleContainerElement+=StyleContainerElement*;
		public ParserRule getRule() { return rule; }

		//styleContainerElement+=StyleContainerElement*
		public Assignment getStyleContainerElementAssignment() { return cStyleContainerElementAssignment; }

		//StyleContainerElement
		public RuleCall getStyleContainerElementStyleContainerElementParserRuleCall_0() { return cStyleContainerElementStyleContainerElementParserRuleCall_0; }
	}

	public class StyleContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleContainerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStyleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGradientParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StyleContainerElement:
		//	Style | Gradient;
		public ParserRule getRule() { return rule; }

		//Style | Gradient
		public Alternatives getAlternatives() { return cAlternatives; }

		//Style
		public RuleCall getStyleParserRuleCall_0() { return cStyleParserRuleCall_0; }

		//Gradient
		public RuleCall getGradientParserRuleCall_1() { return cGradientParserRuleCall_1; }
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cJAVAKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cSuperStyleAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cSuperStyleJvmTypeReferenceParserRuleCall_3_1_0_1_0 = (RuleCall)cSuperStyleAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cSuperStyleFromDslAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final CrossReference cSuperStyleFromDslStyleCrossReference_3_1_1_0 = (CrossReference)cSuperStyleFromDslAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSuperStyleFromDslStyleIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cSuperStyleFromDslStyleCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDescriptionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cDescriptionAssignment_5_2.eContents().get(0);
		private final Assignment cLayoutAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayoutStyleLayoutParserRuleCall_6_0 = (RuleCall)cLayoutAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Style:
		//	{Style} "style" name=ID ("extends" ("JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]))? "{"
		//	("description" "=" description=STRING)? layout=StyleLayout "}";
		public ParserRule getRule() { return rule; }

		//{Style} "style" name=ID ("extends" ("JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]))? "{" ("description"
		//"=" description=STRING)? layout=StyleLayout "}"
		public Group getGroup() { return cGroup; }

		//{Style}
		public Action getStyleAction_0() { return cStyleAction_0; }

		//"style"
		public Keyword getStyleKeyword_1() { return cStyleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" ("JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]))?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//"JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"JAVA" superStyle=JvmTypeReference
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_3_1_0_0() { return cJAVAKeyword_3_1_0_0; }

		//superStyle=JvmTypeReference
		public Assignment getSuperStyleAssignment_3_1_0_1() { return cSuperStyleAssignment_3_1_0_1; }

		//JvmTypeReference
		public RuleCall getSuperStyleJvmTypeReferenceParserRuleCall_3_1_0_1_0() { return cSuperStyleJvmTypeReferenceParserRuleCall_3_1_0_1_0; }

		//superStyleFromDsl=[Style]
		public Assignment getSuperStyleFromDslAssignment_3_1_1() { return cSuperStyleFromDslAssignment_3_1_1; }

		//[Style]
		public CrossReference getSuperStyleFromDslStyleCrossReference_3_1_1_0() { return cSuperStyleFromDslStyleCrossReference_3_1_1_0; }

		//ID
		public RuleCall getSuperStyleFromDslStyleIDTerminalRuleCall_3_1_1_0_1() { return cSuperStyleFromDslStyleIDTerminalRuleCall_3_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("description" "=" description=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"description"
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_5_2() { return cDescriptionAssignment_5_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_2_0() { return cDescriptionSTRINGTerminalRuleCall_5_2_0; }

		//layout=StyleLayout
		public Assignment getLayoutAssignment_6() { return cLayoutAssignment_6; }

		//StyleLayout
		public RuleCall getLayoutStyleLayoutParserRuleCall_6_0() { return cLayoutStyleLayoutParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GradientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Gradient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGradientAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGradientKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cDescriptionAssignment_4_2.eContents().get(0);
		private final Assignment cLayoutAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayoutGradientLayoutParserRuleCall_5_0 = (RuleCall)cLayoutAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Gradient:
		//	{Gradient} "gradient" name=ID "{" ("description" "=" description=STRING)? layout=GradientLayout "}";
		public ParserRule getRule() { return rule; }

		//{Gradient} "gradient" name=ID "{" ("description" "=" description=STRING)? layout=GradientLayout "}"
		public Group getGroup() { return cGroup; }

		//{Gradient}
		public Action getGradientAction_0() { return cGradientAction_0; }

		//"gradient"
		public Keyword getGradientKeyword_1() { return cGradientKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("description" "=" description=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"description"
		public Keyword getDescriptionKeyword_4_0() { return cDescriptionKeyword_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_4_2() { return cDescriptionAssignment_4_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_2_0() { return cDescriptionSTRINGTerminalRuleCall_4_2_0; }

		//layout=GradientLayout
		public Assignment getLayoutAssignment_5() { return cLayoutAssignment_5; }

		//GradientLayout
		public RuleCall getLayoutGradientLayoutParserRuleCall_5_0() { return cLayoutGradientLayoutParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StyleLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStyleLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cTransparencyKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTransparencyAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cTransparencyDOUBLEParserRuleCall_1_0_2_0 = (RuleCall)cTransparencyAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cBackgroundColorKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cBackgroundAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cBackgroundColorOrGradientParserRuleCall_1_1_2_0 = (RuleCall)cBackgroundAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cGradientOrientationKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cGradient_orientationAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cGradient_orientationGradientAllignmentEnumRuleCall_1_2_2_0 = (RuleCall)cGradient_orientationAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cHighlightingKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cHighlightingAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cHighlightingHighlightingValuesParserRuleCall_1_3_1_0 = (RuleCall)cHighlightingAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cLineColorKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cLineColorAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cLineColorColorWithTransparencyParserRuleCall_1_4_2_0 = (RuleCall)cLineColorAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cUnorderedGroup_1.eContents().get(5);
		private final Keyword cLineWidthKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cLineWidthAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cLineWidthINTTerminalRuleCall_1_5_2_0 = (RuleCall)cLineWidthAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cUnorderedGroup_1.eContents().get(6);
		private final Keyword cLineStyleKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cLineStyleAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cLineStyleLineStyleEnumRuleCall_1_6_2_0 = (RuleCall)cLineStyleAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cUnorderedGroup_1.eContents().get(7);
		private final Keyword cFontNameKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cFontNameAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cFontNameSTRINGTerminalRuleCall_1_7_2_0 = (RuleCall)cFontNameAssignment_1_7_2.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cUnorderedGroup_1.eContents().get(8);
		private final Keyword cFontColorKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cFontColorAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cFontColorColorParserRuleCall_1_8_2_0 = (RuleCall)cFontColorAssignment_1_8_2.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cUnorderedGroup_1.eContents().get(9);
		private final Keyword cFontSizeKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Assignment cFontSizeAssignment_1_9_2 = (Assignment)cGroup_1_9.eContents().get(2);
		private final RuleCall cFontSizeINTTerminalRuleCall_1_9_2_0 = (RuleCall)cFontSizeAssignment_1_9_2.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cUnorderedGroup_1.eContents().get(10);
		private final Keyword cFontItalicKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_10_1 = (Keyword)cGroup_1_10.eContents().get(1);
		private final Assignment cFontItalicAssignment_1_10_2 = (Assignment)cGroup_1_10.eContents().get(2);
		private final RuleCall cFontItalicYesNoBoolEnumRuleCall_1_10_2_0 = (RuleCall)cFontItalicAssignment_1_10_2.eContents().get(0);
		private final Group cGroup_1_11 = (Group)cUnorderedGroup_1.eContents().get(11);
		private final Keyword cFontBoldKeyword_1_11_0 = (Keyword)cGroup_1_11.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_11_1 = (Keyword)cGroup_1_11.eContents().get(1);
		private final Assignment cFontBoldAssignment_1_11_2 = (Assignment)cGroup_1_11.eContents().get(2);
		private final RuleCall cFontBoldYesNoBoolEnumRuleCall_1_11_2_0 = (RuleCall)cFontBoldAssignment_1_11_2.eContents().get(0);
		
		//StyleLayout:
		//	{StyleLayout} (("transparency" "=" transparency=DOUBLE)? & ("background-color" "=" background=ColorOrGradient)? &
		//	("gradient-orientation" "=" gradient_orientation=GradientAllignment)? & ("highlighting"
		//	highlighting=HighlightingValues)? & ("line-color" "=" lineColor=ColorWithTransparency)? & ("line-width" "="
		//	lineWidth=INT)? & ("line-style" "=" lineStyle=LineStyle)? & ("font-name" "=" fontName=STRING)? & ("font-color" "="
		//	fontColor=Color)? & ("font-size" "=" fontSize=INT)? & ("font-italic" "=" fontItalic=YesNoBool)? & ("font-bold" "="
		//	fontBold=YesNoBool)?);
		public ParserRule getRule() { return rule; }

		//{StyleLayout} (("transparency" "=" transparency=DOUBLE)? & ("background-color" "=" background=ColorOrGradient)? &
		//("gradient-orientation" "=" gradient_orientation=GradientAllignment)? & ("highlighting"
		//highlighting=HighlightingValues)? & ("line-color" "=" lineColor=ColorWithTransparency)? & ("line-width" "="
		//lineWidth=INT)? & ("line-style" "=" lineStyle=LineStyle)? & ("font-name" "=" fontName=STRING)? & ("font-color" "="
		//fontColor=Color)? & ("font-size" "=" fontSize=INT)? & ("font-italic" "=" fontItalic=YesNoBool)? & ("font-bold" "="
		//fontBold=YesNoBool)?)
		public Group getGroup() { return cGroup; }

		//{StyleLayout}
		public Action getStyleLayoutAction_0() { return cStyleLayoutAction_0; }

		//("transparency" "=" transparency=DOUBLE)? & ("background-color" "=" background=ColorOrGradient)? &
		//("gradient-orientation" "=" gradient_orientation=GradientAllignment)? & ("highlighting"
		//highlighting=HighlightingValues)? & ("line-color" "=" lineColor=ColorWithTransparency)? & ("line-width" "="
		//lineWidth=INT)? & ("line-style" "=" lineStyle=LineStyle)? & ("font-name" "=" fontName=STRING)? & ("font-color" "="
		//fontColor=Color)? & ("font-size" "=" fontSize=INT)? & ("font-italic" "=" fontItalic=YesNoBool)? & ("font-bold" "="
		//fontBold=YesNoBool)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//("transparency" "=" transparency=DOUBLE)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"transparency"
		public Keyword getTransparencyKeyword_1_0_0() { return cTransparencyKeyword_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//transparency=DOUBLE
		public Assignment getTransparencyAssignment_1_0_2() { return cTransparencyAssignment_1_0_2; }

		//DOUBLE
		public RuleCall getTransparencyDOUBLEParserRuleCall_1_0_2_0() { return cTransparencyDOUBLEParserRuleCall_1_0_2_0; }

		//("background-color" "=" background=ColorOrGradient)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"background-color"
		public Keyword getBackgroundColorKeyword_1_1_0() { return cBackgroundColorKeyword_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }

		//background=ColorOrGradient
		public Assignment getBackgroundAssignment_1_1_2() { return cBackgroundAssignment_1_1_2; }

		//ColorOrGradient
		public RuleCall getBackgroundColorOrGradientParserRuleCall_1_1_2_0() { return cBackgroundColorOrGradientParserRuleCall_1_1_2_0; }

		//("gradient-orientation" "=" gradient_orientation=GradientAllignment)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"gradient-orientation"
		public Keyword getGradientOrientationKeyword_1_2_0() { return cGradientOrientationKeyword_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_1() { return cEqualsSignKeyword_1_2_1; }

		//gradient_orientation=GradientAllignment
		public Assignment getGradient_orientationAssignment_1_2_2() { return cGradient_orientationAssignment_1_2_2; }

		//GradientAllignment
		public RuleCall getGradient_orientationGradientAllignmentEnumRuleCall_1_2_2_0() { return cGradient_orientationGradientAllignmentEnumRuleCall_1_2_2_0; }

		//("highlighting" highlighting=HighlightingValues)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"highlighting"
		public Keyword getHighlightingKeyword_1_3_0() { return cHighlightingKeyword_1_3_0; }

		//highlighting=HighlightingValues
		public Assignment getHighlightingAssignment_1_3_1() { return cHighlightingAssignment_1_3_1; }

		//HighlightingValues
		public RuleCall getHighlightingHighlightingValuesParserRuleCall_1_3_1_0() { return cHighlightingHighlightingValuesParserRuleCall_1_3_1_0; }

		//("line-color" "=" lineColor=ColorWithTransparency)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"line-color"
		public Keyword getLineColorKeyword_1_4_0() { return cLineColorKeyword_1_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_4_1() { return cEqualsSignKeyword_1_4_1; }

		//lineColor=ColorWithTransparency
		public Assignment getLineColorAssignment_1_4_2() { return cLineColorAssignment_1_4_2; }

		//ColorWithTransparency
		public RuleCall getLineColorColorWithTransparencyParserRuleCall_1_4_2_0() { return cLineColorColorWithTransparencyParserRuleCall_1_4_2_0; }

		//("line-width" "=" lineWidth=INT)?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"line-width"
		public Keyword getLineWidthKeyword_1_5_0() { return cLineWidthKeyword_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_5_1() { return cEqualsSignKeyword_1_5_1; }

		//lineWidth=INT
		public Assignment getLineWidthAssignment_1_5_2() { return cLineWidthAssignment_1_5_2; }

		//INT
		public RuleCall getLineWidthINTTerminalRuleCall_1_5_2_0() { return cLineWidthINTTerminalRuleCall_1_5_2_0; }

		//("line-style" "=" lineStyle=LineStyle)?
		public Group getGroup_1_6() { return cGroup_1_6; }

		//"line-style"
		public Keyword getLineStyleKeyword_1_6_0() { return cLineStyleKeyword_1_6_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_6_1() { return cEqualsSignKeyword_1_6_1; }

		//lineStyle=LineStyle
		public Assignment getLineStyleAssignment_1_6_2() { return cLineStyleAssignment_1_6_2; }

		//LineStyle
		public RuleCall getLineStyleLineStyleEnumRuleCall_1_6_2_0() { return cLineStyleLineStyleEnumRuleCall_1_6_2_0; }

		//("font-name" "=" fontName=STRING)?
		public Group getGroup_1_7() { return cGroup_1_7; }

		//"font-name"
		public Keyword getFontNameKeyword_1_7_0() { return cFontNameKeyword_1_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_7_1() { return cEqualsSignKeyword_1_7_1; }

		//fontName=STRING
		public Assignment getFontNameAssignment_1_7_2() { return cFontNameAssignment_1_7_2; }

		//STRING
		public RuleCall getFontNameSTRINGTerminalRuleCall_1_7_2_0() { return cFontNameSTRINGTerminalRuleCall_1_7_2_0; }

		//("font-color" "=" fontColor=Color)?
		public Group getGroup_1_8() { return cGroup_1_8; }

		//"font-color"
		public Keyword getFontColorKeyword_1_8_0() { return cFontColorKeyword_1_8_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_8_1() { return cEqualsSignKeyword_1_8_1; }

		//fontColor=Color
		public Assignment getFontColorAssignment_1_8_2() { return cFontColorAssignment_1_8_2; }

		//Color
		public RuleCall getFontColorColorParserRuleCall_1_8_2_0() { return cFontColorColorParserRuleCall_1_8_2_0; }

		//("font-size" "=" fontSize=INT)?
		public Group getGroup_1_9() { return cGroup_1_9; }

		//"font-size"
		public Keyword getFontSizeKeyword_1_9_0() { return cFontSizeKeyword_1_9_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_9_1() { return cEqualsSignKeyword_1_9_1; }

		//fontSize=INT
		public Assignment getFontSizeAssignment_1_9_2() { return cFontSizeAssignment_1_9_2; }

		//INT
		public RuleCall getFontSizeINTTerminalRuleCall_1_9_2_0() { return cFontSizeINTTerminalRuleCall_1_9_2_0; }

		//("font-italic" "=" fontItalic=YesNoBool)?
		public Group getGroup_1_10() { return cGroup_1_10; }

		//"font-italic"
		public Keyword getFontItalicKeyword_1_10_0() { return cFontItalicKeyword_1_10_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_10_1() { return cEqualsSignKeyword_1_10_1; }

		//fontItalic=YesNoBool
		public Assignment getFontItalicAssignment_1_10_2() { return cFontItalicAssignment_1_10_2; }

		//YesNoBool
		public RuleCall getFontItalicYesNoBoolEnumRuleCall_1_10_2_0() { return cFontItalicYesNoBoolEnumRuleCall_1_10_2_0; }

		//("font-bold" "=" fontBold=YesNoBool)?
		public Group getGroup_1_11() { return cGroup_1_11; }

		//"font-bold"
		public Keyword getFontBoldKeyword_1_11_0() { return cFontBoldKeyword_1_11_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_11_1() { return cEqualsSignKeyword_1_11_1; }

		//fontBold=YesNoBool
		public Assignment getFontBoldAssignment_1_11_2() { return cFontBoldAssignment_1_11_2; }

		//YesNoBool
		public RuleCall getFontBoldYesNoBoolEnumRuleCall_1_11_2_0() { return cFontBoldYesNoBoolEnumRuleCall_1_11_2_0; }
	}

	public class GradientLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GradientLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGradientLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAreaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAreaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAreaGradientColorAreaParserRuleCall_1_1_0 = (RuleCall)cAreaAssignment_1_1.eContents().get(0);
		
		//GradientLayout:
		//	{GradientLayout} ("area" area+=GradientColorArea)*;
		public ParserRule getRule() { return rule; }

		//{GradientLayout} ("area" area+=GradientColorArea)*
		public Group getGroup() { return cGroup; }

		//{GradientLayout}
		public Action getGradientLayoutAction_0() { return cGradientLayoutAction_0; }

		//("area" area+=GradientColorArea)*
		public Group getGroup_1() { return cGroup_1; }

		//"area"
		public Keyword getAreaKeyword_1_0() { return cAreaKeyword_1_0; }

		//area+=GradientColorArea
		public Assignment getAreaAssignment_1_1() { return cAreaAssignment_1_1; }

		//GradientColorArea
		public RuleCall getAreaGradientColorAreaParserRuleCall_1_1_0() { return cAreaGradientColorAreaParserRuleCall_1_1_0; }
	}

	public class HighlightingValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HighlightingValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHighlightingValuesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSelectedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSelectedAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSelectedColorOrGradientParserRuleCall_2_2_0 = (RuleCall)cSelectedAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMultiselectedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMultiselectedAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMultiselectedColorOrGradientParserRuleCall_3_2_0 = (RuleCall)cMultiselectedAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAllowedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAllowedAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAllowedColorOrGradientParserRuleCall_4_2_0 = (RuleCall)cAllowedAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnallowedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cUnallowedAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cUnallowedColorOrGradientParserRuleCall_5_2_0 = (RuleCall)cUnallowedAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//HighlightingValues:
		//	{HighlightingValues} "(" ("selected" "=" selected=ColorOrGradient)? ("multiselected" "="
		//	multiselected=ColorOrGradient)? ("allowed" "=" allowed=ColorOrGradient)? ("unallowed" "=" unallowed=ColorOrGradient)?
		//	")";
		public ParserRule getRule() { return rule; }

		//{HighlightingValues} "(" ("selected" "=" selected=ColorOrGradient)? ("multiselected" "=" multiselected=ColorOrGradient)?
		//("allowed" "=" allowed=ColorOrGradient)? ("unallowed" "=" unallowed=ColorOrGradient)? ")"
		public Group getGroup() { return cGroup; }

		//{HighlightingValues}
		public Action getHighlightingValuesAction_0() { return cHighlightingValuesAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//("selected" "=" selected=ColorOrGradient)?
		public Group getGroup_2() { return cGroup_2; }

		//"selected"
		public Keyword getSelectedKeyword_2_0() { return cSelectedKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//selected=ColorOrGradient
		public Assignment getSelectedAssignment_2_2() { return cSelectedAssignment_2_2; }

		//ColorOrGradient
		public RuleCall getSelectedColorOrGradientParserRuleCall_2_2_0() { return cSelectedColorOrGradientParserRuleCall_2_2_0; }

		//("multiselected" "=" multiselected=ColorOrGradient)?
		public Group getGroup_3() { return cGroup_3; }

		//"multiselected"
		public Keyword getMultiselectedKeyword_3_0() { return cMultiselectedKeyword_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//multiselected=ColorOrGradient
		public Assignment getMultiselectedAssignment_3_2() { return cMultiselectedAssignment_3_2; }

		//ColorOrGradient
		public RuleCall getMultiselectedColorOrGradientParserRuleCall_3_2_0() { return cMultiselectedColorOrGradientParserRuleCall_3_2_0; }

		//("allowed" "=" allowed=ColorOrGradient)?
		public Group getGroup_4() { return cGroup_4; }

		//"allowed"
		public Keyword getAllowedKeyword_4_0() { return cAllowedKeyword_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }

		//allowed=ColorOrGradient
		public Assignment getAllowedAssignment_4_2() { return cAllowedAssignment_4_2; }

		//ColorOrGradient
		public RuleCall getAllowedColorOrGradientParserRuleCall_4_2_0() { return cAllowedColorOrGradientParserRuleCall_4_2_0; }

		//("unallowed" "=" unallowed=ColorOrGradient)?
		public Group getGroup_5() { return cGroup_5; }

		//"unallowed"
		public Keyword getUnallowedKeyword_5_0() { return cUnallowedKeyword_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//unallowed=ColorOrGradient
		public Assignment getUnallowedAssignment_5_2() { return cUnallowedAssignment_5_2; }

		//ColorOrGradient
		public RuleCall getUnallowedColorOrGradientParserRuleCall_5_2_0() { return cUnallowedColorOrGradientParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class GradientColorAreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GradientColorArea");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGradientColorAreaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColorColorParserRuleCall_4_0 = (RuleCall)cColorAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOffsetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOffsetAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOffsetDOUBLEParserRuleCall_8_0 = (RuleCall)cOffsetAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//GradientColorArea:
		//	{GradientColorArea} "(" "color" "=" color=Color "," "offset" "=" offset=DOUBLE ")"+;
		public ParserRule getRule() { return rule; }

		//{GradientColorArea} "(" "color" "=" color=Color "," "offset" "=" offset=DOUBLE ")"+
		public Group getGroup() { return cGroup; }

		//{GradientColorArea}
		public Action getGradientColorAreaAction_0() { return cGradientColorAreaAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"color"
		public Keyword getColorKeyword_2() { return cColorKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//color=Color
		public Assignment getColorAssignment_4() { return cColorAssignment_4; }

		//Color
		public RuleCall getColorColorParserRuleCall_4_0() { return cColorColorParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"offset"
		public Keyword getOffsetKeyword_6() { return cOffsetKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//offset=DOUBLE
		public Assignment getOffsetAssignment_8() { return cOffsetAssignment_8; }

		//DOUBLE
		public RuleCall getOffsetDOUBLEParserRuleCall_8_0() { return cOffsetDOUBLEParserRuleCall_8_0; }

		//")"+
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class ColorOrGradientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorOrGradient");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransparentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGradientRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ColorOrGradient:
		//	Color | Transparent | GradientRef;
		public ParserRule getRule() { return rule; }

		//Color | Transparent | GradientRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//Color
		public RuleCall getColorParserRuleCall_0() { return cColorParserRuleCall_0; }

		//Transparent
		public RuleCall getTransparentParserRuleCall_1() { return cTransparentParserRuleCall_1; }

		//GradientRef
		public RuleCall getGradientRefParserRuleCall_2() { return cGradientRefParserRuleCall_2; }
	}

	public class ColorWithTransparencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorWithTransparency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransparentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ColorWithTransparency:
		//	Color | Transparent;
		public ParserRule getRule() { return rule; }

		//Color | Transparent
		public Alternatives getAlternatives() { return cAlternatives; }

		//Color
		public RuleCall getColorParserRuleCall_0() { return cColorParserRuleCall_0; }

		//Transparent
		public RuleCall getTransparentParserRuleCall_1() { return cTransparentParserRuleCall_1; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRGBColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorConstantRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Color:
		//	RGBColor | ColorConstantRef;
		public ParserRule getRule() { return rule; }

		//RGBColor | ColorConstantRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//RGBColor
		public RuleCall getRGBColorParserRuleCall_0() { return cRGBColorParserRuleCall_0; }

		//ColorConstantRef
		public RuleCall getColorConstantRefParserRuleCall_1() { return cColorConstantRefParserRuleCall_1; }
	}

	public class RGBColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGBColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRGBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRedINTTerminalRuleCall_2_0 = (RuleCall)cRedAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGreenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGreenINTTerminalRuleCall_4_0 = (RuleCall)cGreenAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlueINTTerminalRuleCall_6_0 = (RuleCall)cBlueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RGBColor:
		//	"RGB" "(" red=INT "," green=INT "," blue=INT ")";
		public ParserRule getRule() { return rule; }

		//"RGB" "(" red=INT "," green=INT "," blue=INT ")"
		public Group getGroup() { return cGroup; }

		//"RGB"
		public Keyword getRGBKeyword_0() { return cRGBKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//red=INT
		public Assignment getRedAssignment_2() { return cRedAssignment_2; }

		//INT
		public RuleCall getRedINTTerminalRuleCall_2_0() { return cRedINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//green=INT
		public Assignment getGreenAssignment_4() { return cGreenAssignment_4; }

		//INT
		public RuleCall getGreenINTTerminalRuleCall_4_0() { return cGreenINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//blue=INT
		public Assignment getBlueAssignment_6() { return cBlueAssignment_6; }

		//INT
		public RuleCall getBlueINTTerminalRuleCall_6_0() { return cBlueINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class GradientRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GradientRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGradientRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cJAVAKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cGradientRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cGradientRefJvmTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cGradientRefAssignment_1_0_1.eContents().get(0);
		private final Assignment cGradientRefFromDslAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cGradientRefFromDslGradientCrossReference_1_1_0 = (CrossReference)cGradientRefFromDslAssignment_1_1.eContents().get(0);
		private final RuleCall cGradientRefFromDslGradientIDTerminalRuleCall_1_1_0_1 = (RuleCall)cGradientRefFromDslGradientCrossReference_1_1_0.eContents().get(1);
		
		//GradientRef:
		//	{GradientRef} ("JAVA" gradientRef=JvmTypeReference | gradientRefFromDsl=[Gradient]);
		public ParserRule getRule() { return rule; }

		//{GradientRef} ("JAVA" gradientRef=JvmTypeReference | gradientRefFromDsl=[Gradient])
		public Group getGroup() { return cGroup; }

		//{GradientRef}
		public Action getGradientRefAction_0() { return cGradientRefAction_0; }

		//"JAVA" gradientRef=JvmTypeReference | gradientRefFromDsl=[Gradient]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"JAVA" gradientRef=JvmTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"JAVA"
		public Keyword getJAVAKeyword_1_0_0() { return cJAVAKeyword_1_0_0; }

		//gradientRef=JvmTypeReference
		public Assignment getGradientRefAssignment_1_0_1() { return cGradientRefAssignment_1_0_1; }

		//JvmTypeReference
		public RuleCall getGradientRefJvmTypeReferenceParserRuleCall_1_0_1_0() { return cGradientRefJvmTypeReferenceParserRuleCall_1_0_1_0; }

		//gradientRefFromDsl=[Gradient]
		public Assignment getGradientRefFromDslAssignment_1_1() { return cGradientRefFromDslAssignment_1_1; }

		//[Gradient]
		public CrossReference getGradientRefFromDslGradientCrossReference_1_1_0() { return cGradientRefFromDslGradientCrossReference_1_1_0; }

		//ID
		public RuleCall getGradientRefFromDslGradientIDTerminalRuleCall_1_1_0_1() { return cGradientRefFromDslGradientIDTerminalRuleCall_1_1_0_1; }
	}

	public class ColorConstantRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorConstantRef");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueColorConstantsEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ColorConstantRef:
		//	value=ColorConstants;
		public ParserRule getRule() { return rule; }

		//value=ColorConstants
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ColorConstants
		public RuleCall getValueColorConstantsEnumRuleCall_0() { return cValueColorConstantsEnumRuleCall_0; }
	}

	public class TransparentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transparent");
		private final Assignment cTransparentAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTransparentTransparentKeyword_0 = (Keyword)cTransparentAssignment.eContents().get(0);
		
		//Transparent:
		//	transparent?="transparent";
		public ParserRule getRule() { return rule; }

		//transparent?="transparent"
		public Assignment getTransparentAssignment() { return cTransparentAssignment; }

		//"transparent"
		public Keyword getTransparentTransparentKeyword_0() { return cTransparentTransparentKeyword_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EDouble:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	public class ColorConstantsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColorConstants");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWHITEWhiteKeyword_0_0 = (Keyword)cWHITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_LIGHT_GRAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLIGHT_LIGHT_GRAYVeryLightGrayKeyword_1_0 = (Keyword)cLIGHT_LIGHT_GRAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GRAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLIGHT_GRAYLightGrayKeyword_2_0 = (Keyword)cLIGHT_GRAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGRAYGrayKeyword_3_0 = (Keyword)cGRAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GRAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDARK_GRAYDarkGrayKeyword_4_0 = (Keyword)cDARK_GRAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBLACKBlackKeyword_5_0 = (Keyword)cBLACKEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cREDRedKeyword_6_0 = (Keyword)cREDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_ORANGEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLIGHT_ORANGELightOrangeKeyword_7_0 = (Keyword)cLIGHT_ORANGEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cORANGEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cORANGEOrangeKeyword_8_0 = (Keyword)cORANGEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_ORANGEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDARK_ORANGEDarkOrangeKeyword_9_0 = (Keyword)cDARK_ORANGEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cYELLOWYellowKeyword_10_0 = (Keyword)cYELLOWEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGREENGreenKeyword_11_0 = (Keyword)cGREENEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GREENEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLIGHT_GREENLightGreenKeyword_12_0 = (Keyword)cLIGHT_GREENEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GREENEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cDARK_GREENDarkGreenKeyword_13_0 = (Keyword)cDARK_GREENEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cCYANEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cCYANCyanKeyword_14_0 = (Keyword)cCYANEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_BLUEEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cLIGHT_BLUELightBlueKeyword_15_0 = (Keyword)cLIGHT_BLUEEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cBLUEBlueKeyword_16_0 = (Keyword)cBLUEEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_BLUEEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cDARK_BLUEDarkBlueKeyword_17_0 = (Keyword)cDARK_BLUEEnumLiteralDeclaration_17.eContents().get(0);
		
		//enum ColorConstants:
		//	WHITE="white" | LIGHT_LIGHT_GRAY="very-light-gray" | LIGHT_GRAY="light-gray" | GRAY="gray" | DARK_GRAY="dark-gray" |
		//	BLACK="black" | RED="red" | LIGHT_ORANGE="light-orange" | ORANGE="orange" | DARK_ORANGE="dark-orange" |
		//	YELLOW="yellow" | GREEN="green" | LIGHT_GREEN="light-green" | DARK_GREEN="dark-green" | CYAN="cyan" |
		//	LIGHT_BLUE="light-blue" | BLUE="blue" | DARK_BLUE="dark-blue";
		public EnumRule getRule() { return rule; }

		//WHITE="white" | LIGHT_LIGHT_GRAY="very-light-gray" | LIGHT_GRAY="light-gray" | GRAY="gray" | DARK_GRAY="dark-gray" |
		//BLACK="black" | RED="red" | LIGHT_ORANGE="light-orange" | ORANGE="orange" | DARK_ORANGE="dark-orange" | YELLOW="yellow"
		//| GREEN="green" | LIGHT_GREEN="light-green" | DARK_GREEN="dark-green" | CYAN="cyan" | LIGHT_BLUE="light-blue" |
		//BLUE="blue" | DARK_BLUE="dark-blue"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WHITE="white"
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_0() { return cWHITEEnumLiteralDeclaration_0; }

		//"white"
		public Keyword getWHITEWhiteKeyword_0_0() { return cWHITEWhiteKeyword_0_0; }

		//LIGHT_LIGHT_GRAY="very-light-gray"
		public EnumLiteralDeclaration getLIGHT_LIGHT_GRAYEnumLiteralDeclaration_1() { return cLIGHT_LIGHT_GRAYEnumLiteralDeclaration_1; }

		//"very-light-gray"
		public Keyword getLIGHT_LIGHT_GRAYVeryLightGrayKeyword_1_0() { return cLIGHT_LIGHT_GRAYVeryLightGrayKeyword_1_0; }

		//LIGHT_GRAY="light-gray"
		public EnumLiteralDeclaration getLIGHT_GRAYEnumLiteralDeclaration_2() { return cLIGHT_GRAYEnumLiteralDeclaration_2; }

		//"light-gray"
		public Keyword getLIGHT_GRAYLightGrayKeyword_2_0() { return cLIGHT_GRAYLightGrayKeyword_2_0; }

		//GRAY="gray"
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_3() { return cGRAYEnumLiteralDeclaration_3; }

		//"gray"
		public Keyword getGRAYGrayKeyword_3_0() { return cGRAYGrayKeyword_3_0; }

		//DARK_GRAY="dark-gray"
		public EnumLiteralDeclaration getDARK_GRAYEnumLiteralDeclaration_4() { return cDARK_GRAYEnumLiteralDeclaration_4; }

		//"dark-gray"
		public Keyword getDARK_GRAYDarkGrayKeyword_4_0() { return cDARK_GRAYDarkGrayKeyword_4_0; }

		//BLACK="black"
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_5() { return cBLACKEnumLiteralDeclaration_5; }

		//"black"
		public Keyword getBLACKBlackKeyword_5_0() { return cBLACKBlackKeyword_5_0; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_6() { return cREDEnumLiteralDeclaration_6; }

		//"red"
		public Keyword getREDRedKeyword_6_0() { return cREDRedKeyword_6_0; }

		//LIGHT_ORANGE="light-orange"
		public EnumLiteralDeclaration getLIGHT_ORANGEEnumLiteralDeclaration_7() { return cLIGHT_ORANGEEnumLiteralDeclaration_7; }

		//"light-orange"
		public Keyword getLIGHT_ORANGELightOrangeKeyword_7_0() { return cLIGHT_ORANGELightOrangeKeyword_7_0; }

		//ORANGE="orange"
		public EnumLiteralDeclaration getORANGEEnumLiteralDeclaration_8() { return cORANGEEnumLiteralDeclaration_8; }

		//"orange"
		public Keyword getORANGEOrangeKeyword_8_0() { return cORANGEOrangeKeyword_8_0; }

		//DARK_ORANGE="dark-orange"
		public EnumLiteralDeclaration getDARK_ORANGEEnumLiteralDeclaration_9() { return cDARK_ORANGEEnumLiteralDeclaration_9; }

		//"dark-orange"
		public Keyword getDARK_ORANGEDarkOrangeKeyword_9_0() { return cDARK_ORANGEDarkOrangeKeyword_9_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_10() { return cYELLOWEnumLiteralDeclaration_10; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_10_0() { return cYELLOWYellowKeyword_10_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_11() { return cGREENEnumLiteralDeclaration_11; }

		//"green"
		public Keyword getGREENGreenKeyword_11_0() { return cGREENGreenKeyword_11_0; }

		//LIGHT_GREEN="light-green"
		public EnumLiteralDeclaration getLIGHT_GREENEnumLiteralDeclaration_12() { return cLIGHT_GREENEnumLiteralDeclaration_12; }

		//"light-green"
		public Keyword getLIGHT_GREENLightGreenKeyword_12_0() { return cLIGHT_GREENLightGreenKeyword_12_0; }

		//DARK_GREEN="dark-green"
		public EnumLiteralDeclaration getDARK_GREENEnumLiteralDeclaration_13() { return cDARK_GREENEnumLiteralDeclaration_13; }

		//"dark-green"
		public Keyword getDARK_GREENDarkGreenKeyword_13_0() { return cDARK_GREENDarkGreenKeyword_13_0; }

		//CYAN="cyan"
		public EnumLiteralDeclaration getCYANEnumLiteralDeclaration_14() { return cCYANEnumLiteralDeclaration_14; }

		//"cyan"
		public Keyword getCYANCyanKeyword_14_0() { return cCYANCyanKeyword_14_0; }

		//LIGHT_BLUE="light-blue"
		public EnumLiteralDeclaration getLIGHT_BLUEEnumLiteralDeclaration_15() { return cLIGHT_BLUEEnumLiteralDeclaration_15; }

		//"light-blue"
		public Keyword getLIGHT_BLUELightBlueKeyword_15_0() { return cLIGHT_BLUELightBlueKeyword_15_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_16() { return cBLUEEnumLiteralDeclaration_16; }

		//"blue"
		public Keyword getBLUEBlueKeyword_16_0() { return cBLUEBlueKeyword_16_0; }

		//DARK_BLUE="dark-blue"
		public EnumLiteralDeclaration getDARK_BLUEEnumLiteralDeclaration_17() { return cDARK_BLUEEnumLiteralDeclaration_17; }

		//"dark-blue"
		public Keyword getDARK_BLUEDarkBlueKeyword_17_0() { return cDARK_BLUEDarkBlueKeyword_17_0; }
	}

	public class LineStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LineStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOLIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOLIDSolidKeyword_0_0 = (Keyword)cSOLIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOTDotKeyword_1_0 = (Keyword)cDOTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDASHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDASHDashKeyword_2_0 = (Keyword)cDASHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDASHDOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDASHDOTDashDotKeyword_3_0 = (Keyword)cDASHDOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDASHDOTDOTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDASHDOTDOTDashDotDotKeyword_4_0 = (Keyword)cDASHDOTDOTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum LineStyle:
		//	SOLID="solid" | DOT="dot" | DASH="dash" | DASHDOT="dash-dot" | DASHDOTDOT="dash-dot-dot";
		public EnumRule getRule() { return rule; }

		//SOLID="solid" | DOT="dot" | DASH="dash" | DASHDOT="dash-dot" | DASHDOTDOT="dash-dot-dot"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SOLID="solid"
		public EnumLiteralDeclaration getSOLIDEnumLiteralDeclaration_0() { return cSOLIDEnumLiteralDeclaration_0; }

		//"solid"
		public Keyword getSOLIDSolidKeyword_0_0() { return cSOLIDSolidKeyword_0_0; }

		//DOT="dot"
		public EnumLiteralDeclaration getDOTEnumLiteralDeclaration_1() { return cDOTEnumLiteralDeclaration_1; }

		//"dot"
		public Keyword getDOTDotKeyword_1_0() { return cDOTDotKeyword_1_0; }

		//DASH="dash"
		public EnumLiteralDeclaration getDASHEnumLiteralDeclaration_2() { return cDASHEnumLiteralDeclaration_2; }

		//"dash"
		public Keyword getDASHDashKeyword_2_0() { return cDASHDashKeyword_2_0; }

		//DASHDOT="dash-dot"
		public EnumLiteralDeclaration getDASHDOTEnumLiteralDeclaration_3() { return cDASHDOTEnumLiteralDeclaration_3; }

		//"dash-dot"
		public Keyword getDASHDOTDashDotKeyword_3_0() { return cDASHDOTDashDotKeyword_3_0; }

		//DASHDOTDOT="dash-dot-dot"
		public EnumLiteralDeclaration getDASHDOTDOTEnumLiteralDeclaration_4() { return cDASHDOTDOTEnumLiteralDeclaration_4; }

		//"dash-dot-dot"
		public Keyword getDASHDOTDOTDashDotDotKeyword_4_0() { return cDASHDOTDOTDashDotDotKeyword_4_0; }
	}

	public class YesNoBoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "YesNoBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cYESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cYESYesKeyword_0_0 = (Keyword)cYESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONoKeyword_1_0 = (Keyword)cNOEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum YesNoBool:
		//	YES="yes" | NO="no";
		public EnumRule getRule() { return rule; }

		//YES="yes" | NO="no"
		public Alternatives getAlternatives() { return cAlternatives; }

		//YES="yes"
		public EnumLiteralDeclaration getYESEnumLiteralDeclaration_0() { return cYESEnumLiteralDeclaration_0; }

		//"yes"
		public Keyword getYESYesKeyword_0_0() { return cYESYesKeyword_0_0; }

		//NO="no"
		public EnumLiteralDeclaration getNOEnumLiteralDeclaration_1() { return cNOEnumLiteralDeclaration_1; }

		//"no"
		public Keyword getNONoKeyword_1_0() { return cNONoKeyword_1_0; }
	}

	public class GradientAllignmentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GradientAllignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHORIZONTALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHORIZONTALHorizontalKeyword_0_0 = (Keyword)cHORIZONTALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERTICALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERTICALVerticalKeyword_1_0 = (Keyword)cVERTICALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GradientAllignment:
		//	HORIZONTAL="horizontal" | VERTICAL="vertical";
		public EnumRule getRule() { return rule; }

		//HORIZONTAL="horizontal" | VERTICAL="vertical"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HORIZONTAL="horizontal"
		public EnumLiteralDeclaration getHORIZONTALEnumLiteralDeclaration_0() { return cHORIZONTALEnumLiteralDeclaration_0; }

		//"horizontal"
		public Keyword getHORIZONTALHorizontalKeyword_0_0() { return cHORIZONTALHorizontalKeyword_0_0; }

		//VERTICAL="vertical"
		public EnumLiteralDeclaration getVERTICALEnumLiteralDeclaration_1() { return cVERTICALEnumLiteralDeclaration_1; }

		//"vertical"
		public Keyword getVERTICALVerticalKeyword_1_0() { return cVERTICALVerticalKeyword_1_0; }
	}
	
	private StyleContainerElements pStyleContainer;
	private StyleContainerElementElements pStyleContainerElement;
	private StyleElements pStyle;
	private GradientElements pGradient;
	private StyleLayoutElements pStyleLayout;
	private GradientLayoutElements pGradientLayout;
	private HighlightingValuesElements pHighlightingValues;
	private GradientColorAreaElements pGradientColorArea;
	private ColorOrGradientElements pColorOrGradient;
	private ColorWithTransparencyElements pColorWithTransparency;
	private ColorElements pColor;
	private RGBColorElements pRGBColor;
	private GradientRefElements pGradientRef;
	private ColorConstantRefElements pColorConstantRef;
	private TransparentElements pTransparent;
	private ColorConstantsElements unknownRuleColorConstants;
	private LineStyleElements unknownRuleLineStyle;
	private YesNoBoolElements unknownRuleYesNoBool;
	private GradientAllignmentElements unknownRuleGradientAllignment;
	private DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public StyleGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.spray.styles.Style".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//StyleContainer:
	//	styleContainerElement+=StyleContainerElement*;
	public StyleContainerElements getStyleContainerAccess() {
		return (pStyleContainer != null) ? pStyleContainer : (pStyleContainer = new StyleContainerElements());
	}
	
	public ParserRule getStyleContainerRule() {
		return getStyleContainerAccess().getRule();
	}

	//StyleContainerElement:
	//	Style | Gradient;
	public StyleContainerElementElements getStyleContainerElementAccess() {
		return (pStyleContainerElement != null) ? pStyleContainerElement : (pStyleContainerElement = new StyleContainerElementElements());
	}
	
	public ParserRule getStyleContainerElementRule() {
		return getStyleContainerElementAccess().getRule();
	}

	//Style:
	//	{Style} "style" name=ID ("extends" ("JAVA" superStyle=JvmTypeReference | superStyleFromDsl=[Style]))? "{"
	//	("description" "=" description=STRING)? layout=StyleLayout "}";
	public StyleElements getStyleAccess() {
		return (pStyle != null) ? pStyle : (pStyle = new StyleElements());
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//Gradient:
	//	{Gradient} "gradient" name=ID "{" ("description" "=" description=STRING)? layout=GradientLayout "}";
	public GradientElements getGradientAccess() {
		return (pGradient != null) ? pGradient : (pGradient = new GradientElements());
	}
	
	public ParserRule getGradientRule() {
		return getGradientAccess().getRule();
	}

	//StyleLayout:
	//	{StyleLayout} (("transparency" "=" transparency=DOUBLE)? & ("background-color" "=" background=ColorOrGradient)? &
	//	("gradient-orientation" "=" gradient_orientation=GradientAllignment)? & ("highlighting"
	//	highlighting=HighlightingValues)? & ("line-color" "=" lineColor=ColorWithTransparency)? & ("line-width" "="
	//	lineWidth=INT)? & ("line-style" "=" lineStyle=LineStyle)? & ("font-name" "=" fontName=STRING)? & ("font-color" "="
	//	fontColor=Color)? & ("font-size" "=" fontSize=INT)? & ("font-italic" "=" fontItalic=YesNoBool)? & ("font-bold" "="
	//	fontBold=YesNoBool)?);
	public StyleLayoutElements getStyleLayoutAccess() {
		return (pStyleLayout != null) ? pStyleLayout : (pStyleLayout = new StyleLayoutElements());
	}
	
	public ParserRule getStyleLayoutRule() {
		return getStyleLayoutAccess().getRule();
	}

	//GradientLayout:
	//	{GradientLayout} ("area" area+=GradientColorArea)*;
	public GradientLayoutElements getGradientLayoutAccess() {
		return (pGradientLayout != null) ? pGradientLayout : (pGradientLayout = new GradientLayoutElements());
	}
	
	public ParserRule getGradientLayoutRule() {
		return getGradientLayoutAccess().getRule();
	}

	//HighlightingValues:
	//	{HighlightingValues} "(" ("selected" "=" selected=ColorOrGradient)? ("multiselected" "="
	//	multiselected=ColorOrGradient)? ("allowed" "=" allowed=ColorOrGradient)? ("unallowed" "=" unallowed=ColorOrGradient)?
	//	")";
	public HighlightingValuesElements getHighlightingValuesAccess() {
		return (pHighlightingValues != null) ? pHighlightingValues : (pHighlightingValues = new HighlightingValuesElements());
	}
	
	public ParserRule getHighlightingValuesRule() {
		return getHighlightingValuesAccess().getRule();
	}

	//GradientColorArea:
	//	{GradientColorArea} "(" "color" "=" color=Color "," "offset" "=" offset=DOUBLE ")"+;
	public GradientColorAreaElements getGradientColorAreaAccess() {
		return (pGradientColorArea != null) ? pGradientColorArea : (pGradientColorArea = new GradientColorAreaElements());
	}
	
	public ParserRule getGradientColorAreaRule() {
		return getGradientColorAreaAccess().getRule();
	}

	//ColorOrGradient:
	//	Color | Transparent | GradientRef;
	public ColorOrGradientElements getColorOrGradientAccess() {
		return (pColorOrGradient != null) ? pColorOrGradient : (pColorOrGradient = new ColorOrGradientElements());
	}
	
	public ParserRule getColorOrGradientRule() {
		return getColorOrGradientAccess().getRule();
	}

	//ColorWithTransparency:
	//	Color | Transparent;
	public ColorWithTransparencyElements getColorWithTransparencyAccess() {
		return (pColorWithTransparency != null) ? pColorWithTransparency : (pColorWithTransparency = new ColorWithTransparencyElements());
	}
	
	public ParserRule getColorWithTransparencyRule() {
		return getColorWithTransparencyAccess().getRule();
	}

	//Color:
	//	RGBColor | ColorConstantRef;
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//RGBColor:
	//	"RGB" "(" red=INT "," green=INT "," blue=INT ")";
	public RGBColorElements getRGBColorAccess() {
		return (pRGBColor != null) ? pRGBColor : (pRGBColor = new RGBColorElements());
	}
	
	public ParserRule getRGBColorRule() {
		return getRGBColorAccess().getRule();
	}

	//GradientRef:
	//	{GradientRef} ("JAVA" gradientRef=JvmTypeReference | gradientRefFromDsl=[Gradient]);
	public GradientRefElements getGradientRefAccess() {
		return (pGradientRef != null) ? pGradientRef : (pGradientRef = new GradientRefElements());
	}
	
	public ParserRule getGradientRefRule() {
		return getGradientRefAccess().getRule();
	}

	//ColorConstantRef:
	//	value=ColorConstants;
	public ColorConstantRefElements getColorConstantRefAccess() {
		return (pColorConstantRef != null) ? pColorConstantRef : (pColorConstantRef = new ColorConstantRefElements());
	}
	
	public ParserRule getColorConstantRefRule() {
		return getColorConstantRefAccess().getRule();
	}

	//Transparent:
	//	transparent?="transparent";
	public TransparentElements getTransparentAccess() {
		return (pTransparent != null) ? pTransparent : (pTransparent = new TransparentElements());
	}
	
	public ParserRule getTransparentRule() {
		return getTransparentAccess().getRule();
	}

	//enum ColorConstants:
	//	WHITE="white" | LIGHT_LIGHT_GRAY="very-light-gray" | LIGHT_GRAY="light-gray" | GRAY="gray" | DARK_GRAY="dark-gray" |
	//	BLACK="black" | RED="red" | LIGHT_ORANGE="light-orange" | ORANGE="orange" | DARK_ORANGE="dark-orange" |
	//	YELLOW="yellow" | GREEN="green" | LIGHT_GREEN="light-green" | DARK_GREEN="dark-green" | CYAN="cyan" |
	//	LIGHT_BLUE="light-blue" | BLUE="blue" | DARK_BLUE="dark-blue";
	public ColorConstantsElements getColorConstantsAccess() {
		return (unknownRuleColorConstants != null) ? unknownRuleColorConstants : (unknownRuleColorConstants = new ColorConstantsElements());
	}
	
	public EnumRule getColorConstantsRule() {
		return getColorConstantsAccess().getRule();
	}

	//enum LineStyle:
	//	SOLID="solid" | DOT="dot" | DASH="dash" | DASHDOT="dash-dot" | DASHDOTDOT="dash-dot-dot";
	public LineStyleElements getLineStyleAccess() {
		return (unknownRuleLineStyle != null) ? unknownRuleLineStyle : (unknownRuleLineStyle = new LineStyleElements());
	}
	
	public EnumRule getLineStyleRule() {
		return getLineStyleAccess().getRule();
	}

	//enum YesNoBool:
	//	YES="yes" | NO="no";
	public YesNoBoolElements getYesNoBoolAccess() {
		return (unknownRuleYesNoBool != null) ? unknownRuleYesNoBool : (unknownRuleYesNoBool = new YesNoBoolElements());
	}
	
	public EnumRule getYesNoBoolRule() {
		return getYesNoBoolAccess().getRule();
	}

	//enum GradientAllignment:
	//	HORIZONTAL="horizontal" | VERTICAL="vertical";
	public GradientAllignmentElements getGradientAllignmentAccess() {
		return (unknownRuleGradientAllignment != null) ? unknownRuleGradientAllignment : (unknownRuleGradientAllignment = new GradientAllignmentElements());
	}
	
	public EnumRule getGradientAllignmentRule() {
		return getGradientAllignmentAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX returns ecore::EString:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL returns ecore::EString:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID returns ecore::EString:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT returns ecore::EString:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT returns ecore::EString:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER returns ecore::EString:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
