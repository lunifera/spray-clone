/**
 * Copyright (c)  The Spray Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Spray Dev Team - initial API and implementation
 */
package org.eclipselabs.spray.generator.graphiti.templates;

import com.google.common.base.Objects;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.eclipselabs.spray.generator.common.GeneratorUtil;
import org.eclipselabs.spray.generator.common.XtendProperties;
import org.eclipselabs.spray.generator.common.templates.TemplateUtil;
import org.eclipselabs.spray.generator.graphiti.util.NamingExtensions;
import org.eclipselabs.spray.mm.spray.Diagram;
import org.eclipselabs.spray.mm.spray.MetaClass;

@SuppressWarnings("all")
public class Plugin extends TemplateUtil {
  @Inject
  @Extension
  private NamingExtensions _namingExtensions;
  
  public CharSequence generateStub(final String diagramName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<?eclipse version=\"3.0\"?>");
    _builder.newLine();
    CharSequence _pluginHeader = this.pluginHeader(this);
    _builder.append(_pluginHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- GRAPHITI EDITOR EXTENSION AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- GRAPHITI EDITOR EXTENSION AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.diagramTypes\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.diagramTypeProviders\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE PROVIDER AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE PROVIDER AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.imageProviders\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- IMAGE PROVIDER AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- IMAGE PROVIDER AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.ui.views.properties.tabbed.propertyContributor\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<propertyContributor contributorId=\"");
    _builder.append(diagramName, "    ");
    _builder.append(".PropertyContributor\">");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("<propertyCategory category=\"");
    _builder.append(diagramName, "       ");
    _builder.append("Category\">");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("</propertyCategory>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</propertyContributor>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.ui.views.properties.tabbed.propertyTabs\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<propertyTabs contributorId=\"");
    _builder.append(diagramName, "    ");
    _builder.append(".PropertyContributor\">");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<!-- PROPERTY TAB AUTOGEN START -->");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<!-- PROPERTY TAB AUTOGEN END -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</propertyTabs>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- PROPERTY SECTIONS AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- PROPERTY SECTIONS AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- NEW DIAGRAM WIZARD AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- NEW DIAGRAM WIZARD AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("</plugin>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate(final Diagram diagram) {
    StringConcatenation _builder = new StringConcatenation();
    final String diagramName = diagram.getName();
    _builder.newLineIfNotEmpty();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<?eclipse version=\"3.0\"?>");
    _builder.newLine();
    CharSequence _pluginHeader = this.pluginHeader(this);
    _builder.append(_pluginHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<plugin>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- GRAPHITI EDITOR EXTENSION AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    CharSequence _generate_graphitiEditorExtension = this.generate_graphitiEditorExtension(diagram);
    _builder.append(_generate_graphitiEditorExtension, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<!-- GRAPHITI EDITOR EXTENSION AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.diagramTypes\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _generate_diagramType = this.generate_diagramType(diagramName);
    _builder.append(_generate_diagramType, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.diagramTypeProviders\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE PROVIDER AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _generate_diagramTypeProvider = this.generate_diagramTypeProvider(diagram, diagramName);
    _builder.append(_generate_diagramTypeProvider, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<!-- DIAGRAM TYPE PROVIDER AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.graphiti.ui.imageProviders\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- IMAGE PROVIDER AUTOGEN START -->");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _generate_imageProvider = this.generate_imageProvider(diagram);
    _builder.append(_generate_imageProvider, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<!-- IMAGE PROVIDER AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.ui.views.properties.tabbed.propertyContributor\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<propertyContributor contributorId=\"");
    _builder.append(diagramName, "    ");
    _builder.append(".PropertyContributor\">");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("<propertyCategory category=\"");
    _builder.append(diagramName, "       ");
    _builder.append("Category\">");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("</propertyCategory>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</propertyContributor>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("point=\"org.eclipse.ui.views.properties.tabbed.propertyTabs\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<propertyTabs contributorId=\"");
    _builder.append(diagramName, "    ");
    _builder.append(".PropertyContributor\">");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<!-- PROPERTY TAB AUTOGEN START -->");
    _builder.newLine();
    _builder.append("      ");
    CharSequence _generate_propertyTab = this.generate_propertyTab(diagramName);
    _builder.append(_generate_propertyTab, "      ");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<!-- PROPERTY TAB AUTOGEN END -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</propertyTabs>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- PROPERTY SECTIONS AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    CharSequence _generate_propertySections = this.generate_propertySections(diagram, diagramName);
    _builder.append(_generate_propertySections, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<!-- PROPERTY SECTIONS AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<!-- NEW DIAGRAM WIZARD AUTOGEN START -->");
    _builder.newLine();
    _builder.append("  ");
    CharSequence _generate_newDiagramWizard = this.generate_newDiagramWizard(diagram);
    _builder.append(_generate_newDiagramWizard, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<!-- NEW DIAGRAM WIZARD AUTOGEN END -->");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("</plugin>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_graphitiEditorExtension(final Diagram diagram) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!-- Potentially redefine the EDITOR EXTENSION TO ALLOW FOR OUR OWN EDITOR SUBCLASS TO BE USED. ");
    _builder.newLine();
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("point=\"org.eclipse.ui.editors\">");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<editor");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("class=\"");
    String _extensionFactoryClassName = this._namingExtensions.getExtensionFactoryClassName(diagram);
    _builder.append(_extensionFactoryClassName, "       ");
    _builder.append(":");
    String _diagramEditorClassName = this._namingExtensions.getDiagramEditorClassName(diagram);
    _builder.append(_diagramEditorClassName, "       ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("contributorClass=\"org.eclipse.graphiti.ui.editor.DiagramEditorActionBarContributor\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("default=\"true\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("extensions=\"diagram\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("icon=\"icons/diagram.gif\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("id=\"");
    String _diagramEditorClassName_1 = this._namingExtensions.getDiagramEditorClassName(diagram);
    _builder.append(_diagramEditorClassName_1, "       ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    _builder.append("matchingStrategy=\"org.eclipse.graphiti.ui.editor.DiagramEditorFactory$DiagramEditorMatchingStrategy\"");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("name=\"%_diagram_editor_name\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<contentTypeBinding");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("contentTypeId=\"org.eclipse.graphiti.content.diagram\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</contentTypeBinding>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</editor>");
    _builder.newLine();
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("-->");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_diagramType(final String diagramName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<diagramType");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("description=\"This is the diagram type for the ");
    _builder.append(diagramName, "  ");
    _builder.append(" diagram type\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("id=\"");
    String _diagram_package = GeneratorUtil.diagram_package();
    _builder.append(_diagram_package, "  ");
    _builder.append(".");
    String _firstUpper = StringExtensions.toFirstUpper(diagramName);
    _builder.append(_firstUpper, "  ");
    _builder.append("DiagramType\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("name=\"");
    _builder.append(diagramName, "  ");
    _builder.append(" Graphiti Diagram Type\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("type=\"");
    _builder.append(diagramName, "  ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("</diagramType>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_diagramTypeProvider(final Diagram diagram, final String diagramName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<diagramTypeProvider");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class=\"");
    String _extensionFactoryClassName = this._namingExtensions.getExtensionFactoryClassName(diagram);
    _builder.append(_extensionFactoryClassName, "  ");
    _builder.append(":");
    String _diagramTypeProviderClassName = this._namingExtensions.getDiagramTypeProviderClassName(diagram);
    _builder.append(_diagramTypeProviderClassName, "  ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("description=\"This is my editor for the ");
    _builder.append(diagramName, "  ");
    _builder.append(" diagram type\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("id=\"");
    String _diagramTypeProviderClassName_1 = this._namingExtensions.getDiagramTypeProviderClassName(diagram);
    _builder.append(_diagramTypeProviderClassName_1, "  ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("name=\"");
    _builder.append(diagramName, "  ");
    _builder.append(" editor\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<diagramType");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("id=\"");
    String _diagram_package = GeneratorUtil.diagram_package();
    _builder.append(_diagram_package, "        ");
    _builder.append(".");
    String _firstUpper = StringExtensions.toFirstUpper(diagramName);
    _builder.append(_firstUpper, "        ");
    _builder.append("DiagramType\">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("</diagramType>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<imageProvider");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("id=\"");
    String _imageProviderClassName = this._namingExtensions.getImageProviderClassName(diagram);
    _builder.append(_imageProviderClassName, "           ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("</imageProvider>");
    _builder.newLine();
    _builder.append("</diagramTypeProvider>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_imageProvider(final Diagram diagram) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<imageProvider");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("class=\"");
    String _extensionFactoryClassName = this._namingExtensions.getExtensionFactoryClassName(diagram);
    _builder.append(_extensionFactoryClassName, "      ");
    _builder.append(":");
    String _imageProviderClassName = this._namingExtensions.getImageProviderClassName(diagram);
    _builder.append(_imageProviderClassName, "      ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("id=\"");
    String _imageProviderClassName_1 = this._namingExtensions.getImageProviderClassName(diagram);
    _builder.append(_imageProviderClassName_1, "         ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("</imageProvider>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_propertyTab(final String diagramName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<propertyTab label=\"Main\" category=\"");
    _builder.append(diagramName, "");
    _builder.append("Category\"");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("id=\"");
    _builder.append(diagramName, "    ");
    _builder.append(".main.tab\">");
    _builder.newLineIfNotEmpty();
    _builder.append("</propertyTab>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generate_propertySections(final Diagram diagram, final String diagramName) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<MetaClass> _metaClasses = diagram.getMetaClasses();
      for(final MetaClass cls : _metaClasses) {
        XtendProperties.setValue("PreviousSection", null);
        _builder.newLineIfNotEmpty();
        _builder.append("<extension");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("point=\"org.eclipse.ui.views.properties.tabbed.propertySections\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("<propertySections contributorId=\"");
        _builder.append(diagramName, "    ");
        _builder.append(".PropertyContributor\">");
        _builder.newLineIfNotEmpty();
        {
          EClass _type = cls.getType();
          EList<EAttribute> _eAllAttributes = _type.getEAllAttributes();
          for(final EAttribute property : _eAllAttributes) {
            _builder.append("  ");
            _builder.append("<propertySection tab=\"");
            _builder.append(diagramName, "  ");
            _builder.append(".main.tab\"");
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append(" ");
            _builder.append("class=\"");
            String _extensionFactoryClassName = this._namingExtensions.getExtensionFactoryClassName(diagram);
            _builder.append(_extensionFactoryClassName, "   ");
            _builder.append(":");
            EClass _type_1 = cls.getType();
            String _propertySectionClassName = this._namingExtensions.getPropertySectionClassName(_type_1, property);
            _builder.append(_propertySectionClassName, "   ");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append(" ");
            _builder.append("filter=\"");
            String _filterClassName = this._namingExtensions.getFilterClassName(cls);
            _builder.append(_filterClassName, "   ");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            {
              String _value = XtendProperties.getValue("PreviousSection");
              boolean _notEquals = (!Objects.equal(_value, null));
              if (_notEquals) {
                _builder.append("  ");
                _builder.append(" ");
                _builder.append("afterSection=\"");
                String _value_1 = XtendProperties.getValue("PreviousSection");
                _builder.append(_value_1, "   ");
                _builder.append("\"");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("  ");
            _builder.append(" ");
            String _name = this._namingExtensions.getName(cls);
            String _plus = ((diagramName + ".main.tab.") + _name);
            String _plus_1 = (_plus + ".");
            String _name_1 = property.getName();
            String _plus_2 = (_plus_1 + _name_1);
            XtendProperties.setValue("PreviousSection", _plus_2);
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append(" ");
            _builder.append("id=\"");
            String _value_2 = XtendProperties.getValue("PreviousSection");
            _builder.append(_value_2, "   ");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("  ");
            _builder.append("</propertySection>");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("</propertySections>");
        _builder.newLine();
        _builder.append("</extension>");
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence generate_newDiagramWizard(final Diagram diagram) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<extension");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("point=\"org.eclipse.ui.newWizards\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<category");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("name=\"");
    String _name = diagram.getName();
    _builder.append(_name, "         ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("id=\"org.eclipselabs.spray.");
    String _name_1 = diagram.getName();
    _builder.append(_name_1, "         ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</category>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<wizard");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("category=\"org.eclipselabs.spray.");
    String _name_2 = diagram.getName();
    _builder.append(_name_2, "         ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("class=\"");
    String _extensionFactoryClassName = this._namingExtensions.getExtensionFactoryClassName(diagram);
    _builder.append(_extensionFactoryClassName, "         ");
    _builder.append(":org.eclipselabs.spray.runtime.graphiti.wizard.NewDiagramWizard\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("descriptionImage=\"icons/");
    String _name_3 = diagram.getName();
    _builder.append(_name_3, "         ");
    _builder.append("-32.png\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("icon=\"icons/");
    String _name_4 = diagram.getName();
    _builder.append(_name_4, "         ");
    _builder.append("-16.png\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("id=\"org.eclipselabs.spray.");
    String _name_5 = diagram.getName();
    _builder.append(_name_5, "         ");
    _builder.append(".NewDiagramWizard\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("name=\"New ");
    String _name_6 = diagram.getName();
    _builder.append(_name_6, "         ");
    _builder.append(" Diagram\"");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("preferredPerspectives=\"org.eclipse.graphiti.examples.common.perspective.GFPerspective\"");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("project=\"false\">");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</wizard>");
    _builder.newLine();
    _builder.append("</extension>");
    _builder.newLine();
    return _builder;
  }
}
